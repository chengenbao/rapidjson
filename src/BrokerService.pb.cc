// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BrokerService.proto

#include "tubemq/BrokerService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_BrokerService_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BrokerService_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AuthorizedInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_BrokerService_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TransferedMessage;
}  // namespace protobuf_BrokerService_2eproto
class TransferedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TransferedMessage>
      _instance;
} _TransferedMessage_default_instance_;
class AuthorizedInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthorizedInfo>
      _instance;
} _AuthorizedInfo_default_instance_;
class SendMessageRequestP2BDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SendMessageRequestP2B>
      _instance;
} _SendMessageRequestP2B_default_instance_;
class SendMessageResponseB2PDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SendMessageResponseB2P>
      _instance;
} _SendMessageResponseB2P_default_instance_;
class RegisterRequestC2BDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterRequestC2B>
      _instance;
} _RegisterRequestC2B_default_instance_;
class RegisterResponseB2CDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterResponseB2C>
      _instance;
} _RegisterResponseB2C_default_instance_;
class HeartBeatRequestC2BDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartBeatRequestC2B>
      _instance;
} _HeartBeatRequestC2B_default_instance_;
class HeartBeatResponseB2CDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartBeatResponseB2C>
      _instance;
} _HeartBeatResponseB2C_default_instance_;
class GetMessageRequestC2BDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetMessageRequestC2B>
      _instance;
} _GetMessageRequestC2B_default_instance_;
class GetMessageResponseB2CDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetMessageResponseB2C>
      _instance;
} _GetMessageResponseB2C_default_instance_;
class CommitOffsetRequestC2BDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommitOffsetRequestC2B>
      _instance;
} _CommitOffsetRequestC2B_default_instance_;
class CommitOffsetResponseB2CDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommitOffsetResponseB2C>
      _instance;
} _CommitOffsetResponseB2C_default_instance_;
namespace protobuf_BrokerService_2eproto {
static void InitDefaultsTransferedMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TransferedMessage_default_instance_;
    new (ptr) ::TransferedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TransferedMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TransferedMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTransferedMessage}, {}};

static void InitDefaultsAuthorizedInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AuthorizedInfo_default_instance_;
    new (ptr) ::AuthorizedInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AuthorizedInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthorizedInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthorizedInfo}, {}};

static void InitDefaultsSendMessageRequestP2B() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SendMessageRequestP2B_default_instance_;
    new (ptr) ::SendMessageRequestP2B();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SendMessageRequestP2B::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SendMessageRequestP2B =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSendMessageRequestP2B}, {
      &protobuf_BrokerService_2eproto::scc_info_AuthorizedInfo.base,}};

static void InitDefaultsSendMessageResponseB2P() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SendMessageResponseB2P_default_instance_;
    new (ptr) ::SendMessageResponseB2P();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SendMessageResponseB2P::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SendMessageResponseB2P =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSendMessageResponseB2P}, {}};

static void InitDefaultsRegisterRequestC2B() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterRequestC2B_default_instance_;
    new (ptr) ::RegisterRequestC2B();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterRequestC2B::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RegisterRequestC2B =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRegisterRequestC2B}, {
      &protobuf_BrokerService_2eproto::scc_info_AuthorizedInfo.base,}};

static void InitDefaultsRegisterResponseB2C() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterResponseB2C_default_instance_;
    new (ptr) ::RegisterResponseB2C();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterResponseB2C::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RegisterResponseB2C =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRegisterResponseB2C}, {}};

static void InitDefaultsHeartBeatRequestC2B() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HeartBeatRequestC2B_default_instance_;
    new (ptr) ::HeartBeatRequestC2B();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HeartBeatRequestC2B::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HeartBeatRequestC2B =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHeartBeatRequestC2B}, {
      &protobuf_BrokerService_2eproto::scc_info_AuthorizedInfo.base,}};

static void InitDefaultsHeartBeatResponseB2C() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HeartBeatResponseB2C_default_instance_;
    new (ptr) ::HeartBeatResponseB2C();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HeartBeatResponseB2C::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HeartBeatResponseB2C =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeartBeatResponseB2C}, {}};

static void InitDefaultsGetMessageRequestC2B() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetMessageRequestC2B_default_instance_;
    new (ptr) ::GetMessageRequestC2B();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetMessageRequestC2B::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetMessageRequestC2B =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetMessageRequestC2B}, {}};

static void InitDefaultsGetMessageResponseB2C() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetMessageResponseB2C_default_instance_;
    new (ptr) ::GetMessageResponseB2C();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetMessageResponseB2C::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetMessageResponseB2C =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetMessageResponseB2C}, {
      &protobuf_BrokerService_2eproto::scc_info_TransferedMessage.base,}};

static void InitDefaultsCommitOffsetRequestC2B() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CommitOffsetRequestC2B_default_instance_;
    new (ptr) ::CommitOffsetRequestC2B();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CommitOffsetRequestC2B::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CommitOffsetRequestC2B =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommitOffsetRequestC2B}, {}};

static void InitDefaultsCommitOffsetResponseB2C() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CommitOffsetResponseB2C_default_instance_;
    new (ptr) ::CommitOffsetResponseB2C();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CommitOffsetResponseB2C::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CommitOffsetResponseB2C =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCommitOffsetResponseB2C}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TransferedMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthorizedInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SendMessageRequestP2B.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SendMessageResponseB2P.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterRequestC2B.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterResponseB2C.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeartBeatRequestC2B.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeartBeatResponseB2C.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetMessageRequestC2B.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetMessageResponseB2C.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommitOffsetRequestC2B.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CommitOffsetResponseB2C.base);
}

::google::protobuf::Metadata file_level_metadata[12];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TransferedMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TransferedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TransferedMessage, messageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TransferedMessage, checksum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TransferedMessage, payloaddata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TransferedMessage, flag_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AuthorizedInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AuthorizedInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AuthorizedInfo, visitauthorizedtoken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AuthorizedInfo, authauthorizedtoken_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageRequestP2B, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageRequestP2B, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageRequestP2B, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageRequestP2B, topicname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageRequestP2B, partitionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageRequestP2B, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageRequestP2B, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageRequestP2B, checksum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageRequestP2B, sentaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageRequestP2B, msgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageRequestP2B, msgtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageRequestP2B, authinfo_),
  0,
  1,
  6,
  2,
  7,
  8,
  9,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageResponseB2P, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageResponseB2P, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageResponseB2P, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageResponseB2P, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageResponseB2P, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendMessageResponseB2P, requireauth_),
  2,
  1,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2B, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2B, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2B, optype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2B, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2B, groupname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2B, topicname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2B, partitionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2B, readstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2B, filtercondstr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2B, curroffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2B, sessionkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2B, sessiontime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2B, ssdstoreid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2B, qrypriorityid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2B, authinfo_),
  5,
  0,
  1,
  2,
  6,
  8,
  ~0u,
  7,
  3,
  10,
  11,
  9,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseB2C, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseB2C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseB2C, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseB2C, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseB2C, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseB2C, curroffset_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartBeatRequestC2B, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartBeatRequestC2B, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartBeatRequestC2B, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartBeatRequestC2B, groupname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartBeatRequestC2B, readstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartBeatRequestC2B, partitioninfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartBeatRequestC2B, ssdstoreid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartBeatRequestC2B, qrypriorityid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartBeatRequestC2B, authinfo_),
  0,
  1,
  3,
  ~0u,
  5,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartBeatResponseB2C, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartBeatResponseB2C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartBeatResponseB2C, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartBeatResponseB2C, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartBeatResponseB2C, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartBeatResponseB2C, haspartfailure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartBeatResponseB2C, failureinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartBeatResponseB2C, requireauth_),
  2,
  1,
  0,
  3,
  ~0u,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageRequestC2B, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageRequestC2B, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageRequestC2B, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageRequestC2B, partitionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageRequestC2B, groupname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageRequestC2B, topicname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageRequestC2B, lastpackconsumed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageRequestC2B, manualcommitoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageRequestC2B, escflowctrl_),
  0,
  3,
  1,
  2,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageResponseB2C, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageResponseB2C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageResponseB2C, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageResponseB2C, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageResponseB2C, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageResponseB2C, messages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageResponseB2C, curroffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageResponseB2C, minlimittime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageResponseB2C, escflowctrl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageResponseB2C, currdatadlt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetMessageResponseB2C, requireslow_),
  2,
  1,
  0,
  ~0u,
  5,
  7,
  3,
  6,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CommitOffsetRequestC2B, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CommitOffsetRequestC2B, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CommitOffsetRequestC2B, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CommitOffsetRequestC2B, topicname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CommitOffsetRequestC2B, partitionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CommitOffsetRequestC2B, groupname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CommitOffsetRequestC2B, lastpackconsumed_),
  0,
  1,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CommitOffsetResponseB2C, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CommitOffsetResponseB2C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CommitOffsetResponseB2C, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CommitOffsetResponseB2C, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CommitOffsetResponseB2C, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CommitOffsetResponseB2C, curroffset_),
  1,
  2,
  0,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::TransferedMessage)},
  { 13, 20, sizeof(::AuthorizedInfo)},
  { 22, 37, sizeof(::SendMessageRequestP2B)},
  { 47, 56, sizeof(::SendMessageResponseB2P)},
  { 60, 78, sizeof(::RegisterRequestC2B)},
  { 91, 100, sizeof(::RegisterResponseB2C)},
  { 104, 116, sizeof(::HeartBeatRequestC2B)},
  { 123, 134, sizeof(::HeartBeatResponseB2C)},
  { 140, 152, sizeof(::GetMessageRequestC2B)},
  { 159, 173, sizeof(::GetMessageResponseB2C)},
  { 182, 192, sizeof(::CommitOffsetRequestC2B)},
  { 197, 206, sizeof(::CommitOffsetResponseB2C)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TransferedMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AuthorizedInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SendMessageRequestP2B_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SendMessageResponseB2P_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RegisterRequestC2B_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RegisterResponseB2C_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HeartBeatRequestC2B_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HeartBeatResponseB2C_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GetMessageRequestC2B_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GetMessageResponseB2C_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CommitOffsetRequestC2B_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CommitOffsetResponseB2C_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "BrokerService.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023BrokerService.proto\"[\n\021TransferedMessa"
      "ge\022\021\n\tmessageId\030\001 \002(\003\022\020\n\010checkSum\030\002 \002(\005\022"
      "\023\n\013payLoadData\030\003 \002(\014\022\014\n\004flag\030\004 \002(\005\"K\n\016Au"
      "thorizedInfo\022\034\n\024visitAuthorizedToken\030\001 \002"
      "(\003\022\033\n\023authAuthorizedToken\030\002 \001(\t\"\326\001\n\025Send"
      "MessageRequestP2B\022\020\n\010clientId\030\001 \002(\t\022\021\n\tt"
      "opicName\030\002 \002(\t\022\023\n\013partitionId\030\003 \002(\005\022\014\n\004d"
      "ata\030\004 \002(\014\022\014\n\004flag\030\005 \002(\005\022\020\n\010checkSum\030\006 \002("
      "\005\022\020\n\010sentAddr\030\007 \002(\005\022\017\n\007msgType\030\010 \001(\t\022\017\n\007"
      "msgTime\030\t \001(\t\022!\n\010authInfo\030\n \001(\0132\017.Author"
      "izedInfo\"_\n\026SendMessageResponseB2P\022\017\n\007su"
      "ccess\030\001 \002(\010\022\017\n\007errCode\030\002 \002(\005\022\016\n\006errMsg\030\003"
      " \002(\t\022\023\n\013requireAuth\030\004 \001(\010\"\247\002\n\022RegisterRe"
      "questC2B\022\016\n\006opType\030\001 \002(\005\022\020\n\010clientId\030\002 \002"
      "(\t\022\021\n\tgroupName\030\003 \002(\t\022\021\n\ttopicName\030\004 \002(\t"
      "\022\023\n\013partitionId\030\005 \002(\005\022\022\n\nreadStatus\030\006 \002("
      "\005\022\025\n\rfilterCondStr\030\007 \003(\t\022\022\n\ncurrOffset\030\010"
      " \001(\003\022\022\n\nsessionKey\030\t \001(\t\022\023\n\013sessionTime\030"
      "\n \001(\003\022\022\n\nssdStoreId\030\013 \001(\003\022\025\n\rqryPriority"
      "Id\030\014 \001(\005\022!\n\010authInfo\030\r \001(\0132\017.AuthorizedI"
      "nfo\"[\n\023RegisterResponseB2C\022\017\n\007success\030\001 "
      "\002(\010\022\017\n\007errCode\030\002 \002(\005\022\016\n\006errMsg\030\003 \002(\t\022\022\n\n"
      "currOffset\030\004 \001(\003\"\263\001\n\023HeartBeatRequestC2B"
      "\022\020\n\010clientId\030\001 \002(\t\022\021\n\tgroupName\030\002 \002(\t\022\022\n"
      "\nreadStatus\030\003 \002(\005\022\025\n\rpartitionInfo\030\004 \003(\t"
      "\022\022\n\nssdStoreId\030\005 \001(\003\022\025\n\rqryPriorityId\030\006 "
      "\001(\005\022!\n\010authInfo\030\007 \001(\0132\017.AuthorizedInfo\"\212"
      "\001\n\024HeartBeatResponseB2C\022\017\n\007success\030\001 \002(\010"
      "\022\017\n\007errCode\030\002 \002(\005\022\016\n\006errMsg\030\003 \002(\t\022\026\n\016has"
      "PartFailure\030\004 \001(\010\022\023\n\013failureInfo\030\005 \003(\t\022\023"
      "\n\013requireAuth\030\006 \001(\010\"\256\001\n\024GetMessageReques"
      "tC2B\022\020\n\010clientId\030\001 \002(\t\022\023\n\013partitionId\030\002 "
      "\002(\005\022\021\n\tgroupName\030\003 \002(\t\022\021\n\ttopicName\030\004 \002("
      "\t\022\030\n\020lastPackConsumed\030\005 \001(\010\022\032\n\022manualCom"
      "mitOffset\030\006 \001(\010\022\023\n\013escFlowCtrl\030\007 \001(\010\"\330\001\n"
      "\025GetMessageResponseB2C\022\017\n\007success\030\001 \002(\010\022"
      "\017\n\007errCode\030\002 \002(\005\022\016\n\006errMsg\030\003 \001(\t\022$\n\010mess"
      "ages\030\004 \003(\0132\022.TransferedMessage\022\022\n\ncurrOf"
      "fset\030\005 \001(\003\022\024\n\014minLimitTime\030\006 \001(\005\022\023\n\013escF"
      "lowCtrl\030\007 \001(\010\022\023\n\013currDataDlt\030\010 \001(\003\022\023\n\013re"
      "quireSlow\030\t \001(\010\"\177\n\026CommitOffsetRequestC2"
      "B\022\020\n\010clientId\030\001 \002(\t\022\021\n\ttopicName\030\002 \002(\t\022\023"
      "\n\013partitionId\030\003 \002(\005\022\021\n\tgroupName\030\004 \002(\t\022\030"
      "\n\020lastPackConsumed\030\005 \001(\010\"_\n\027CommitOffset"
      "ResponseB2C\022\017\n\007success\030\001 \002(\010\022\017\n\007errCode\030"
      "\002 \002(\005\022\016\n\006errMsg\030\003 \002(\t\022\022\n\ncurrOffset\030\004 \001("
      "\003BE\n-org.apache.tubemq.corebase.protobuf"
      ".generatedB\014ClientBrokerH\001\210\001\001\240\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1912);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BrokerService.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_BrokerService_2eproto

// ===================================================================

void TransferedMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferedMessage::kMessageIdFieldNumber;
const int TransferedMessage::kCheckSumFieldNumber;
const int TransferedMessage::kPayLoadDataFieldNumber;
const int TransferedMessage::kFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferedMessage::TransferedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BrokerService_2eproto::scc_info_TransferedMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransferedMessage)
}
TransferedMessage::TransferedMessage(const TransferedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payloaddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payloaddata()) {
    payloaddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payloaddata_);
  }
  ::memcpy(&messageid_, &from.messageid_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&messageid_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:TransferedMessage)
}

void TransferedMessage::SharedCtor() {
  payloaddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&messageid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&messageid_)) + sizeof(flag_));
}

TransferedMessage::~TransferedMessage() {
  // @@protoc_insertion_point(destructor:TransferedMessage)
  SharedDtor();
}

void TransferedMessage::SharedDtor() {
  payloaddata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransferedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TransferedMessage::descriptor() {
  ::protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransferedMessage& TransferedMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BrokerService_2eproto::scc_info_TransferedMessage.base);
  return *internal_default_instance();
}


void TransferedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TransferedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    payloaddata_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&messageid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flag_) -
        reinterpret_cast<char*>(&messageid_)) + sizeof(flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransferedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransferedMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 messageId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_messageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &messageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 checkSum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_checksum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes payLoadData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payloaddata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransferedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransferedMessage)
  return false;
#undef DO_
}

void TransferedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransferedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 messageId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->messageid(), output);
  }

  // required int32 checkSum = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->checksum(), output);
  }

  // required bytes payLoadData = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->payloaddata(), output);
  }

  // required int32 flag = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->flag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TransferedMessage)
}

::google::protobuf::uint8* TransferedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TransferedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 messageId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->messageid(), target);
  }

  // required int32 checkSum = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->checksum(), target);
  }

  // required bytes payLoadData = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payloaddata(), target);
  }

  // required int32 flag = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->flag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TransferedMessage)
  return target;
}

size_t TransferedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TransferedMessage)
  size_t total_size = 0;

  if (has_payloaddata()) {
    // required bytes payLoadData = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payloaddata());
  }

  if (has_messageid()) {
    // required int64 messageId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->messageid());
  }

  if (has_checksum()) {
    // required int32 checkSum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->checksum());
  }

  if (has_flag()) {
    // required int32 flag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  return total_size;
}
size_t TransferedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TransferedMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes payLoadData = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payloaddata());

    // required int64 messageId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->messageid());

    // required int32 checkSum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->checksum());

    // required int32 flag = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransferedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TransferedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TransferedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TransferedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TransferedMessage)
    MergeFrom(*source);
  }
}

void TransferedMessage::MergeFrom(const TransferedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TransferedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_payloaddata();
      payloaddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payloaddata_);
    }
    if (cached_has_bits & 0x00000002u) {
      messageid_ = from.messageid_;
    }
    if (cached_has_bits & 0x00000004u) {
      checksum_ = from.checksum_;
    }
    if (cached_has_bits & 0x00000008u) {
      flag_ = from.flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransferedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TransferedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferedMessage::CopyFrom(const TransferedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TransferedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void TransferedMessage::Swap(TransferedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferedMessage::InternalSwap(TransferedMessage* other) {
  using std::swap;
  payloaddata_.Swap(&other->payloaddata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(messageid_, other->messageid_);
  swap(checksum_, other->checksum_);
  swap(flag_, other->flag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TransferedMessage::GetMetadata() const {
  protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuthorizedInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthorizedInfo::kVisitAuthorizedTokenFieldNumber;
const int AuthorizedInfo::kAuthAuthorizedTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthorizedInfo::AuthorizedInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BrokerService_2eproto::scc_info_AuthorizedInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthorizedInfo)
}
AuthorizedInfo::AuthorizedInfo(const AuthorizedInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  authauthorizedtoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authauthorizedtoken()) {
    authauthorizedtoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authauthorizedtoken_);
  }
  visitauthorizedtoken_ = from.visitauthorizedtoken_;
  // @@protoc_insertion_point(copy_constructor:AuthorizedInfo)
}

void AuthorizedInfo::SharedCtor() {
  authauthorizedtoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visitauthorizedtoken_ = GOOGLE_LONGLONG(0);
}

AuthorizedInfo::~AuthorizedInfo() {
  // @@protoc_insertion_point(destructor:AuthorizedInfo)
  SharedDtor();
}

void AuthorizedInfo::SharedDtor() {
  authauthorizedtoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthorizedInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AuthorizedInfo::descriptor() {
  ::protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthorizedInfo& AuthorizedInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BrokerService_2eproto::scc_info_AuthorizedInfo.base);
  return *internal_default_instance();
}


void AuthorizedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthorizedInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    authauthorizedtoken_.ClearNonDefaultToEmptyNoArena();
  }
  visitauthorizedtoken_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthorizedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AuthorizedInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 visitAuthorizedToken = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_visitauthorizedtoken();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &visitauthorizedtoken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string authAuthorizedToken = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authauthorizedtoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authauthorizedtoken().data(), static_cast<int>(this->authauthorizedtoken().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AuthorizedInfo.authAuthorizedToken");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthorizedInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthorizedInfo)
  return false;
#undef DO_
}

void AuthorizedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthorizedInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 visitAuthorizedToken = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->visitauthorizedtoken(), output);
  }

  // optional string authAuthorizedToken = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authauthorizedtoken().data(), static_cast<int>(this->authauthorizedtoken().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AuthorizedInfo.authAuthorizedToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->authauthorizedtoken(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AuthorizedInfo)
}

::google::protobuf::uint8* AuthorizedInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AuthorizedInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 visitAuthorizedToken = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->visitauthorizedtoken(), target);
  }

  // optional string authAuthorizedToken = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authauthorizedtoken().data(), static_cast<int>(this->authauthorizedtoken().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AuthorizedInfo.authAuthorizedToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authauthorizedtoken(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthorizedInfo)
  return target;
}

size_t AuthorizedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthorizedInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 visitAuthorizedToken = 1;
  if (has_visitauthorizedtoken()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->visitauthorizedtoken());
  }
  // optional string authAuthorizedToken = 2;
  if (has_authauthorizedtoken()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->authauthorizedtoken());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthorizedInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AuthorizedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthorizedInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthorizedInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AuthorizedInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AuthorizedInfo)
    MergeFrom(*source);
  }
}

void AuthorizedInfo::MergeFrom(const AuthorizedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AuthorizedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_authauthorizedtoken();
      authauthorizedtoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authauthorizedtoken_);
    }
    if (cached_has_bits & 0x00000002u) {
      visitauthorizedtoken_ = from.visitauthorizedtoken_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AuthorizedInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AuthorizedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthorizedInfo::CopyFrom(const AuthorizedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthorizedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorizedInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void AuthorizedInfo::Swap(AuthorizedInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthorizedInfo::InternalSwap(AuthorizedInfo* other) {
  using std::swap;
  authauthorizedtoken_.Swap(&other->authauthorizedtoken_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(visitauthorizedtoken_, other->visitauthorizedtoken_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AuthorizedInfo::GetMetadata() const {
  protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SendMessageRequestP2B::InitAsDefaultInstance() {
  ::_SendMessageRequestP2B_default_instance_._instance.get_mutable()->authinfo_ = const_cast< ::AuthorizedInfo*>(
      ::AuthorizedInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendMessageRequestP2B::kClientIdFieldNumber;
const int SendMessageRequestP2B::kTopicNameFieldNumber;
const int SendMessageRequestP2B::kPartitionIdFieldNumber;
const int SendMessageRequestP2B::kDataFieldNumber;
const int SendMessageRequestP2B::kFlagFieldNumber;
const int SendMessageRequestP2B::kCheckSumFieldNumber;
const int SendMessageRequestP2B::kSentAddrFieldNumber;
const int SendMessageRequestP2B::kMsgTypeFieldNumber;
const int SendMessageRequestP2B::kMsgTimeFieldNumber;
const int SendMessageRequestP2B::kAuthInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendMessageRequestP2B::SendMessageRequestP2B()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BrokerService_2eproto::scc_info_SendMessageRequestP2B.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SendMessageRequestP2B)
}
SendMessageRequestP2B::SendMessageRequestP2B(const SendMessageRequestP2B& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  topicname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topicname()) {
    topicname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topicname_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  msgtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msgtype()) {
    msgtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgtype_);
  }
  msgtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msgtime()) {
    msgtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgtime_);
  }
  if (from.has_authinfo()) {
    authinfo_ = new ::AuthorizedInfo(*from.authinfo_);
  } else {
    authinfo_ = NULL;
  }
  ::memcpy(&partitionid_, &from.partitionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sentaddr_) -
    reinterpret_cast<char*>(&partitionid_)) + sizeof(sentaddr_));
  // @@protoc_insertion_point(copy_constructor:SendMessageRequestP2B)
}

void SendMessageRequestP2B::SharedCtor() {
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topicname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&authinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sentaddr_) -
      reinterpret_cast<char*>(&authinfo_)) + sizeof(sentaddr_));
}

SendMessageRequestP2B::~SendMessageRequestP2B() {
  // @@protoc_insertion_point(destructor:SendMessageRequestP2B)
  SharedDtor();
}

void SendMessageRequestP2B::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topicname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete authinfo_;
}

void SendMessageRequestP2B::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SendMessageRequestP2B::descriptor() {
  ::protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendMessageRequestP2B& SendMessageRequestP2B::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BrokerService_2eproto::scc_info_SendMessageRequestP2B.base);
  return *internal_default_instance();
}


void SendMessageRequestP2B::Clear() {
// @@protoc_insertion_point(message_clear_start:SendMessageRequestP2B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      clientid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      topicname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      msgtype_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      msgtime_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(authinfo_ != NULL);
      authinfo_->Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&partitionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flag_) -
        reinterpret_cast<char*>(&partitionid_)) + sizeof(flag_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&checksum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sentaddr_) -
        reinterpret_cast<char*>(&checksum_)) + sizeof(sentaddr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SendMessageRequestP2B::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SendMessageRequestP2B)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clientId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), static_cast<int>(this->clientid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SendMessageRequestP2B.clientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string topicName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topicname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topicname().data(), static_cast<int>(this->topicname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SendMessageRequestP2B.topicName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 partitionId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_partitionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partitionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 flag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 checkSum = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_checksum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sentAddr = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_sentaddr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sentaddr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msgType = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgtype().data(), static_cast<int>(this->msgtype().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SendMessageRequestP2B.msgType");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msgTime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgtime().data(), static_cast<int>(this->msgtime().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SendMessageRequestP2B.msgTime");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AuthorizedInfo authInfo = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SendMessageRequestP2B)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SendMessageRequestP2B)
  return false;
#undef DO_
}

void SendMessageRequestP2B::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SendMessageRequestP2B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SendMessageRequestP2B.clientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientid(), output);
  }

  // required string topicName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topicname().data(), static_cast<int>(this->topicname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SendMessageRequestP2B.topicName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topicname(), output);
  }

  // required int32 partitionId = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->partitionid(), output);
  }

  // required bytes data = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // required int32 flag = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flag(), output);
  }

  // required int32 checkSum = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->checksum(), output);
  }

  // required int32 sentAddr = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sentaddr(), output);
  }

  // optional string msgType = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgtype().data(), static_cast<int>(this->msgtype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SendMessageRequestP2B.msgType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->msgtype(), output);
  }

  // optional string msgTime = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgtime().data(), static_cast<int>(this->msgtime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SendMessageRequestP2B.msgTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->msgtime(), output);
  }

  // optional .AuthorizedInfo authInfo = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_authinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SendMessageRequestP2B)
}

::google::protobuf::uint8* SendMessageRequestP2B::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SendMessageRequestP2B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SendMessageRequestP2B.clientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientid(), target);
  }

  // required string topicName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topicname().data(), static_cast<int>(this->topicname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SendMessageRequestP2B.topicName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topicname(), target);
  }

  // required int32 partitionId = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->partitionid(), target);
  }

  // required bytes data = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // required int32 flag = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flag(), target);
  }

  // required int32 checkSum = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->checksum(), target);
  }

  // required int32 sentAddr = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sentaddr(), target);
  }

  // optional string msgType = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgtype().data(), static_cast<int>(this->msgtype().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SendMessageRequestP2B.msgType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->msgtype(), target);
  }

  // optional string msgTime = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgtime().data(), static_cast<int>(this->msgtime().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SendMessageRequestP2B.msgTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->msgtime(), target);
  }

  // optional .AuthorizedInfo authInfo = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_authinfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SendMessageRequestP2B)
  return target;
}

size_t SendMessageRequestP2B::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SendMessageRequestP2B)
  size_t total_size = 0;

  if (has_clientid()) {
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  if (has_topicname()) {
    // required string topicName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topicname());
  }

  if (has_data()) {
    // required bytes data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_partitionid()) {
    // required int32 partitionId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partitionid());
  }

  if (has_flag()) {
    // required int32 flag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  if (has_checksum()) {
    // required int32 checkSum = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->checksum());
  }

  if (has_sentaddr()) {
    // required int32 sentAddr = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sentaddr());
  }

  return total_size;
}
size_t SendMessageRequestP2B::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SendMessageRequestP2B)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000003c7) ^ 0x000003c7) == 0) {  // All required fields are present.
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());

    // required string topicName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topicname());

    // required bytes data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required int32 partitionId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partitionid());

    // required int32 flag = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());

    // required int32 checkSum = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->checksum());

    // required int32 sentAddr = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sentaddr());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 56u) {
    // optional string msgType = 8;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgtype());
    }

    // optional string msgTime = 9;
    if (has_msgtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgtime());
    }

    // optional .AuthorizedInfo authInfo = 10;
    if (has_authinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *authinfo_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMessageRequestP2B::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SendMessageRequestP2B)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMessageRequestP2B* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendMessageRequestP2B>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SendMessageRequestP2B)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SendMessageRequestP2B)
    MergeFrom(*source);
  }
}

void SendMessageRequestP2B::MergeFrom(const SendMessageRequestP2B& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SendMessageRequestP2B)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_topicname();
      topicname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topicname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_msgtype();
      msgtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgtype_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_msgtime();
      msgtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgtime_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_authinfo()->::AuthorizedInfo::MergeFrom(from.authinfo());
    }
    if (cached_has_bits & 0x00000040u) {
      partitionid_ = from.partitionid_;
    }
    if (cached_has_bits & 0x00000080u) {
      flag_ = from.flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      checksum_ = from.checksum_;
    }
    if (cached_has_bits & 0x00000200u) {
      sentaddr_ = from.sentaddr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SendMessageRequestP2B::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SendMessageRequestP2B)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageRequestP2B::CopyFrom(const SendMessageRequestP2B& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SendMessageRequestP2B)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageRequestP2B::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003c7) != 0x000003c7) return false;
  if (has_authinfo()) {
    if (!this->authinfo_->IsInitialized()) return false;
  }
  return true;
}

void SendMessageRequestP2B::Swap(SendMessageRequestP2B* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendMessageRequestP2B::InternalSwap(SendMessageRequestP2B* other) {
  using std::swap;
  clientid_.Swap(&other->clientid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  topicname_.Swap(&other->topicname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msgtype_.Swap(&other->msgtype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msgtime_.Swap(&other->msgtime_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(authinfo_, other->authinfo_);
  swap(partitionid_, other->partitionid_);
  swap(flag_, other->flag_);
  swap(checksum_, other->checksum_);
  swap(sentaddr_, other->sentaddr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SendMessageRequestP2B::GetMetadata() const {
  protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SendMessageResponseB2P::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendMessageResponseB2P::kSuccessFieldNumber;
const int SendMessageResponseB2P::kErrCodeFieldNumber;
const int SendMessageResponseB2P::kErrMsgFieldNumber;
const int SendMessageResponseB2P::kRequireAuthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendMessageResponseB2P::SendMessageResponseB2P()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BrokerService_2eproto::scc_info_SendMessageResponseB2P.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SendMessageResponseB2P)
}
SendMessageResponseB2P::SendMessageResponseB2P(const SendMessageResponseB2P& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errmsg()) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  ::memcpy(&errcode_, &from.errcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&requireauth_) -
    reinterpret_cast<char*>(&errcode_)) + sizeof(requireauth_));
  // @@protoc_insertion_point(copy_constructor:SendMessageResponseB2P)
}

void SendMessageResponseB2P::SharedCtor() {
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&errcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requireauth_) -
      reinterpret_cast<char*>(&errcode_)) + sizeof(requireauth_));
}

SendMessageResponseB2P::~SendMessageResponseB2P() {
  // @@protoc_insertion_point(destructor:SendMessageResponseB2P)
  SharedDtor();
}

void SendMessageResponseB2P::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SendMessageResponseB2P::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SendMessageResponseB2P::descriptor() {
  ::protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendMessageResponseB2P& SendMessageResponseB2P::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BrokerService_2eproto::scc_info_SendMessageResponseB2P.base);
  return *internal_default_instance();
}


void SendMessageResponseB2P::Clear() {
// @@protoc_insertion_point(message_clear_start:SendMessageResponseB2P)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errmsg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&errcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requireauth_) -
        reinterpret_cast<char*>(&errcode_)) + sizeof(requireauth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SendMessageResponseB2P::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SendMessageResponseB2P)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 errCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_errcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string errMsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SendMessageResponseB2P.errMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requireAuth = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_requireauth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requireauth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SendMessageResponseB2P)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SendMessageResponseB2P)
  return false;
#undef DO_
}

void SendMessageResponseB2P::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SendMessageResponseB2P)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errcode(), output);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SendMessageResponseB2P.errMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // optional bool requireAuth = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->requireauth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SendMessageResponseB2P)
}

::google::protobuf::uint8* SendMessageResponseB2P::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SendMessageResponseB2P)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errcode(), target);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SendMessageResponseB2P.errMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // optional bool requireAuth = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->requireauth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SendMessageResponseB2P)
  return target;
}

size_t SendMessageResponseB2P::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SendMessageResponseB2P)
  size_t total_size = 0;

  if (has_errmsg()) {
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  if (has_errcode()) {
    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  if (has_success()) {
    // required bool success = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SendMessageResponseB2P::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SendMessageResponseB2P)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());

    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());

    // required bool success = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool requireAuth = 4;
  if (has_requireauth()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMessageResponseB2P::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SendMessageResponseB2P)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMessageResponseB2P* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendMessageResponseB2P>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SendMessageResponseB2P)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SendMessageResponseB2P)
    MergeFrom(*source);
  }
}

void SendMessageResponseB2P::MergeFrom(const SendMessageResponseB2P& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SendMessageResponseB2P)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errmsg();
      errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      errcode_ = from.errcode_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000008u) {
      requireauth_ = from.requireauth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SendMessageResponseB2P::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SendMessageResponseB2P)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageResponseB2P::CopyFrom(const SendMessageResponseB2P& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SendMessageResponseB2P)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageResponseB2P::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SendMessageResponseB2P::Swap(SendMessageResponseB2P* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendMessageResponseB2P::InternalSwap(SendMessageResponseB2P* other) {
  using std::swap;
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errcode_, other->errcode_);
  swap(success_, other->success_);
  swap(requireauth_, other->requireauth_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SendMessageResponseB2P::GetMetadata() const {
  protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegisterRequestC2B::InitAsDefaultInstance() {
  ::_RegisterRequestC2B_default_instance_._instance.get_mutable()->authinfo_ = const_cast< ::AuthorizedInfo*>(
      ::AuthorizedInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterRequestC2B::kOpTypeFieldNumber;
const int RegisterRequestC2B::kClientIdFieldNumber;
const int RegisterRequestC2B::kGroupNameFieldNumber;
const int RegisterRequestC2B::kTopicNameFieldNumber;
const int RegisterRequestC2B::kPartitionIdFieldNumber;
const int RegisterRequestC2B::kReadStatusFieldNumber;
const int RegisterRequestC2B::kFilterCondStrFieldNumber;
const int RegisterRequestC2B::kCurrOffsetFieldNumber;
const int RegisterRequestC2B::kSessionKeyFieldNumber;
const int RegisterRequestC2B::kSessionTimeFieldNumber;
const int RegisterRequestC2B::kSsdStoreIdFieldNumber;
const int RegisterRequestC2B::kQryPriorityIdFieldNumber;
const int RegisterRequestC2B::kAuthInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterRequestC2B::RegisterRequestC2B()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BrokerService_2eproto::scc_info_RegisterRequestC2B.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterRequestC2B)
}
RegisterRequestC2B::RegisterRequestC2B(const RegisterRequestC2B& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      filtercondstr_(from.filtercondstr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupname()) {
    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  topicname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topicname()) {
    topicname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topicname_);
  }
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionkey()) {
    sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
  }
  if (from.has_authinfo()) {
    authinfo_ = new ::AuthorizedInfo(*from.authinfo_);
  } else {
    authinfo_ = NULL;
  }
  ::memcpy(&optype_, &from.optype_,
    static_cast<size_t>(reinterpret_cast<char*>(&ssdstoreid_) -
    reinterpret_cast<char*>(&optype_)) + sizeof(ssdstoreid_));
  // @@protoc_insertion_point(copy_constructor:RegisterRequestC2B)
}

void RegisterRequestC2B::SharedCtor() {
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topicname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&authinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ssdstoreid_) -
      reinterpret_cast<char*>(&authinfo_)) + sizeof(ssdstoreid_));
}

RegisterRequestC2B::~RegisterRequestC2B() {
  // @@protoc_insertion_point(destructor:RegisterRequestC2B)
  SharedDtor();
}

void RegisterRequestC2B::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topicname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete authinfo_;
}

void RegisterRequestC2B::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegisterRequestC2B::descriptor() {
  ::protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterRequestC2B& RegisterRequestC2B::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BrokerService_2eproto::scc_info_RegisterRequestC2B.base);
  return *internal_default_instance();
}


void RegisterRequestC2B::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterRequestC2B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filtercondstr_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      clientid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      groupname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      topicname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      sessionkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(authinfo_ != NULL);
      authinfo_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&optype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curroffset_) -
        reinterpret_cast<char*>(&optype_)) + sizeof(curroffset_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&readstatus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ssdstoreid_) -
        reinterpret_cast<char*>(&readstatus_)) + sizeof(ssdstoreid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegisterRequestC2B::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RegisterRequestC2B)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_optype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string clientId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), static_cast<int>(this->clientid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestC2B.clientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), static_cast<int>(this->groupname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestC2B.groupName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string topicName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topicname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topicname().data(), static_cast<int>(this->topicname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestC2B.topicName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 partitionId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_partitionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partitionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 readStatus = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_readstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &readstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string filterCondStr = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_filtercondstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filtercondstr(this->filtercondstr_size() - 1).data(),
            static_cast<int>(this->filtercondstr(this->filtercondstr_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestC2B.filterCondStr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 currOffset = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_curroffset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curroffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sessionKey = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionkey().data(), static_cast<int>(this->sessionkey().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestC2B.sessionKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sessionTime = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_sessiontime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessiontime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ssdStoreId = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_ssdstoreid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ssdstoreid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 qryPriorityId = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_qrypriorityid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qrypriorityid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AuthorizedInfo authInfo = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RegisterRequestC2B)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RegisterRequestC2B)
  return false;
#undef DO_
}

void RegisterRequestC2B::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RegisterRequestC2B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 opType = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->optype(), output);
  }

  // required string clientId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2B.clientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->clientid(), output);
  }

  // required string groupName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2B.groupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->groupname(), output);
  }

  // required string topicName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topicname().data(), static_cast<int>(this->topicname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2B.topicName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->topicname(), output);
  }

  // required int32 partitionId = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->partitionid(), output);
  }

  // required int32 readStatus = 6;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->readstatus(), output);
  }

  // repeated string filterCondStr = 7;
  for (int i = 0, n = this->filtercondstr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filtercondstr(i).data(), static_cast<int>(this->filtercondstr(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2B.filterCondStr");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->filtercondstr(i), output);
  }

  // optional int64 currOffset = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->curroffset(), output);
  }

  // optional string sessionKey = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionkey().data(), static_cast<int>(this->sessionkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2B.sessionKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sessionkey(), output);
  }

  // optional int64 sessionTime = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->sessiontime(), output);
  }

  // optional int64 ssdStoreId = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->ssdstoreid(), output);
  }

  // optional int32 qryPriorityId = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->qrypriorityid(), output);
  }

  // optional .AuthorizedInfo authInfo = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_authinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RegisterRequestC2B)
}

::google::protobuf::uint8* RegisterRequestC2B::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RegisterRequestC2B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 opType = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->optype(), target);
  }

  // required string clientId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2B.clientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientid(), target);
  }

  // required string groupName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2B.groupName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->groupname(), target);
  }

  // required string topicName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topicname().data(), static_cast<int>(this->topicname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2B.topicName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->topicname(), target);
  }

  // required int32 partitionId = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->partitionid(), target);
  }

  // required int32 readStatus = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->readstatus(), target);
  }

  // repeated string filterCondStr = 7;
  for (int i = 0, n = this->filtercondstr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filtercondstr(i).data(), static_cast<int>(this->filtercondstr(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2B.filterCondStr");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->filtercondstr(i), target);
  }

  // optional int64 currOffset = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->curroffset(), target);
  }

  // optional string sessionKey = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionkey().data(), static_cast<int>(this->sessionkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2B.sessionKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sessionkey(), target);
  }

  // optional int64 sessionTime = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->sessiontime(), target);
  }

  // optional int64 ssdStoreId = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->ssdstoreid(), target);
  }

  // optional int32 qryPriorityId = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->qrypriorityid(), target);
  }

  // optional .AuthorizedInfo authInfo = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_authinfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterRequestC2B)
  return target;
}

size_t RegisterRequestC2B::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RegisterRequestC2B)
  size_t total_size = 0;

  if (has_clientid()) {
    // required string clientId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  if (has_groupname()) {
    // required string groupName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());
  }

  if (has_topicname()) {
    // required string topicName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topicname());
  }

  if (has_optype()) {
    // required int32 opType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->optype());
  }

  if (has_partitionid()) {
    // required int32 partitionId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partitionid());
  }

  if (has_readstatus()) {
    // required int32 readStatus = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->readstatus());
  }

  return total_size;
}
size_t RegisterRequestC2B::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterRequestC2B)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000167) ^ 0x00000167) == 0) {  // All required fields are present.
    // required string clientId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());

    // required string groupName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());

    // required string topicName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topicname());

    // required int32 opType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->optype());

    // required int32 partitionId = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partitionid());

    // required int32 readStatus = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->readstatus());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string filterCondStr = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->filtercondstr_size());
  for (int i = 0, n = this->filtercondstr_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->filtercondstr(i));
  }

  if (_has_bits_[0 / 32] & 24u) {
    // optional string sessionKey = 9;
    if (has_sessionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sessionkey());
    }

    // optional .AuthorizedInfo authInfo = 13;
    if (has_authinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *authinfo_);
    }

  }
  // optional int64 currOffset = 8;
  if (has_curroffset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->curroffset());
  }

  if (_has_bits_[8 / 32] & 3584u) {
    // optional int32 qryPriorityId = 12;
    if (has_qrypriorityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qrypriorityid());
    }

    // optional int64 sessionTime = 10;
    if (has_sessiontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessiontime());
    }

    // optional int64 ssdStoreId = 11;
    if (has_ssdstoreid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ssdstoreid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterRequestC2B::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterRequestC2B)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterRequestC2B* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterRequestC2B>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterRequestC2B)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterRequestC2B)
    MergeFrom(*source);
  }
}

void RegisterRequestC2B::MergeFrom(const RegisterRequestC2B& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterRequestC2B)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filtercondstr_.MergeFrom(from.filtercondstr_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupname();
      groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_topicname();
      topicname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topicname_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_sessionkey();
      sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_authinfo()->::AuthorizedInfo::MergeFrom(from.authinfo());
    }
    if (cached_has_bits & 0x00000020u) {
      optype_ = from.optype_;
    }
    if (cached_has_bits & 0x00000040u) {
      partitionid_ = from.partitionid_;
    }
    if (cached_has_bits & 0x00000080u) {
      curroffset_ = from.curroffset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      readstatus_ = from.readstatus_;
    }
    if (cached_has_bits & 0x00000200u) {
      qrypriorityid_ = from.qrypriorityid_;
    }
    if (cached_has_bits & 0x00000400u) {
      sessiontime_ = from.sessiontime_;
    }
    if (cached_has_bits & 0x00000800u) {
      ssdstoreid_ = from.ssdstoreid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegisterRequestC2B::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterRequestC2B)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequestC2B::CopyFrom(const RegisterRequestC2B& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterRequestC2B)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequestC2B::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000167) != 0x00000167) return false;
  if (has_authinfo()) {
    if (!this->authinfo_->IsInitialized()) return false;
  }
  return true;
}

void RegisterRequestC2B::Swap(RegisterRequestC2B* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterRequestC2B::InternalSwap(RegisterRequestC2B* other) {
  using std::swap;
  filtercondstr_.InternalSwap(CastToBase(&other->filtercondstr_));
  clientid_.Swap(&other->clientid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  groupname_.Swap(&other->groupname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  topicname_.Swap(&other->topicname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sessionkey_.Swap(&other->sessionkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(authinfo_, other->authinfo_);
  swap(optype_, other->optype_);
  swap(partitionid_, other->partitionid_);
  swap(curroffset_, other->curroffset_);
  swap(readstatus_, other->readstatus_);
  swap(qrypriorityid_, other->qrypriorityid_);
  swap(sessiontime_, other->sessiontime_);
  swap(ssdstoreid_, other->ssdstoreid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegisterRequestC2B::GetMetadata() const {
  protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegisterResponseB2C::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterResponseB2C::kSuccessFieldNumber;
const int RegisterResponseB2C::kErrCodeFieldNumber;
const int RegisterResponseB2C::kErrMsgFieldNumber;
const int RegisterResponseB2C::kCurrOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterResponseB2C::RegisterResponseB2C()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BrokerService_2eproto::scc_info_RegisterResponseB2C.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterResponseB2C)
}
RegisterResponseB2C::RegisterResponseB2C(const RegisterResponseB2C& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errmsg()) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&curroffset_) -
    reinterpret_cast<char*>(&success_)) + sizeof(curroffset_));
  // @@protoc_insertion_point(copy_constructor:RegisterResponseB2C)
}

void RegisterResponseB2C::SharedCtor() {
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curroffset_) -
      reinterpret_cast<char*>(&success_)) + sizeof(curroffset_));
}

RegisterResponseB2C::~RegisterResponseB2C() {
  // @@protoc_insertion_point(destructor:RegisterResponseB2C)
  SharedDtor();
}

void RegisterResponseB2C::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegisterResponseB2C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegisterResponseB2C::descriptor() {
  ::protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterResponseB2C& RegisterResponseB2C::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BrokerService_2eproto::scc_info_RegisterResponseB2C.base);
  return *internal_default_instance();
}


void RegisterResponseB2C::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterResponseB2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errmsg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&success_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curroffset_) -
        reinterpret_cast<char*>(&success_)) + sizeof(curroffset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegisterResponseB2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RegisterResponseB2C)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 errCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_errcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string errMsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterResponseB2C.errMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 currOffset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_curroffset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curroffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RegisterResponseB2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RegisterResponseB2C)
  return false;
#undef DO_
}

void RegisterResponseB2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RegisterResponseB2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errcode(), output);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterResponseB2C.errMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // optional int64 currOffset = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->curroffset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RegisterResponseB2C)
}

::google::protobuf::uint8* RegisterResponseB2C::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RegisterResponseB2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errcode(), target);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterResponseB2C.errMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // optional int64 currOffset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->curroffset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterResponseB2C)
  return target;
}

size_t RegisterResponseB2C::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RegisterResponseB2C)
  size_t total_size = 0;

  if (has_errmsg()) {
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  if (has_success()) {
    // required bool success = 1;
    total_size += 1 + 1;
  }

  if (has_errcode()) {
    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  return total_size;
}
size_t RegisterResponseB2C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterResponseB2C)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());

    // required bool success = 1;
    total_size += 1 + 1;

    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 currOffset = 4;
  if (has_curroffset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->curroffset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterResponseB2C::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterResponseB2C)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterResponseB2C* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterResponseB2C>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterResponseB2C)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterResponseB2C)
    MergeFrom(*source);
  }
}

void RegisterResponseB2C::MergeFrom(const RegisterResponseB2C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterResponseB2C)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errmsg();
      errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000004u) {
      errcode_ = from.errcode_;
    }
    if (cached_has_bits & 0x00000008u) {
      curroffset_ = from.curroffset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegisterResponseB2C::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterResponseB2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterResponseB2C::CopyFrom(const RegisterResponseB2C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterResponseB2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponseB2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RegisterResponseB2C::Swap(RegisterResponseB2C* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterResponseB2C::InternalSwap(RegisterResponseB2C* other) {
  using std::swap;
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  swap(errcode_, other->errcode_);
  swap(curroffset_, other->curroffset_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegisterResponseB2C::GetMetadata() const {
  protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeartBeatRequestC2B::InitAsDefaultInstance() {
  ::_HeartBeatRequestC2B_default_instance_._instance.get_mutable()->authinfo_ = const_cast< ::AuthorizedInfo*>(
      ::AuthorizedInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartBeatRequestC2B::kClientIdFieldNumber;
const int HeartBeatRequestC2B::kGroupNameFieldNumber;
const int HeartBeatRequestC2B::kReadStatusFieldNumber;
const int HeartBeatRequestC2B::kPartitionInfoFieldNumber;
const int HeartBeatRequestC2B::kSsdStoreIdFieldNumber;
const int HeartBeatRequestC2B::kQryPriorityIdFieldNumber;
const int HeartBeatRequestC2B::kAuthInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeatRequestC2B::HeartBeatRequestC2B()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BrokerService_2eproto::scc_info_HeartBeatRequestC2B.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HeartBeatRequestC2B)
}
HeartBeatRequestC2B::HeartBeatRequestC2B(const HeartBeatRequestC2B& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      partitioninfo_(from.partitioninfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupname()) {
    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  if (from.has_authinfo()) {
    authinfo_ = new ::AuthorizedInfo(*from.authinfo_);
  } else {
    authinfo_ = NULL;
  }
  ::memcpy(&readstatus_, &from.readstatus_,
    static_cast<size_t>(reinterpret_cast<char*>(&ssdstoreid_) -
    reinterpret_cast<char*>(&readstatus_)) + sizeof(ssdstoreid_));
  // @@protoc_insertion_point(copy_constructor:HeartBeatRequestC2B)
}

void HeartBeatRequestC2B::SharedCtor() {
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&authinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ssdstoreid_) -
      reinterpret_cast<char*>(&authinfo_)) + sizeof(ssdstoreid_));
}

HeartBeatRequestC2B::~HeartBeatRequestC2B() {
  // @@protoc_insertion_point(destructor:HeartBeatRequestC2B)
  SharedDtor();
}

void HeartBeatRequestC2B::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete authinfo_;
}

void HeartBeatRequestC2B::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HeartBeatRequestC2B::descriptor() {
  ::protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeartBeatRequestC2B& HeartBeatRequestC2B::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BrokerService_2eproto::scc_info_HeartBeatRequestC2B.base);
  return *internal_default_instance();
}


void HeartBeatRequestC2B::Clear() {
// @@protoc_insertion_point(message_clear_start:HeartBeatRequestC2B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partitioninfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      clientid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      groupname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(authinfo_ != NULL);
      authinfo_->Clear();
    }
  }
  if (cached_has_bits & 56u) {
    ::memset(&readstatus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ssdstoreid_) -
        reinterpret_cast<char*>(&readstatus_)) + sizeof(ssdstoreid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartBeatRequestC2B::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HeartBeatRequestC2B)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clientId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), static_cast<int>(this->clientid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HeartBeatRequestC2B.clientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), static_cast<int>(this->groupname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HeartBeatRequestC2B.groupName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 readStatus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_readstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &readstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string partitionInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_partitioninfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partitioninfo(this->partitioninfo_size() - 1).data(),
            static_cast<int>(this->partitioninfo(this->partitioninfo_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HeartBeatRequestC2B.partitionInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ssdStoreId = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_ssdstoreid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ssdstoreid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 qryPriorityId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_qrypriorityid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qrypriorityid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .AuthorizedInfo authInfo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HeartBeatRequestC2B)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HeartBeatRequestC2B)
  return false;
#undef DO_
}

void HeartBeatRequestC2B::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HeartBeatRequestC2B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartBeatRequestC2B.clientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientid(), output);
  }

  // required string groupName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartBeatRequestC2B.groupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupname(), output);
  }

  // required int32 readStatus = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->readstatus(), output);
  }

  // repeated string partitionInfo = 4;
  for (int i = 0, n = this->partitioninfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partitioninfo(i).data(), static_cast<int>(this->partitioninfo(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartBeatRequestC2B.partitionInfo");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->partitioninfo(i), output);
  }

  // optional int64 ssdStoreId = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ssdstoreid(), output);
  }

  // optional int32 qryPriorityId = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->qrypriorityid(), output);
  }

  // optional .AuthorizedInfo authInfo = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_authinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HeartBeatRequestC2B)
}

::google::protobuf::uint8* HeartBeatRequestC2B::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HeartBeatRequestC2B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartBeatRequestC2B.clientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientid(), target);
  }

  // required string groupName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartBeatRequestC2B.groupName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }

  // required int32 readStatus = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->readstatus(), target);
  }

  // repeated string partitionInfo = 4;
  for (int i = 0, n = this->partitioninfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partitioninfo(i).data(), static_cast<int>(this->partitioninfo(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartBeatRequestC2B.partitionInfo");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->partitioninfo(i), target);
  }

  // optional int64 ssdStoreId = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ssdstoreid(), target);
  }

  // optional int32 qryPriorityId = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->qrypriorityid(), target);
  }

  // optional .AuthorizedInfo authInfo = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_authinfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeartBeatRequestC2B)
  return target;
}

size_t HeartBeatRequestC2B::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HeartBeatRequestC2B)
  size_t total_size = 0;

  if (has_clientid()) {
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  if (has_groupname()) {
    // required string groupName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());
  }

  if (has_readstatus()) {
    // required int32 readStatus = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->readstatus());
  }

  return total_size;
}
size_t HeartBeatRequestC2B::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HeartBeatRequestC2B)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());

    // required string groupName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());

    // required int32 readStatus = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->readstatus());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string partitionInfo = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->partitioninfo_size());
  for (int i = 0, n = this->partitioninfo_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->partitioninfo(i));
  }

  // optional .AuthorizedInfo authInfo = 7;
  if (has_authinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *authinfo_);
  }

  if (_has_bits_[0 / 32] & 48u) {
    // optional int32 qryPriorityId = 6;
    if (has_qrypriorityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qrypriorityid());
    }

    // optional int64 ssdStoreId = 5;
    if (has_ssdstoreid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ssdstoreid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeatRequestC2B::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HeartBeatRequestC2B)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatRequestC2B* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeatRequestC2B>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HeartBeatRequestC2B)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HeartBeatRequestC2B)
    MergeFrom(*source);
  }
}

void HeartBeatRequestC2B::MergeFrom(const HeartBeatRequestC2B& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HeartBeatRequestC2B)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partitioninfo_.MergeFrom(from.partitioninfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupname();
      groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_authinfo()->::AuthorizedInfo::MergeFrom(from.authinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      readstatus_ = from.readstatus_;
    }
    if (cached_has_bits & 0x00000010u) {
      qrypriorityid_ = from.qrypriorityid_;
    }
    if (cached_has_bits & 0x00000020u) {
      ssdstoreid_ = from.ssdstoreid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeartBeatRequestC2B::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HeartBeatRequestC2B)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatRequestC2B::CopyFrom(const HeartBeatRequestC2B& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HeartBeatRequestC2B)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRequestC2B::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  if (has_authinfo()) {
    if (!this->authinfo_->IsInitialized()) return false;
  }
  return true;
}

void HeartBeatRequestC2B::Swap(HeartBeatRequestC2B* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeatRequestC2B::InternalSwap(HeartBeatRequestC2B* other) {
  using std::swap;
  partitioninfo_.InternalSwap(CastToBase(&other->partitioninfo_));
  clientid_.Swap(&other->clientid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  groupname_.Swap(&other->groupname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(authinfo_, other->authinfo_);
  swap(readstatus_, other->readstatus_);
  swap(qrypriorityid_, other->qrypriorityid_);
  swap(ssdstoreid_, other->ssdstoreid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HeartBeatRequestC2B::GetMetadata() const {
  protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeartBeatResponseB2C::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartBeatResponseB2C::kSuccessFieldNumber;
const int HeartBeatResponseB2C::kErrCodeFieldNumber;
const int HeartBeatResponseB2C::kErrMsgFieldNumber;
const int HeartBeatResponseB2C::kHasPartFailureFieldNumber;
const int HeartBeatResponseB2C::kFailureInfoFieldNumber;
const int HeartBeatResponseB2C::kRequireAuthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartBeatResponseB2C::HeartBeatResponseB2C()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BrokerService_2eproto::scc_info_HeartBeatResponseB2C.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HeartBeatResponseB2C)
}
HeartBeatResponseB2C::HeartBeatResponseB2C(const HeartBeatResponseB2C& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      failureinfo_(from.failureinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errmsg()) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  ::memcpy(&errcode_, &from.errcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&requireauth_) -
    reinterpret_cast<char*>(&errcode_)) + sizeof(requireauth_));
  // @@protoc_insertion_point(copy_constructor:HeartBeatResponseB2C)
}

void HeartBeatResponseB2C::SharedCtor() {
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&errcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requireauth_) -
      reinterpret_cast<char*>(&errcode_)) + sizeof(requireauth_));
}

HeartBeatResponseB2C::~HeartBeatResponseB2C() {
  // @@protoc_insertion_point(destructor:HeartBeatResponseB2C)
  SharedDtor();
}

void HeartBeatResponseB2C::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HeartBeatResponseB2C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HeartBeatResponseB2C::descriptor() {
  ::protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeartBeatResponseB2C& HeartBeatResponseB2C::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BrokerService_2eproto::scc_info_HeartBeatResponseB2C.base);
  return *internal_default_instance();
}


void HeartBeatResponseB2C::Clear() {
// @@protoc_insertion_point(message_clear_start:HeartBeatResponseB2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  failureinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errmsg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&errcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&requireauth_) -
        reinterpret_cast<char*>(&errcode_)) + sizeof(requireauth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartBeatResponseB2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HeartBeatResponseB2C)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 errCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_errcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string errMsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HeartBeatResponseB2C.errMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hasPartFailure = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_haspartfailure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haspartfailure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string failureInfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_failureinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->failureinfo(this->failureinfo_size() - 1).data(),
            static_cast<int>(this->failureinfo(this->failureinfo_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HeartBeatResponseB2C.failureInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requireAuth = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_requireauth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requireauth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HeartBeatResponseB2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HeartBeatResponseB2C)
  return false;
#undef DO_
}

void HeartBeatResponseB2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HeartBeatResponseB2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errcode(), output);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartBeatResponseB2C.errMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // optional bool hasPartFailure = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->haspartfailure(), output);
  }

  // repeated string failureInfo = 5;
  for (int i = 0, n = this->failureinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failureinfo(i).data(), static_cast<int>(this->failureinfo(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartBeatResponseB2C.failureInfo");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->failureinfo(i), output);
  }

  // optional bool requireAuth = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->requireauth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HeartBeatResponseB2C)
}

::google::protobuf::uint8* HeartBeatResponseB2C::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HeartBeatResponseB2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errcode(), target);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartBeatResponseB2C.errMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // optional bool hasPartFailure = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->haspartfailure(), target);
  }

  // repeated string failureInfo = 5;
  for (int i = 0, n = this->failureinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->failureinfo(i).data(), static_cast<int>(this->failureinfo(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartBeatResponseB2C.failureInfo");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->failureinfo(i), target);
  }

  // optional bool requireAuth = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->requireauth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeartBeatResponseB2C)
  return target;
}

size_t HeartBeatResponseB2C::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HeartBeatResponseB2C)
  size_t total_size = 0;

  if (has_errmsg()) {
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  if (has_errcode()) {
    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  if (has_success()) {
    // required bool success = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t HeartBeatResponseB2C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HeartBeatResponseB2C)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());

    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());

    // required bool success = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string failureInfo = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->failureinfo_size());
  for (int i = 0, n = this->failureinfo_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->failureinfo(i));
  }

  if (_has_bits_[0 / 32] & 24u) {
    // optional bool hasPartFailure = 4;
    if (has_haspartfailure()) {
      total_size += 1 + 1;
    }

    // optional bool requireAuth = 6;
    if (has_requireauth()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeatResponseB2C::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HeartBeatResponseB2C)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatResponseB2C* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeatResponseB2C>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HeartBeatResponseB2C)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HeartBeatResponseB2C)
    MergeFrom(*source);
  }
}

void HeartBeatResponseB2C::MergeFrom(const HeartBeatResponseB2C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HeartBeatResponseB2C)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  failureinfo_.MergeFrom(from.failureinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errmsg();
      errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      errcode_ = from.errcode_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000008u) {
      haspartfailure_ = from.haspartfailure_;
    }
    if (cached_has_bits & 0x00000010u) {
      requireauth_ = from.requireauth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeartBeatResponseB2C::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HeartBeatResponseB2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatResponseB2C::CopyFrom(const HeartBeatResponseB2C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HeartBeatResponseB2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatResponseB2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void HeartBeatResponseB2C::Swap(HeartBeatResponseB2C* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeatResponseB2C::InternalSwap(HeartBeatResponseB2C* other) {
  using std::swap;
  failureinfo_.InternalSwap(CastToBase(&other->failureinfo_));
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errcode_, other->errcode_);
  swap(success_, other->success_);
  swap(haspartfailure_, other->haspartfailure_);
  swap(requireauth_, other->requireauth_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HeartBeatResponseB2C::GetMetadata() const {
  protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetMessageRequestC2B::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMessageRequestC2B::kClientIdFieldNumber;
const int GetMessageRequestC2B::kPartitionIdFieldNumber;
const int GetMessageRequestC2B::kGroupNameFieldNumber;
const int GetMessageRequestC2B::kTopicNameFieldNumber;
const int GetMessageRequestC2B::kLastPackConsumedFieldNumber;
const int GetMessageRequestC2B::kManualCommitOffsetFieldNumber;
const int GetMessageRequestC2B::kEscFlowCtrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMessageRequestC2B::GetMessageRequestC2B()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BrokerService_2eproto::scc_info_GetMessageRequestC2B.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetMessageRequestC2B)
}
GetMessageRequestC2B::GetMessageRequestC2B(const GetMessageRequestC2B& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupname()) {
    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  topicname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topicname()) {
    topicname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topicname_);
  }
  ::memcpy(&partitionid_, &from.partitionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&escflowctrl_) -
    reinterpret_cast<char*>(&partitionid_)) + sizeof(escflowctrl_));
  // @@protoc_insertion_point(copy_constructor:GetMessageRequestC2B)
}

void GetMessageRequestC2B::SharedCtor() {
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topicname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&partitionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&escflowctrl_) -
      reinterpret_cast<char*>(&partitionid_)) + sizeof(escflowctrl_));
}

GetMessageRequestC2B::~GetMessageRequestC2B() {
  // @@protoc_insertion_point(destructor:GetMessageRequestC2B)
  SharedDtor();
}

void GetMessageRequestC2B::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topicname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetMessageRequestC2B::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetMessageRequestC2B::descriptor() {
  ::protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetMessageRequestC2B& GetMessageRequestC2B::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BrokerService_2eproto::scc_info_GetMessageRequestC2B.base);
  return *internal_default_instance();
}


void GetMessageRequestC2B::Clear() {
// @@protoc_insertion_point(message_clear_start:GetMessageRequestC2B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      clientid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      groupname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      topicname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 120u) {
    ::memset(&partitionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&escflowctrl_) -
        reinterpret_cast<char*>(&partitionid_)) + sizeof(escflowctrl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetMessageRequestC2B::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetMessageRequestC2B)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clientId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), static_cast<int>(this->clientid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GetMessageRequestC2B.clientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 partitionId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_partitionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partitionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), static_cast<int>(this->groupname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GetMessageRequestC2B.groupName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string topicName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topicname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topicname().data(), static_cast<int>(this->topicname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GetMessageRequestC2B.topicName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lastPackConsumed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_lastpackconsumed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lastpackconsumed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool manualCommitOffset = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_manualcommitoffset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manualcommitoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool escFlowCtrl = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_escflowctrl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &escflowctrl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetMessageRequestC2B)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetMessageRequestC2B)
  return false;
#undef DO_
}

void GetMessageRequestC2B::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetMessageRequestC2B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetMessageRequestC2B.clientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientid(), output);
  }

  // required int32 partitionId = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->partitionid(), output);
  }

  // required string groupName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetMessageRequestC2B.groupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->groupname(), output);
  }

  // required string topicName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topicname().data(), static_cast<int>(this->topicname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetMessageRequestC2B.topicName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->topicname(), output);
  }

  // optional bool lastPackConsumed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->lastpackconsumed(), output);
  }

  // optional bool manualCommitOffset = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->manualcommitoffset(), output);
  }

  // optional bool escFlowCtrl = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->escflowctrl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetMessageRequestC2B)
}

::google::protobuf::uint8* GetMessageRequestC2B::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GetMessageRequestC2B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetMessageRequestC2B.clientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientid(), target);
  }

  // required int32 partitionId = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->partitionid(), target);
  }

  // required string groupName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetMessageRequestC2B.groupName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->groupname(), target);
  }

  // required string topicName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topicname().data(), static_cast<int>(this->topicname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetMessageRequestC2B.topicName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->topicname(), target);
  }

  // optional bool lastPackConsumed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->lastpackconsumed(), target);
  }

  // optional bool manualCommitOffset = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->manualcommitoffset(), target);
  }

  // optional bool escFlowCtrl = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->escflowctrl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetMessageRequestC2B)
  return target;
}

size_t GetMessageRequestC2B::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GetMessageRequestC2B)
  size_t total_size = 0;

  if (has_clientid()) {
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  if (has_groupname()) {
    // required string groupName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());
  }

  if (has_topicname()) {
    // required string topicName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topicname());
  }

  if (has_partitionid()) {
    // required int32 partitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partitionid());
  }

  return total_size;
}
size_t GetMessageRequestC2B::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetMessageRequestC2B)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());

    // required string groupName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());

    // required string topicName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topicname());

    // required int32 partitionId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partitionid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 112u) {
    // optional bool lastPackConsumed = 5;
    if (has_lastpackconsumed()) {
      total_size += 1 + 1;
    }

    // optional bool manualCommitOffset = 6;
    if (has_manualcommitoffset()) {
      total_size += 1 + 1;
    }

    // optional bool escFlowCtrl = 7;
    if (has_escflowctrl()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMessageRequestC2B::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetMessageRequestC2B)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMessageRequestC2B* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMessageRequestC2B>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetMessageRequestC2B)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetMessageRequestC2B)
    MergeFrom(*source);
  }
}

void GetMessageRequestC2B::MergeFrom(const GetMessageRequestC2B& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetMessageRequestC2B)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupname();
      groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_topicname();
      topicname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topicname_);
    }
    if (cached_has_bits & 0x00000008u) {
      partitionid_ = from.partitionid_;
    }
    if (cached_has_bits & 0x00000010u) {
      lastpackconsumed_ = from.lastpackconsumed_;
    }
    if (cached_has_bits & 0x00000020u) {
      manualcommitoffset_ = from.manualcommitoffset_;
    }
    if (cached_has_bits & 0x00000040u) {
      escflowctrl_ = from.escflowctrl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetMessageRequestC2B::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetMessageRequestC2B)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMessageRequestC2B::CopyFrom(const GetMessageRequestC2B& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetMessageRequestC2B)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessageRequestC2B::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void GetMessageRequestC2B::Swap(GetMessageRequestC2B* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMessageRequestC2B::InternalSwap(GetMessageRequestC2B* other) {
  using std::swap;
  clientid_.Swap(&other->clientid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  groupname_.Swap(&other->groupname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  topicname_.Swap(&other->topicname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(partitionid_, other->partitionid_);
  swap(lastpackconsumed_, other->lastpackconsumed_);
  swap(manualcommitoffset_, other->manualcommitoffset_);
  swap(escflowctrl_, other->escflowctrl_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetMessageRequestC2B::GetMetadata() const {
  protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetMessageResponseB2C::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetMessageResponseB2C::kSuccessFieldNumber;
const int GetMessageResponseB2C::kErrCodeFieldNumber;
const int GetMessageResponseB2C::kErrMsgFieldNumber;
const int GetMessageResponseB2C::kMessagesFieldNumber;
const int GetMessageResponseB2C::kCurrOffsetFieldNumber;
const int GetMessageResponseB2C::kMinLimitTimeFieldNumber;
const int GetMessageResponseB2C::kEscFlowCtrlFieldNumber;
const int GetMessageResponseB2C::kCurrDataDltFieldNumber;
const int GetMessageResponseB2C::kRequireSlowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetMessageResponseB2C::GetMessageResponseB2C()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BrokerService_2eproto::scc_info_GetMessageResponseB2C.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetMessageResponseB2C)
}
GetMessageResponseB2C::GetMessageResponseB2C(const GetMessageResponseB2C& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errmsg()) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  ::memcpy(&errcode_, &from.errcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&minlimittime_) -
    reinterpret_cast<char*>(&errcode_)) + sizeof(minlimittime_));
  // @@protoc_insertion_point(copy_constructor:GetMessageResponseB2C)
}

void GetMessageResponseB2C::SharedCtor() {
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&errcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minlimittime_) -
      reinterpret_cast<char*>(&errcode_)) + sizeof(minlimittime_));
}

GetMessageResponseB2C::~GetMessageResponseB2C() {
  // @@protoc_insertion_point(destructor:GetMessageResponseB2C)
  SharedDtor();
}

void GetMessageResponseB2C::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetMessageResponseB2C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetMessageResponseB2C::descriptor() {
  ::protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetMessageResponseB2C& GetMessageResponseB2C::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BrokerService_2eproto::scc_info_GetMessageResponseB2C.base);
  return *internal_default_instance();
}


void GetMessageResponseB2C::Clear() {
// @@protoc_insertion_point(message_clear_start:GetMessageResponseB2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errmsg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 254u) {
    ::memset(&errcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minlimittime_) -
        reinterpret_cast<char*>(&errcode_)) + sizeof(minlimittime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetMessageResponseB2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetMessageResponseB2C)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 errCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_errcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string errMsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GetMessageResponseB2C.errMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TransferedMessage messages = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 currOffset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_curroffset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curroffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minLimitTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_minlimittime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minlimittime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool escFlowCtrl = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_escflowctrl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &escflowctrl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 currDataDlt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_currdatadlt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currdatadlt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requireSlow = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_requireslow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requireslow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetMessageResponseB2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetMessageResponseB2C)
  return false;
#undef DO_
}

void GetMessageResponseB2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetMessageResponseB2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errcode(), output);
  }

  // optional string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetMessageResponseB2C.errMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // repeated .TransferedMessage messages = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->messages(static_cast<int>(i)),
      output);
  }

  // optional int64 currOffset = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->curroffset(), output);
  }

  // optional int32 minLimitTime = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->minlimittime(), output);
  }

  // optional bool escFlowCtrl = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->escflowctrl(), output);
  }

  // optional int64 currDataDlt = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->currdatadlt(), output);
  }

  // optional bool requireSlow = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->requireslow(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetMessageResponseB2C)
}

::google::protobuf::uint8* GetMessageResponseB2C::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GetMessageResponseB2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errcode(), target);
  }

  // optional string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetMessageResponseB2C.errMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // repeated .TransferedMessage messages = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->messages(static_cast<int>(i)), deterministic, target);
  }

  // optional int64 currOffset = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->curroffset(), target);
  }

  // optional int32 minLimitTime = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->minlimittime(), target);
  }

  // optional bool escFlowCtrl = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->escflowctrl(), target);
  }

  // optional int64 currDataDlt = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->currdatadlt(), target);
  }

  // optional bool requireSlow = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->requireslow(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetMessageResponseB2C)
  return target;
}

size_t GetMessageResponseB2C::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GetMessageResponseB2C)
  size_t total_size = 0;

  if (has_errcode()) {
    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  if (has_success()) {
    // required bool success = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t GetMessageResponseB2C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetMessageResponseB2C)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());

    // required bool success = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .TransferedMessage messages = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->messages(static_cast<int>(i)));
    }
  }

  // optional string errMsg = 3;
  if (has_errmsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional bool escFlowCtrl = 7;
    if (has_escflowctrl()) {
      total_size += 1 + 1;
    }

    // optional bool requireSlow = 9;
    if (has_requireslow()) {
      total_size += 1 + 1;
    }

    // optional int64 currOffset = 5;
    if (has_curroffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curroffset());
    }

    // optional int64 currDataDlt = 8;
    if (has_currdatadlt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currdatadlt());
    }

    // optional int32 minLimitTime = 6;
    if (has_minlimittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minlimittime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMessageResponseB2C::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetMessageResponseB2C)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMessageResponseB2C* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetMessageResponseB2C>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetMessageResponseB2C)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetMessageResponseB2C)
    MergeFrom(*source);
  }
}

void GetMessageResponseB2C::MergeFrom(const GetMessageResponseB2C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetMessageResponseB2C)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errmsg();
      errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      errcode_ = from.errcode_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000008u) {
      escflowctrl_ = from.escflowctrl_;
    }
    if (cached_has_bits & 0x00000010u) {
      requireslow_ = from.requireslow_;
    }
    if (cached_has_bits & 0x00000020u) {
      curroffset_ = from.curroffset_;
    }
    if (cached_has_bits & 0x00000040u) {
      currdatadlt_ = from.currdatadlt_;
    }
    if (cached_has_bits & 0x00000080u) {
      minlimittime_ = from.minlimittime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetMessageResponseB2C::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetMessageResponseB2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMessageResponseB2C::CopyFrom(const GetMessageResponseB2C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetMessageResponseB2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessageResponseB2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->messages())) return false;
  return true;
}

void GetMessageResponseB2C::Swap(GetMessageResponseB2C* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetMessageResponseB2C::InternalSwap(GetMessageResponseB2C* other) {
  using std::swap;
  CastToBase(&messages_)->InternalSwap(CastToBase(&other->messages_));
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errcode_, other->errcode_);
  swap(success_, other->success_);
  swap(escflowctrl_, other->escflowctrl_);
  swap(requireslow_, other->requireslow_);
  swap(curroffset_, other->curroffset_);
  swap(currdatadlt_, other->currdatadlt_);
  swap(minlimittime_, other->minlimittime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetMessageResponseB2C::GetMetadata() const {
  protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommitOffsetRequestC2B::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitOffsetRequestC2B::kClientIdFieldNumber;
const int CommitOffsetRequestC2B::kTopicNameFieldNumber;
const int CommitOffsetRequestC2B::kPartitionIdFieldNumber;
const int CommitOffsetRequestC2B::kGroupNameFieldNumber;
const int CommitOffsetRequestC2B::kLastPackConsumedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitOffsetRequestC2B::CommitOffsetRequestC2B()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BrokerService_2eproto::scc_info_CommitOffsetRequestC2B.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CommitOffsetRequestC2B)
}
CommitOffsetRequestC2B::CommitOffsetRequestC2B(const CommitOffsetRequestC2B& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  topicname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topicname()) {
    topicname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topicname_);
  }
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupname()) {
    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  ::memcpy(&partitionid_, &from.partitionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastpackconsumed_) -
    reinterpret_cast<char*>(&partitionid_)) + sizeof(lastpackconsumed_));
  // @@protoc_insertion_point(copy_constructor:CommitOffsetRequestC2B)
}

void CommitOffsetRequestC2B::SharedCtor() {
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topicname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&partitionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastpackconsumed_) -
      reinterpret_cast<char*>(&partitionid_)) + sizeof(lastpackconsumed_));
}

CommitOffsetRequestC2B::~CommitOffsetRequestC2B() {
  // @@protoc_insertion_point(destructor:CommitOffsetRequestC2B)
  SharedDtor();
}

void CommitOffsetRequestC2B::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topicname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommitOffsetRequestC2B::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommitOffsetRequestC2B::descriptor() {
  ::protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommitOffsetRequestC2B& CommitOffsetRequestC2B::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BrokerService_2eproto::scc_info_CommitOffsetRequestC2B.base);
  return *internal_default_instance();
}


void CommitOffsetRequestC2B::Clear() {
// @@protoc_insertion_point(message_clear_start:CommitOffsetRequestC2B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      clientid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      topicname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      groupname_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&partitionid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lastpackconsumed_) -
        reinterpret_cast<char*>(&partitionid_)) + sizeof(lastpackconsumed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommitOffsetRequestC2B::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CommitOffsetRequestC2B)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clientId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), static_cast<int>(this->clientid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CommitOffsetRequestC2B.clientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string topicName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topicname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topicname().data(), static_cast<int>(this->topicname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CommitOffsetRequestC2B.topicName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 partitionId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_partitionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partitionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), static_cast<int>(this->groupname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CommitOffsetRequestC2B.groupName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lastPackConsumed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_lastpackconsumed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lastpackconsumed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CommitOffsetRequestC2B)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CommitOffsetRequestC2B)
  return false;
#undef DO_
}

void CommitOffsetRequestC2B::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CommitOffsetRequestC2B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CommitOffsetRequestC2B.clientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientid(), output);
  }

  // required string topicName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topicname().data(), static_cast<int>(this->topicname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CommitOffsetRequestC2B.topicName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topicname(), output);
  }

  // required int32 partitionId = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->partitionid(), output);
  }

  // required string groupName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CommitOffsetRequestC2B.groupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->groupname(), output);
  }

  // optional bool lastPackConsumed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->lastpackconsumed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CommitOffsetRequestC2B)
}

::google::protobuf::uint8* CommitOffsetRequestC2B::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CommitOffsetRequestC2B)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CommitOffsetRequestC2B.clientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientid(), target);
  }

  // required string topicName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topicname().data(), static_cast<int>(this->topicname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CommitOffsetRequestC2B.topicName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topicname(), target);
  }

  // required int32 partitionId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->partitionid(), target);
  }

  // required string groupName = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CommitOffsetRequestC2B.groupName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->groupname(), target);
  }

  // optional bool lastPackConsumed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->lastpackconsumed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommitOffsetRequestC2B)
  return target;
}

size_t CommitOffsetRequestC2B::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommitOffsetRequestC2B)
  size_t total_size = 0;

  if (has_clientid()) {
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  if (has_topicname()) {
    // required string topicName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topicname());
  }

  if (has_groupname()) {
    // required string groupName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());
  }

  if (has_partitionid()) {
    // required int32 partitionId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partitionid());
  }

  return total_size;
}
size_t CommitOffsetRequestC2B::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommitOffsetRequestC2B)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());

    // required string topicName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topicname());

    // required string groupName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());

    // required int32 partitionId = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partitionid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool lastPackConsumed = 5;
  if (has_lastpackconsumed()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitOffsetRequestC2B::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommitOffsetRequestC2B)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitOffsetRequestC2B* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitOffsetRequestC2B>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommitOffsetRequestC2B)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommitOffsetRequestC2B)
    MergeFrom(*source);
  }
}

void CommitOffsetRequestC2B::MergeFrom(const CommitOffsetRequestC2B& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommitOffsetRequestC2B)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_topicname();
      topicname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topicname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_groupname();
      groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
    }
    if (cached_has_bits & 0x00000008u) {
      partitionid_ = from.partitionid_;
    }
    if (cached_has_bits & 0x00000010u) {
      lastpackconsumed_ = from.lastpackconsumed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommitOffsetRequestC2B::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommitOffsetRequestC2B)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitOffsetRequestC2B::CopyFrom(const CommitOffsetRequestC2B& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommitOffsetRequestC2B)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitOffsetRequestC2B::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void CommitOffsetRequestC2B::Swap(CommitOffsetRequestC2B* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitOffsetRequestC2B::InternalSwap(CommitOffsetRequestC2B* other) {
  using std::swap;
  clientid_.Swap(&other->clientid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  topicname_.Swap(&other->topicname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  groupname_.Swap(&other->groupname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(partitionid_, other->partitionid_);
  swap(lastpackconsumed_, other->lastpackconsumed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommitOffsetRequestC2B::GetMetadata() const {
  protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommitOffsetResponseB2C::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitOffsetResponseB2C::kSuccessFieldNumber;
const int CommitOffsetResponseB2C::kErrCodeFieldNumber;
const int CommitOffsetResponseB2C::kErrMsgFieldNumber;
const int CommitOffsetResponseB2C::kCurrOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitOffsetResponseB2C::CommitOffsetResponseB2C()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_BrokerService_2eproto::scc_info_CommitOffsetResponseB2C.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CommitOffsetResponseB2C)
}
CommitOffsetResponseB2C::CommitOffsetResponseB2C(const CommitOffsetResponseB2C& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errmsg()) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&curroffset_) -
    reinterpret_cast<char*>(&success_)) + sizeof(curroffset_));
  // @@protoc_insertion_point(copy_constructor:CommitOffsetResponseB2C)
}

void CommitOffsetResponseB2C::SharedCtor() {
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curroffset_) -
      reinterpret_cast<char*>(&success_)) + sizeof(curroffset_));
}

CommitOffsetResponseB2C::~CommitOffsetResponseB2C() {
  // @@protoc_insertion_point(destructor:CommitOffsetResponseB2C)
  SharedDtor();
}

void CommitOffsetResponseB2C::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CommitOffsetResponseB2C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CommitOffsetResponseB2C::descriptor() {
  ::protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommitOffsetResponseB2C& CommitOffsetResponseB2C::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_BrokerService_2eproto::scc_info_CommitOffsetResponseB2C.base);
  return *internal_default_instance();
}


void CommitOffsetResponseB2C::Clear() {
// @@protoc_insertion_point(message_clear_start:CommitOffsetResponseB2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errmsg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&success_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&curroffset_) -
        reinterpret_cast<char*>(&success_)) + sizeof(curroffset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CommitOffsetResponseB2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CommitOffsetResponseB2C)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 errCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_errcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string errMsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CommitOffsetResponseB2C.errMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 currOffset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_curroffset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curroffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CommitOffsetResponseB2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CommitOffsetResponseB2C)
  return false;
#undef DO_
}

void CommitOffsetResponseB2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CommitOffsetResponseB2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errcode(), output);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CommitOffsetResponseB2C.errMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // optional int64 currOffset = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->curroffset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CommitOffsetResponseB2C)
}

::google::protobuf::uint8* CommitOffsetResponseB2C::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CommitOffsetResponseB2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errcode(), target);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CommitOffsetResponseB2C.errMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // optional int64 currOffset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->curroffset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommitOffsetResponseB2C)
  return target;
}

size_t CommitOffsetResponseB2C::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CommitOffsetResponseB2C)
  size_t total_size = 0;

  if (has_errmsg()) {
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  if (has_success()) {
    // required bool success = 1;
    total_size += 1 + 1;
  }

  if (has_errcode()) {
    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  return total_size;
}
size_t CommitOffsetResponseB2C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CommitOffsetResponseB2C)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());

    // required bool success = 1;
    total_size += 1 + 1;

    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 currOffset = 4;
  if (has_curroffset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->curroffset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommitOffsetResponseB2C::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CommitOffsetResponseB2C)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitOffsetResponseB2C* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitOffsetResponseB2C>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CommitOffsetResponseB2C)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CommitOffsetResponseB2C)
    MergeFrom(*source);
  }
}

void CommitOffsetResponseB2C::MergeFrom(const CommitOffsetResponseB2C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CommitOffsetResponseB2C)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errmsg();
      errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000004u) {
      errcode_ = from.errcode_;
    }
    if (cached_has_bits & 0x00000008u) {
      curroffset_ = from.curroffset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommitOffsetResponseB2C::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CommitOffsetResponseB2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitOffsetResponseB2C::CopyFrom(const CommitOffsetResponseB2C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CommitOffsetResponseB2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitOffsetResponseB2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void CommitOffsetResponseB2C::Swap(CommitOffsetResponseB2C* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitOffsetResponseB2C::InternalSwap(CommitOffsetResponseB2C* other) {
  using std::swap;
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  swap(errcode_, other->errcode_);
  swap(curroffset_, other->curroffset_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CommitOffsetResponseB2C::GetMetadata() const {
  protobuf_BrokerService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_BrokerService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TransferedMessage* Arena::CreateMaybeMessage< ::TransferedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::TransferedMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AuthorizedInfo* Arena::CreateMaybeMessage< ::AuthorizedInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AuthorizedInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SendMessageRequestP2B* Arena::CreateMaybeMessage< ::SendMessageRequestP2B >(Arena* arena) {
  return Arena::CreateInternal< ::SendMessageRequestP2B >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SendMessageResponseB2P* Arena::CreateMaybeMessage< ::SendMessageResponseB2P >(Arena* arena) {
  return Arena::CreateInternal< ::SendMessageResponseB2P >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RegisterRequestC2B* Arena::CreateMaybeMessage< ::RegisterRequestC2B >(Arena* arena) {
  return Arena::CreateInternal< ::RegisterRequestC2B >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RegisterResponseB2C* Arena::CreateMaybeMessage< ::RegisterResponseB2C >(Arena* arena) {
  return Arena::CreateInternal< ::RegisterResponseB2C >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HeartBeatRequestC2B* Arena::CreateMaybeMessage< ::HeartBeatRequestC2B >(Arena* arena) {
  return Arena::CreateInternal< ::HeartBeatRequestC2B >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HeartBeatResponseB2C* Arena::CreateMaybeMessage< ::HeartBeatResponseB2C >(Arena* arena) {
  return Arena::CreateInternal< ::HeartBeatResponseB2C >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GetMessageRequestC2B* Arena::CreateMaybeMessage< ::GetMessageRequestC2B >(Arena* arena) {
  return Arena::CreateInternal< ::GetMessageRequestC2B >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GetMessageResponseB2C* Arena::CreateMaybeMessage< ::GetMessageResponseB2C >(Arena* arena) {
  return Arena::CreateInternal< ::GetMessageResponseB2C >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CommitOffsetRequestC2B* Arena::CreateMaybeMessage< ::CommitOffsetRequestC2B >(Arena* arena) {
  return Arena::CreateInternal< ::CommitOffsetRequestC2B >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CommitOffsetResponseB2C* Arena::CreateMaybeMessage< ::CommitOffsetResponseB2C >(Arena* arena) {
  return Arena::CreateInternal< ::CommitOffsetResponseB2C >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
