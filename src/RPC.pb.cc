// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RPC.proto

#include "tubemq/RPC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

class RpcConnHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RpcConnHeader>
      _instance;
} _RpcConnHeader_default_instance_;
class RequestHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestHeader>
      _instance;
} _RequestHeader_default_instance_;
class RequestBodyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestBody>
      _instance;
} _RequestBody_default_instance_;
class ResponseHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseHeader>
      _instance;
} _ResponseHeader_default_instance_;
class RspExceptionBodyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RspExceptionBody>
      _instance;
} _RspExceptionBody_default_instance_;
class RspResponseBodyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RspResponseBody>
      _instance;
} _RspResponseBody_default_instance_;
namespace protobuf_RPC_2eproto {
static void InitDefaultsRpcConnHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RpcConnHeader_default_instance_;
    new (ptr) ::RpcConnHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RpcConnHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RpcConnHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRpcConnHeader}, {}};

static void InitDefaultsRequestHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RequestHeader_default_instance_;
    new (ptr) ::RequestHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RequestHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestHeader}, {}};

static void InitDefaultsRequestBody() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RequestBody_default_instance_;
    new (ptr) ::RequestBody();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RequestBody::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestBody =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestBody}, {}};

static void InitDefaultsResponseHeader() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ResponseHeader_default_instance_;
    new (ptr) ::ResponseHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ResponseHeader::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseHeader =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseHeader}, {}};

static void InitDefaultsRspExceptionBody() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RspExceptionBody_default_instance_;
    new (ptr) ::RspExceptionBody();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RspExceptionBody::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RspExceptionBody =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRspExceptionBody}, {}};

static void InitDefaultsRspResponseBody() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RspResponseBody_default_instance_;
    new (ptr) ::RspResponseBody();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RspResponseBody::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RspResponseBody =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRspResponseBody}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RpcConnHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestBody.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseHeader.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RspExceptionBody.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RspResponseBody.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RpcConnHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RpcConnHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RpcConnHeader, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RpcConnHeader, traceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RpcConnHeader, spanid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RpcConnHeader, parentid_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestHeader, servicetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestHeader, protocolver_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestBody, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestBody, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestBody, timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestBody, request_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ResponseHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ResponseHeader, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ResponseHeader, servicetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ResponseHeader, protocolver_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RspExceptionBody, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RspExceptionBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RspExceptionBody, exceptionname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RspExceptionBody, stacktrace_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RspResponseBody, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RspResponseBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RspResponseBody, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RspResponseBody, data_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::RpcConnHeader)},
  { 13, 20, sizeof(::RequestHeader)},
  { 22, 30, sizeof(::RequestBody)},
  { 33, 41, sizeof(::ResponseHeader)},
  { 44, 51, sizeof(::RspExceptionBody)},
  { 53, 60, sizeof(::RspResponseBody)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RpcConnHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RequestHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RequestBody_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ResponseHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RspExceptionBody_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RspResponseBody_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "RPC.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\tRPC.proto\"P\n\rRpcConnHeader\022\014\n\004flag\030\001 \002"
      "(\005\022\017\n\007traceId\030\002 \001(\003\022\016\n\006spanId\030\003 \001(\003\022\020\n\010p"
      "arentId\030\004 \001(\003\"9\n\rRequestHeader\022\023\n\013servic"
      "eType\030\001 \001(\005\022\023\n\013protocolVer\030\002 \001(\005\"\?\n\013Requ"
      "estBody\022\016\n\006method\030\001 \002(\005\022\017\n\007timeout\030\002 \001(\003"
      "\022\017\n\007request\030\003 \001(\014\"\217\001\n\016ResponseHeader\022&\n\006"
      "status\030\001 \002(\0162\026.ResponseHeader.Status\022\023\n\013"
      "serviceType\030\002 \001(\005\022\023\n\013protocolVer\030\003 \001(\005\"+"
      "\n\006Status\022\013\n\007SUCCESS\020\000\022\t\n\005ERROR\020\001\022\t\n\005FATA"
      "L\020\002\"=\n\020RspExceptionBody\022\025\n\rexceptionName"
      "\030\001 \002(\t\022\022\n\nstackTrace\030\002 \001(\t\"/\n\017RspRespons"
      "eBody\022\016\n\006method\030\001 \002(\005\022\014\n\004data\030\002 \002(\014B\?\n-o"
      "rg.apache.tubemq.corebase.protobuf.gener"
      "atedB\tRPCProtosH\001\240\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 540);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RPC.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_RPC_2eproto
const ::google::protobuf::EnumDescriptor* ResponseHeader_Status_descriptor() {
  protobuf_RPC_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_RPC_2eproto::file_level_enum_descriptors[0];
}
bool ResponseHeader_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseHeader_Status ResponseHeader::SUCCESS;
const ResponseHeader_Status ResponseHeader::ERROR;
const ResponseHeader_Status ResponseHeader::FATAL;
const ResponseHeader_Status ResponseHeader::Status_MIN;
const ResponseHeader_Status ResponseHeader::Status_MAX;
const int ResponseHeader::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void RpcConnHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RpcConnHeader::kFlagFieldNumber;
const int RpcConnHeader::kTraceIdFieldNumber;
const int RpcConnHeader::kSpanIdFieldNumber;
const int RpcConnHeader::kParentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RpcConnHeader::RpcConnHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_RPC_2eproto::scc_info_RpcConnHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RpcConnHeader)
}
RpcConnHeader::RpcConnHeader(const RpcConnHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&traceid_, &from.traceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&traceid_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:RpcConnHeader)
}

void RpcConnHeader::SharedCtor() {
  ::memset(&traceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&traceid_)) + sizeof(flag_));
}

RpcConnHeader::~RpcConnHeader() {
  // @@protoc_insertion_point(destructor:RpcConnHeader)
  SharedDtor();
}

void RpcConnHeader::SharedDtor() {
}

void RpcConnHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RpcConnHeader::descriptor() {
  ::protobuf_RPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RpcConnHeader& RpcConnHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_RPC_2eproto::scc_info_RpcConnHeader.base);
  return *internal_default_instance();
}


void RpcConnHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:RpcConnHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&traceid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flag_) -
        reinterpret_cast<char*>(&traceid_)) + sizeof(flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RpcConnHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RpcConnHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 traceId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_traceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &traceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 spanId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_spanid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &spanid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 parentId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_parentid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RpcConnHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RpcConnHeader)
  return false;
#undef DO_
}

void RpcConnHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RpcConnHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 flag = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // optional int64 traceId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->traceid(), output);
  }

  // optional int64 spanId = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->spanid(), output);
  }

  // optional int64 parentId = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->parentid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RpcConnHeader)
}

::google::protobuf::uint8* RpcConnHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RpcConnHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 flag = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // optional int64 traceId = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->traceid(), target);
  }

  // optional int64 spanId = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->spanid(), target);
  }

  // optional int64 parentId = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->parentid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RpcConnHeader)
  return target;
}

size_t RpcConnHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RpcConnHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 flag = 1;
  if (has_flag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 traceId = 2;
    if (has_traceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->traceid());
    }

    // optional int64 spanId = 3;
    if (has_spanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->spanid());
    }

    // optional int64 parentId = 4;
    if (has_parentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->parentid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RpcConnHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RpcConnHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const RpcConnHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RpcConnHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RpcConnHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RpcConnHeader)
    MergeFrom(*source);
  }
}

void RpcConnHeader::MergeFrom(const RpcConnHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RpcConnHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      traceid_ = from.traceid_;
    }
    if (cached_has_bits & 0x00000002u) {
      spanid_ = from.spanid_;
    }
    if (cached_has_bits & 0x00000004u) {
      parentid_ = from.parentid_;
    }
    if (cached_has_bits & 0x00000008u) {
      flag_ = from.flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RpcConnHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RpcConnHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcConnHeader::CopyFrom(const RpcConnHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RpcConnHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcConnHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void RpcConnHeader::Swap(RpcConnHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RpcConnHeader::InternalSwap(RpcConnHeader* other) {
  using std::swap;
  swap(traceid_, other->traceid_);
  swap(spanid_, other->spanid_);
  swap(parentid_, other->parentid_);
  swap(flag_, other->flag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RpcConnHeader::GetMetadata() const {
  protobuf_RPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestHeader::kServiceTypeFieldNumber;
const int RequestHeader::kProtocolVerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestHeader::RequestHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_RPC_2eproto::scc_info_RequestHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RequestHeader)
}
RequestHeader::RequestHeader(const RequestHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&servicetype_, &from.servicetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocolver_) -
    reinterpret_cast<char*>(&servicetype_)) + sizeof(protocolver_));
  // @@protoc_insertion_point(copy_constructor:RequestHeader)
}

void RequestHeader::SharedCtor() {
  ::memset(&servicetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocolver_) -
      reinterpret_cast<char*>(&servicetype_)) + sizeof(protocolver_));
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:RequestHeader)
  SharedDtor();
}

void RequestHeader::SharedDtor() {
}

void RequestHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestHeader::descriptor() {
  ::protobuf_RPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestHeader& RequestHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_RPC_2eproto::scc_info_RequestHeader.base);
  return *internal_default_instance();
}


void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&servicetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&protocolver_) -
        reinterpret_cast<char*>(&servicetype_)) + sizeof(protocolver_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RequestHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 serviceType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_servicetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servicetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 protocolVer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_protocolver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RequestHeader)
  return false;
#undef DO_
}

void RequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 serviceType = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->servicetype(), output);
  }

  // optional int32 protocolVer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->protocolver(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RequestHeader)
}

::google::protobuf::uint8* RequestHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RequestHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 serviceType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->servicetype(), target);
  }

  // optional int32 protocolVer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->protocolver(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestHeader)
  return target;
}

size_t RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 serviceType = 1;
    if (has_servicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servicetype());
    }

    // optional int32 protocolVer = 2;
    if (has_protocolver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocolver());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RequestHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RequestHeader)
    MergeFrom(*source);
  }
}

void RequestHeader::MergeFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      servicetype_ = from.servicetype_;
    }
    if (cached_has_bits & 0x00000002u) {
      protocolver_ = from.protocolver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  return true;
}

void RequestHeader::Swap(RequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestHeader::InternalSwap(RequestHeader* other) {
  using std::swap;
  swap(servicetype_, other->servicetype_);
  swap(protocolver_, other->protocolver_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestHeader::GetMetadata() const {
  protobuf_RPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestBody::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestBody::kMethodFieldNumber;
const int RequestBody::kTimeoutFieldNumber;
const int RequestBody::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestBody::RequestBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_RPC_2eproto::scc_info_RequestBody.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RequestBody)
}
RequestBody::RequestBody(const RequestBody& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request()) {
    request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_);
  }
  ::memcpy(&timeout_, &from.timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&timeout_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:RequestBody)
}

void RequestBody::SharedCtor() {
  request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(method_));
}

RequestBody::~RequestBody() {
  // @@protoc_insertion_point(destructor:RequestBody)
  SharedDtor();
}

void RequestBody::SharedDtor() {
  request_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestBody::descriptor() {
  ::protobuf_RPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestBody& RequestBody::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_RPC_2eproto::scc_info_RequestBody.base);
  return *internal_default_instance();
}


void RequestBody::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    request_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&timeout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&method_) -
        reinterpret_cast<char*>(&timeout_)) + sizeof(method_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RequestBody)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 method = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_method();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timeout = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RequestBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RequestBody)
  return false;
#undef DO_
}

void RequestBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RequestBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 method = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->method(), output);
  }

  // optional int64 timeout = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timeout(), output);
  }

  // optional bytes request = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->request(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RequestBody)
}

::google::protobuf::uint8* RequestBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RequestBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 method = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->method(), target);
  }

  // optional int64 timeout = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timeout(), target);
  }

  // optional bytes request = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->request(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestBody)
  return target;
}

size_t RequestBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 method = 1;
  if (has_method()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->method());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes request = 3;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request());
    }

    // optional int64 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timeout());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RequestBody)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestBody* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RequestBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RequestBody)
    MergeFrom(*source);
  }
}

void RequestBody::MergeFrom(const RequestBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RequestBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_request();
      request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_);
    }
    if (cached_has_bits & 0x00000002u) {
      timeout_ = from.timeout_;
    }
    if (cached_has_bits & 0x00000004u) {
      method_ = from.method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestBody::CopyFrom(const RequestBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestBody::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void RequestBody::Swap(RequestBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestBody::InternalSwap(RequestBody* other) {
  using std::swap;
  request_.Swap(&other->request_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timeout_, other->timeout_);
  swap(method_, other->method_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestBody::GetMetadata() const {
  protobuf_RPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseHeader::kStatusFieldNumber;
const int ResponseHeader::kServiceTypeFieldNumber;
const int ResponseHeader::kProtocolVerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseHeader::ResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_RPC_2eproto::scc_info_ResponseHeader.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResponseHeader)
}
ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&protocolver_) -
    reinterpret_cast<char*>(&status_)) + sizeof(protocolver_));
  // @@protoc_insertion_point(copy_constructor:ResponseHeader)
}

void ResponseHeader::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&protocolver_) -
      reinterpret_cast<char*>(&status_)) + sizeof(protocolver_));
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:ResponseHeader)
  SharedDtor();
}

void ResponseHeader::SharedDtor() {
}

void ResponseHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseHeader::descriptor() {
  ::protobuf_RPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseHeader& ResponseHeader::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_RPC_2eproto::scc_info_ResponseHeader.base);
  return *internal_default_instance();
}


void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&protocolver_) -
        reinterpret_cast<char*>(&status_)) + sizeof(protocolver_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ResponseHeader)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ResponseHeader.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ResponseHeader_Status_IsValid(value)) {
            set_status(static_cast< ::ResponseHeader_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 serviceType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_servicetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servicetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 protocolVer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_protocolver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResponseHeader)
  return false;
#undef DO_
}

void ResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ResponseHeader.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional int32 serviceType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->servicetype(), output);
  }

  // optional int32 protocolVer = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->protocolver(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ResponseHeader)
}

::google::protobuf::uint8* ResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ResponseHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ResponseHeader.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional int32 serviceType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->servicetype(), target);
  }

  // optional int32 protocolVer = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->protocolver(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResponseHeader)
  return target;
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResponseHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .ResponseHeader.Status status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional int32 serviceType = 2;
    if (has_servicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servicetype());
    }

    // optional int32 protocolVer = 3;
    if (has_protocolver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocolver());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ResponseHeader)
    MergeFrom(*source);
  }
}

void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000002u) {
      servicetype_ = from.servicetype_;
    }
    if (cached_has_bits & 0x00000004u) {
      protocolver_ = from.protocolver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResponseHeader::Swap(ResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseHeader::InternalSwap(ResponseHeader* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(servicetype_, other->servicetype_);
  swap(protocolver_, other->protocolver_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseHeader::GetMetadata() const {
  protobuf_RPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RspExceptionBody::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspExceptionBody::kExceptionNameFieldNumber;
const int RspExceptionBody::kStackTraceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspExceptionBody::RspExceptionBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_RPC_2eproto::scc_info_RspExceptionBody.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RspExceptionBody)
}
RspExceptionBody::RspExceptionBody(const RspExceptionBody& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  exceptionname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_exceptionname()) {
    exceptionname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exceptionname_);
  }
  stacktrace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stacktrace()) {
    stacktrace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stacktrace_);
  }
  // @@protoc_insertion_point(copy_constructor:RspExceptionBody)
}

void RspExceptionBody::SharedCtor() {
  exceptionname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stacktrace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RspExceptionBody::~RspExceptionBody() {
  // @@protoc_insertion_point(destructor:RspExceptionBody)
  SharedDtor();
}

void RspExceptionBody::SharedDtor() {
  exceptionname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stacktrace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RspExceptionBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RspExceptionBody::descriptor() {
  ::protobuf_RPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RspExceptionBody& RspExceptionBody::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_RPC_2eproto::scc_info_RspExceptionBody.base);
  return *internal_default_instance();
}


void RspExceptionBody::Clear() {
// @@protoc_insertion_point(message_clear_start:RspExceptionBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      exceptionname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      stacktrace_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RspExceptionBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RspExceptionBody)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string exceptionName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exceptionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exceptionname().data(), static_cast<int>(this->exceptionname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RspExceptionBody.exceptionName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stackTrace = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stacktrace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stacktrace().data(), static_cast<int>(this->stacktrace().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RspExceptionBody.stackTrace");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RspExceptionBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RspExceptionBody)
  return false;
#undef DO_
}

void RspExceptionBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RspExceptionBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string exceptionName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exceptionname().data(), static_cast<int>(this->exceptionname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RspExceptionBody.exceptionName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->exceptionname(), output);
  }

  // optional string stackTrace = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stacktrace().data(), static_cast<int>(this->stacktrace().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RspExceptionBody.stackTrace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stacktrace(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RspExceptionBody)
}

::google::protobuf::uint8* RspExceptionBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RspExceptionBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string exceptionName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exceptionname().data(), static_cast<int>(this->exceptionname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RspExceptionBody.exceptionName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exceptionname(), target);
  }

  // optional string stackTrace = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stacktrace().data(), static_cast<int>(this->stacktrace().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RspExceptionBody.stackTrace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stacktrace(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RspExceptionBody)
  return target;
}

size_t RspExceptionBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RspExceptionBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string exceptionName = 1;
  if (has_exceptionname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exceptionname());
  }
  // optional string stackTrace = 2;
  if (has_stacktrace()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stacktrace());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RspExceptionBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RspExceptionBody)
  GOOGLE_DCHECK_NE(&from, this);
  const RspExceptionBody* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspExceptionBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RspExceptionBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RspExceptionBody)
    MergeFrom(*source);
  }
}

void RspExceptionBody::MergeFrom(const RspExceptionBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RspExceptionBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_exceptionname();
      exceptionname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exceptionname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_stacktrace();
      stacktrace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stacktrace_);
    }
  }
}

void RspExceptionBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RspExceptionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspExceptionBody::CopyFrom(const RspExceptionBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RspExceptionBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspExceptionBody::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void RspExceptionBody::Swap(RspExceptionBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspExceptionBody::InternalSwap(RspExceptionBody* other) {
  using std::swap;
  exceptionname_.Swap(&other->exceptionname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stacktrace_.Swap(&other->stacktrace_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RspExceptionBody::GetMetadata() const {
  protobuf_RPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RspResponseBody::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspResponseBody::kMethodFieldNumber;
const int RspResponseBody::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspResponseBody::RspResponseBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_RPC_2eproto::scc_info_RspResponseBody.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RspResponseBody)
}
RspResponseBody::RspResponseBody(const RspResponseBody& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  method_ = from.method_;
  // @@protoc_insertion_point(copy_constructor:RspResponseBody)
}

void RspResponseBody::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_ = 0;
}

RspResponseBody::~RspResponseBody() {
  // @@protoc_insertion_point(destructor:RspResponseBody)
  SharedDtor();
}

void RspResponseBody::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RspResponseBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RspResponseBody::descriptor() {
  ::protobuf_RPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RspResponseBody& RspResponseBody::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_RPC_2eproto::scc_info_RspResponseBody.base);
  return *internal_default_instance();
}


void RspResponseBody::Clear() {
// @@protoc_insertion_point(message_clear_start:RspResponseBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  method_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RspResponseBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RspResponseBody)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 method = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_method();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RspResponseBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RspResponseBody)
  return false;
#undef DO_
}

void RspResponseBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RspResponseBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 method = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->method(), output);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RspResponseBody)
}

::google::protobuf::uint8* RspResponseBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RspResponseBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 method = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->method(), target);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RspResponseBody)
  return target;
}

size_t RspResponseBody::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RspResponseBody)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_method()) {
    // required int32 method = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->method());
  }

  return total_size;
}
size_t RspResponseBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RspResponseBody)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required int32 method = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->method());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RspResponseBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RspResponseBody)
  GOOGLE_DCHECK_NE(&from, this);
  const RspResponseBody* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RspResponseBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RspResponseBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RspResponseBody)
    MergeFrom(*source);
  }
}

void RspResponseBody::MergeFrom(const RspResponseBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RspResponseBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      method_ = from.method_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RspResponseBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RspResponseBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspResponseBody::CopyFrom(const RspResponseBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RspResponseBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspResponseBody::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RspResponseBody::Swap(RspResponseBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspResponseBody::InternalSwap(RspResponseBody* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(method_, other->method_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RspResponseBody::GetMetadata() const {
  protobuf_RPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_RPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RpcConnHeader* Arena::CreateMaybeMessage< ::RpcConnHeader >(Arena* arena) {
  return Arena::CreateInternal< ::RpcConnHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RequestHeader* Arena::CreateMaybeMessage< ::RequestHeader >(Arena* arena) {
  return Arena::CreateInternal< ::RequestHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RequestBody* Arena::CreateMaybeMessage< ::RequestBody >(Arena* arena) {
  return Arena::CreateInternal< ::RequestBody >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ResponseHeader* Arena::CreateMaybeMessage< ::ResponseHeader >(Arena* arena) {
  return Arena::CreateInternal< ::ResponseHeader >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RspExceptionBody* Arena::CreateMaybeMessage< ::RspExceptionBody >(Arena* arena) {
  return Arena::CreateInternal< ::RspExceptionBody >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RspResponseBody* Arena::CreateMaybeMessage< ::RspResponseBody >(Arena* arena) {
  return Arena::CreateInternal< ::RspResponseBody >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
