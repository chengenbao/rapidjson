// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MasterService.proto

#include "tubemq/MasterService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_MasterService_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MasterService_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AuthenticateInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MasterService_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EventProto;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MasterService_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MasterAuthorizedInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MasterService_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MasterCertificateInfo;
}  // namespace protobuf_MasterService_2eproto
class EventProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EventProto>
      _instance;
} _EventProto_default_instance_;
class EnableBrokerFunInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EnableBrokerFunInfo>
      _instance;
} _EnableBrokerFunInfo_default_instance_;
class AuthenticateInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthenticateInfo>
      _instance;
} _AuthenticateInfo_default_instance_;
class MasterCertificateInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MasterCertificateInfo>
      _instance;
} _MasterCertificateInfo_default_instance_;
class MasterAuthorizedInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MasterAuthorizedInfo>
      _instance;
} _MasterAuthorizedInfo_default_instance_;
class MasterBrokerAuthorizedInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MasterBrokerAuthorizedInfo>
      _instance;
} _MasterBrokerAuthorizedInfo_default_instance_;
class RegisterRequestP2MDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterRequestP2M>
      _instance;
} _RegisterRequestP2M_default_instance_;
class RegisterResponseM2PDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterResponseM2P>
      _instance;
} _RegisterResponseM2P_default_instance_;
class HeartRequestP2MDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartRequestP2M>
      _instance;
} _HeartRequestP2M_default_instance_;
class HeartResponseM2PDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartResponseM2P>
      _instance;
} _HeartResponseM2P_default_instance_;
class CloseRequestP2MDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloseRequestP2M>
      _instance;
} _CloseRequestP2M_default_instance_;
class CloseResponseM2PDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloseResponseM2P>
      _instance;
} _CloseResponseM2P_default_instance_;
class RegisterRequestC2MDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterRequestC2M>
      _instance;
} _RegisterRequestC2M_default_instance_;
class RegisterResponseM2CDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RegisterResponseM2C>
      _instance;
} _RegisterResponseM2C_default_instance_;
class HeartRequestC2MDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartRequestC2M>
      _instance;
} _HeartRequestC2M_default_instance_;
class HeartResponseM2CDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeartResponseM2C>
      _instance;
} _HeartResponseM2C_default_instance_;
class CloseRequestC2MDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloseRequestC2M>
      _instance;
} _CloseRequestC2M_default_instance_;
class CloseResponseM2CDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CloseResponseM2C>
      _instance;
} _CloseResponseM2C_default_instance_;
namespace protobuf_MasterService_2eproto {
static void InitDefaultsEventProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EventProto_default_instance_;
    new (ptr) ::EventProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EventProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EventProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEventProto}, {}};

static void InitDefaultsEnableBrokerFunInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EnableBrokerFunInfo_default_instance_;
    new (ptr) ::EnableBrokerFunInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EnableBrokerFunInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EnableBrokerFunInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEnableBrokerFunInfo}, {}};

static void InitDefaultsAuthenticateInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AuthenticateInfo_default_instance_;
    new (ptr) ::AuthenticateInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AuthenticateInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthenticateInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthenticateInfo}, {}};

static void InitDefaultsMasterCertificateInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MasterCertificateInfo_default_instance_;
    new (ptr) ::MasterCertificateInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MasterCertificateInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MasterCertificateInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMasterCertificateInfo}, {
      &protobuf_MasterService_2eproto::scc_info_AuthenticateInfo.base,}};

static void InitDefaultsMasterAuthorizedInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MasterAuthorizedInfo_default_instance_;
    new (ptr) ::MasterAuthorizedInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MasterAuthorizedInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MasterAuthorizedInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMasterAuthorizedInfo}, {}};

static void InitDefaultsMasterBrokerAuthorizedInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MasterBrokerAuthorizedInfo_default_instance_;
    new (ptr) ::MasterBrokerAuthorizedInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MasterBrokerAuthorizedInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MasterBrokerAuthorizedInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMasterBrokerAuthorizedInfo}, {}};

static void InitDefaultsRegisterRequestP2M() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterRequestP2M_default_instance_;
    new (ptr) ::RegisterRequestP2M();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterRequestP2M::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RegisterRequestP2M =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRegisterRequestP2M}, {
      &protobuf_MasterService_2eproto::scc_info_MasterCertificateInfo.base,}};

static void InitDefaultsRegisterResponseM2P() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterResponseM2P_default_instance_;
    new (ptr) ::RegisterResponseM2P();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterResponseM2P::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RegisterResponseM2P =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRegisterResponseM2P}, {
      &protobuf_MasterService_2eproto::scc_info_MasterAuthorizedInfo.base,}};

static void InitDefaultsHeartRequestP2M() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HeartRequestP2M_default_instance_;
    new (ptr) ::HeartRequestP2M();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HeartRequestP2M::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HeartRequestP2M =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHeartRequestP2M}, {
      &protobuf_MasterService_2eproto::scc_info_MasterCertificateInfo.base,}};

static void InitDefaultsHeartResponseM2P() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HeartResponseM2P_default_instance_;
    new (ptr) ::HeartResponseM2P();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HeartResponseM2P::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HeartResponseM2P =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHeartResponseM2P}, {
      &protobuf_MasterService_2eproto::scc_info_MasterAuthorizedInfo.base,}};

static void InitDefaultsCloseRequestP2M() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CloseRequestP2M_default_instance_;
    new (ptr) ::CloseRequestP2M();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CloseRequestP2M::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CloseRequestP2M =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCloseRequestP2M}, {
      &protobuf_MasterService_2eproto::scc_info_MasterCertificateInfo.base,}};

static void InitDefaultsCloseResponseM2P() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CloseResponseM2P_default_instance_;
    new (ptr) ::CloseResponseM2P();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CloseResponseM2P::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CloseResponseM2P =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCloseResponseM2P}, {}};

static void InitDefaultsRegisterRequestC2M() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterRequestC2M_default_instance_;
    new (ptr) ::RegisterRequestC2M();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterRequestC2M::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RegisterRequestC2M =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRegisterRequestC2M}, {
      &protobuf_MasterService_2eproto::scc_info_MasterCertificateInfo.base,}};

static void InitDefaultsRegisterResponseM2C() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RegisterResponseM2C_default_instance_;
    new (ptr) ::RegisterResponseM2C();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RegisterResponseM2C::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RegisterResponseM2C =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRegisterResponseM2C}, {
      &protobuf_MasterService_2eproto::scc_info_MasterAuthorizedInfo.base,}};

static void InitDefaultsHeartRequestC2M() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HeartRequestC2M_default_instance_;
    new (ptr) ::HeartRequestC2M();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HeartRequestC2M::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_HeartRequestC2M =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHeartRequestC2M}, {
      &protobuf_MasterService_2eproto::scc_info_EventProto.base,
      &protobuf_MasterService_2eproto::scc_info_MasterCertificateInfo.base,}};

static void InitDefaultsHeartResponseM2C() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_HeartResponseM2C_default_instance_;
    new (ptr) ::HeartResponseM2C();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HeartResponseM2C::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_HeartResponseM2C =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHeartResponseM2C}, {
      &protobuf_MasterService_2eproto::scc_info_EventProto.base,
      &protobuf_MasterService_2eproto::scc_info_MasterAuthorizedInfo.base,}};

static void InitDefaultsCloseRequestC2M() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CloseRequestC2M_default_instance_;
    new (ptr) ::CloseRequestC2M();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CloseRequestC2M::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CloseRequestC2M =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCloseRequestC2M}, {
      &protobuf_MasterService_2eproto::scc_info_MasterCertificateInfo.base,}};

static void InitDefaultsCloseResponseM2C() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CloseResponseM2C_default_instance_;
    new (ptr) ::CloseResponseM2C();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CloseResponseM2C::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CloseResponseM2C =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCloseResponseM2C}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_EventProto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EnableBrokerFunInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthenticateInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MasterCertificateInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MasterAuthorizedInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MasterBrokerAuthorizedInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterRequestP2M.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterResponseM2P.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeartRequestP2M.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeartResponseM2P.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CloseRequestP2M.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CloseResponseM2P.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterRequestC2M.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RegisterResponseM2C.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeartRequestC2M.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeartResponseM2C.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CloseRequestC2M.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CloseResponseM2C.base);
}

::google::protobuf::Metadata file_level_metadata[18];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EventProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EventProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EventProto, rebalanceid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EventProto, optype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EventProto, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EventProto, subscribeinfo_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EnableBrokerFunInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EnableBrokerFunInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EnableBrokerFunInfo, enableconsumeauthenticate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EnableBrokerFunInfo, enableconsumeauthorize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EnableBrokerFunInfo, enableproduceauthenticate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EnableBrokerFunInfo, enableproduceauthorize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EnableBrokerFunInfo, enablevisittokencheck_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AuthenticateInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AuthenticateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AuthenticateInfo, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AuthenticateInfo, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AuthenticateInfo, nonce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AuthenticateInfo, othparams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AuthenticateInfo, signature_),
  0,
  3,
  4,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MasterCertificateInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MasterCertificateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MasterCertificateInfo, authinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MasterCertificateInfo, authorizedtoken_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MasterAuthorizedInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MasterAuthorizedInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MasterAuthorizedInfo, visitauthorizedtoken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MasterAuthorizedInfo, authauthorizedtoken_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MasterBrokerAuthorizedInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MasterBrokerAuthorizedInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MasterBrokerAuthorizedInfo, visitauthorizedtoken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MasterBrokerAuthorizedInfo, authauthorizedtoken_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestP2M, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestP2M, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestP2M, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestP2M, topiclist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestP2M, brokerchecksum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestP2M, hostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestP2M, authinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestP2M, jdkversion_),
  0,
  ~0u,
  4,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2P, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2P, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2P, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2P, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2P, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2P, brokerchecksum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2P, brokerinfos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2P, authorizedinfo_),
  2,
  3,
  0,
  4,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestP2M, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestP2M, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestP2M, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestP2M, brokerchecksum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestP2M, hostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestP2M, topiclist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestP2M, authinfo_),
  0,
  3,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2P, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2P, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2P, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2P, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2P, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2P, brokerchecksum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2P, topicinfos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2P, brokerinfos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2P, requireauth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2P, authorizedinfo_),
  3,
  2,
  0,
  5,
  ~0u,
  ~0u,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseRequestP2M, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseRequestP2M, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseRequestP2M, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseRequestP2M, authinfo_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseResponseM2P, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseResponseM2P, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseResponseM2P, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseResponseM2P, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseResponseM2P, errmsg_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, groupname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, hostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, topiclist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, subscribeinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, topiccondition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, requirebound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, sessiontime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, sessionkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, totalcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, requiredpartition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, notallocated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, selectbig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, groupflowcheckid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, defflowcheckid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, ssdstoreid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, qrypriorityid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, authinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterRequestC2M, jdkversion_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  9,
  7,
  3,
  8,
  4,
  10,
  11,
  12,
  13,
  14,
  15,
  6,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2C, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2C, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2C, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2C, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2C, topicinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2C, notallocated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2C, defflowcheckid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2C, defflowcontrolinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2C, groupflowcheckid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2C, groupflowcontrolinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2C, ssdstoreid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2C, qrypriorityid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RegisterResponseM2C, authorizedinfo_),
  5,
  4,
  0,
  ~0u,
  6,
  7,
  1,
  8,
  2,
  9,
  10,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestC2M, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestC2M, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestC2M, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestC2M, groupname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestC2M, subscribeinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestC2M, reportsubscribeinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestC2M, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestC2M, defflowcheckid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestC2M, groupflowcheckid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestC2M, ssdstoreid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestC2M, qrypriorityid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartRequestC2M, authinfo_),
  0,
  1,
  ~0u,
  5,
  2,
  4,
  7,
  8,
  6,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2C, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2C, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2C, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2C, errmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2C, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2C, notallocated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2C, defflowcheckid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2C, defflowcontrolinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2C, groupflowcheckid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2C, groupflowcontrolinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2C, ssdstoreid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2C, qrypriorityid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2C, requireauth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HeartResponseM2C, authorizedinfo_),
  6,
  5,
  0,
  3,
  7,
  9,
  1,
  10,
  2,
  11,
  12,
  8,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseRequestC2M, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseRequestC2M, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseRequestC2M, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseRequestC2M, groupname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseRequestC2M, authinfo_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseResponseM2C, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseResponseM2C, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseResponseM2C, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseResponseM2C, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CloseResponseM2C, errmsg_),
  1,
  2,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::EventProto)},
  { 13, 23, sizeof(::EnableBrokerFunInfo)},
  { 28, 38, sizeof(::AuthenticateInfo)},
  { 43, 50, sizeof(::MasterCertificateInfo)},
  { 52, 59, sizeof(::MasterAuthorizedInfo)},
  { 61, 68, sizeof(::MasterBrokerAuthorizedInfo)},
  { 70, 81, sizeof(::RegisterRequestP2M)},
  { 87, 98, sizeof(::RegisterResponseM2P)},
  { 104, 114, sizeof(::HeartRequestP2M)},
  { 119, 132, sizeof(::HeartResponseM2P)},
  { 140, 147, sizeof(::CloseRequestP2M)},
  { 149, 157, sizeof(::CloseResponseM2P)},
  { 160, 184, sizeof(::RegisterRequestC2M)},
  { 203, 220, sizeof(::RegisterResponseM2C)},
  { 232, 247, sizeof(::HeartRequestC2M)},
  { 257, 275, sizeof(::HeartResponseM2C)},
  { 288, 296, sizeof(::CloseRequestC2M)},
  { 299, 307, sizeof(::CloseResponseM2C)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_EventProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_EnableBrokerFunInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AuthenticateInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MasterCertificateInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MasterAuthorizedInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MasterBrokerAuthorizedInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RegisterRequestP2M_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RegisterResponseM2P_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HeartRequestP2M_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HeartResponseM2P_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CloseRequestP2M_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CloseResponseM2P_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RegisterRequestC2M_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RegisterResponseM2C_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HeartRequestC2M_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_HeartResponseM2C_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CloseRequestC2M_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CloseResponseM2C_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "MasterService.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023MasterService.proto\"X\n\nEventProto\022\023\n\013r"
      "ebalanceId\030\001 \001(\003\022\016\n\006opType\030\002 \001(\005\022\016\n\006stat"
      "us\030\003 \001(\005\022\025\n\rsubscribeInfo\030\004 \003(\t\"\272\001\n\023Enab"
      "leBrokerFunInfo\022!\n\031enableConsumeAuthenti"
      "cate\030\001 \002(\010\022\036\n\026enableConsumeAuthorize\030\002 \002"
      "(\010\022!\n\031enableProduceAuthenticate\030\003 \002(\010\022\036\n"
      "\026enableProduceAuthorize\030\004 \002(\010\022\035\n\025enableV"
      "isitTokenCheck\030\005 \001(\010\"l\n\020AuthenticateInfo"
      "\022\020\n\010userName\030\001 \002(\t\022\021\n\ttimestamp\030\002 \002(\003\022\r\n"
      "\005nonce\030\003 \002(\005\022\021\n\tothParams\030\004 \002(\t\022\021\n\tsigna"
      "ture\030\005 \002(\t\"U\n\025MasterCertificateInfo\022#\n\010a"
      "uthInfo\030\001 \001(\0132\021.AuthenticateInfo\022\027\n\017auth"
      "orizedToken\030\002 \001(\t\"Q\n\024MasterAuthorizedInf"
      "o\022\034\n\024visitAuthorizedToken\030\001 \002(\003\022\033\n\023authA"
      "uthorizedToken\030\002 \001(\t\"W\n\032MasterBrokerAuth"
      "orizedInfo\022\034\n\024visitAuthorizedToken\030\001 \002(\t"
      "\022\033\n\023authAuthorizedToken\030\002 \001(\t\"\241\001\n\022Regist"
      "erRequestP2M\022\020\n\010clientId\030\001 \002(\t\022\021\n\ttopicL"
      "ist\030\002 \003(\t\022\026\n\016brokerCheckSum\030\003 \002(\003\022\020\n\010hos"
      "tName\030\004 \002(\t\022(\n\010authInfo\030\005 \001(\0132\026.MasterCe"
      "rtificateInfo\022\022\n\njdkVersion\030\006 \001(\t\"\243\001\n\023Re"
      "gisterResponseM2P\022\017\n\007success\030\001 \002(\010\022\017\n\007er"
      "rCode\030\002 \002(\005\022\016\n\006errMsg\030\003 \002(\t\022\026\n\016brokerChe"
      "ckSum\030\004 \002(\003\022\023\n\013brokerInfos\030\005 \003(\t\022-\n\016auth"
      "orizedInfo\030\006 \001(\0132\025.MasterAuthorizedInfo\""
      "\212\001\n\017HeartRequestP2M\022\020\n\010clientId\030\001 \002(\t\022\026\n"
      "\016brokerCheckSum\030\002 \002(\003\022\020\n\010hostName\030\003 \002(\t\022"
      "\021\n\ttopicList\030\004 \003(\t\022(\n\010authInfo\030\005 \001(\0132\026.M"
      "asterCertificateInfo\"\311\001\n\020HeartResponseM2"
      "P\022\017\n\007success\030\001 \002(\010\022\017\n\007errCode\030\002 \002(\005\022\016\n\006e"
      "rrMsg\030\003 \002(\t\022\026\n\016brokerCheckSum\030\004 \002(\003\022\022\n\nt"
      "opicInfos\030\005 \003(\t\022\023\n\013brokerInfos\030\006 \003(\t\022\023\n\013"
      "requireAuth\030\007 \001(\010\022-\n\016authorizedInfo\030\010 \001("
      "\0132\025.MasterAuthorizedInfo\"M\n\017CloseRequest"
      "P2M\022\020\n\010clientId\030\001 \002(\t\022(\n\010authInfo\030\002 \001(\0132"
      "\026.MasterCertificateInfo\"D\n\020CloseResponse"
      "M2P\022\017\n\007success\030\001 \002(\010\022\017\n\007errCode\030\002 \002(\005\022\016\n"
      "\006errMsg\030\003 \002(\t\"\277\003\n\022RegisterRequestC2M\022\020\n\010"
      "clientId\030\001 \002(\t\022\021\n\tgroupName\030\002 \002(\t\022\020\n\010hos"
      "tName\030\003 \002(\t\022\021\n\ttopicList\030\004 \003(\t\022\025\n\rsubscr"
      "ibeInfo\030\005 \003(\t\022\026\n\016topicCondition\030\006 \003(\t\022\024\n"
      "\014requireBound\030\007 \001(\010\022\023\n\013sessionTime\030\010 \001(\003"
      "\022\022\n\nsessionKey\030\t \001(\t\022\022\n\ntotalCount\030\n \001(\005"
      "\022\031\n\021requiredPartition\030\013 \001(\t\022\024\n\014notAlloca"
      "ted\030\014 \001(\010\022\021\n\tselectBig\030\r \001(\010\022\030\n\020groupFlo"
      "wCheckId\030\016 \001(\003\022\026\n\016defFlowCheckId\030\017 \001(\003\022\022"
      "\n\nssdStoreId\030\020 \001(\003\022\025\n\rqryPriorityId\030\021 \001("
      "\005\022(\n\010authInfo\030\022 \001(\0132\026.MasterCertificateI"
      "nfo\022\022\n\njdkVersion\030\023 \001(\t\"\266\002\n\023RegisterResp"
      "onseM2C\022\017\n\007success\030\001 \002(\010\022\017\n\007errCode\030\002 \002("
      "\005\022\016\n\006errMsg\030\003 \002(\t\022\021\n\ttopicInfo\030\004 \003(\t\022\024\n\014"
      "notAllocated\030\005 \001(\010\022\026\n\016defFlowCheckId\030\006 \001"
      "(\003\022\032\n\022defFlowControlInfo\030\007 \001(\t\022\030\n\020groupF"
      "lowCheckId\030\010 \001(\003\022\034\n\024groupFlowControlInfo"
      "\030\t \001(\t\022\022\n\nssdStoreId\030\n \001(\003\022\025\n\rqryPriorit"
      "yId\030\013 \001(\005\022-\n\016authorizedInfo\030\014 \001(\0132\025.Mast"
      "erAuthorizedInfo\"\215\002\n\017HeartRequestC2M\022\020\n\010"
      "clientId\030\001 \002(\t\022\021\n\tgroupName\030\002 \002(\t\022\025\n\rsub"
      "scribeInfo\030\003 \003(\t\022\033\n\023reportSubscribeInfo\030"
      "\004 \002(\010\022\032\n\005event\030\005 \001(\0132\013.EventProto\022\026\n\016def"
      "FlowCheckId\030\006 \001(\003\022\030\n\020groupFlowCheckId\030\007 "
      "\001(\003\022\022\n\nssdStoreId\030\010 \001(\003\022\025\n\rqryPriorityId"
      "\030\t \001(\005\022(\n\010authInfo\030\n \001(\0132\026.MasterCertifi"
      "cateInfo\"\321\002\n\020HeartResponseM2C\022\017\n\007success"
      "\030\001 \002(\010\022\017\n\007errCode\030\002 \002(\005\022\016\n\006errMsg\030\003 \002(\t\022"
      "\032\n\005event\030\004 \001(\0132\013.EventProto\022\024\n\014notAlloca"
      "ted\030\005 \001(\010\022\026\n\016defFlowCheckId\030\006 \001(\003\022\032\n\022def"
      "FlowControlInfo\030\007 \001(\t\022\030\n\020groupFlowCheckI"
      "d\030\010 \001(\003\022\034\n\024groupFlowControlInfo\030\t \001(\t\022\022\n"
      "\nssdStoreId\030\n \001(\003\022\025\n\rqryPriorityId\030\013 \001(\005"
      "\022\023\n\013requireAuth\030\014 \001(\010\022-\n\016authorizedInfo\030"
      "\r \001(\0132\025.MasterAuthorizedInfo\"`\n\017CloseReq"
      "uestC2M\022\020\n\010clientId\030\001 \002(\t\022\021\n\tgroupName\030\002"
      " \002(\t\022(\n\010authInfo\030\003 \001(\0132\026.MasterCertifica"
      "teInfo\"D\n\020CloseResponseM2C\022\017\n\007success\030\001 "
      "\002(\010\022\017\n\007errCode\030\002 \002(\005\022\016\n\006errMsg\030\003 \002(\tBE\n-"
      "org.apache.tubemq.corebase.protobuf.gene"
      "ratedB\014ClientMasterH\001\210\001\001\240\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3107);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MasterService.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_MasterService_2eproto

// ===================================================================

void EventProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventProto::kRebalanceIdFieldNumber;
const int EventProto::kOpTypeFieldNumber;
const int EventProto::kStatusFieldNumber;
const int EventProto::kSubscribeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventProto::EventProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_EventProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EventProto)
}
EventProto::EventProto(const EventProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      subscribeinfo_(from.subscribeinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rebalanceid_, &from.rebalanceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&rebalanceid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:EventProto)
}

void EventProto::SharedCtor() {
  ::memset(&rebalanceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&rebalanceid_)) + sizeof(status_));
}

EventProto::~EventProto() {
  // @@protoc_insertion_point(destructor:EventProto)
  SharedDtor();
}

void EventProto::SharedDtor() {
}

void EventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EventProto::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EventProto& EventProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_EventProto.base);
  return *internal_default_instance();
}


void EventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:EventProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscribeinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&rebalanceid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&rebalanceid_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EventProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EventProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 rebalanceId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_rebalanceid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rebalanceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 opType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_optype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string subscribeInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subscribeinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subscribeinfo(this->subscribeinfo_size() - 1).data(),
            static_cast<int>(this->subscribeinfo(this->subscribeinfo_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "EventProto.subscribeInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EventProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EventProto)
  return false;
#undef DO_
}

void EventProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EventProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 rebalanceId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->rebalanceid(), output);
  }

  // optional int32 opType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->optype(), output);
  }

  // optional int32 status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  // repeated string subscribeInfo = 4;
  for (int i = 0, n = this->subscribeinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscribeinfo(i).data(), static_cast<int>(this->subscribeinfo(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EventProto.subscribeInfo");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->subscribeinfo(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EventProto)
}

::google::protobuf::uint8* EventProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EventProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 rebalanceId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->rebalanceid(), target);
  }

  // optional int32 opType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->optype(), target);
  }

  // optional int32 status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  // repeated string subscribeInfo = 4;
  for (int i = 0, n = this->subscribeinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscribeinfo(i).data(), static_cast<int>(this->subscribeinfo(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "EventProto.subscribeInfo");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->subscribeinfo(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EventProto)
  return target;
}

size_t EventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EventProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string subscribeInfo = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->subscribeinfo_size());
  for (int i = 0, n = this->subscribeinfo_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subscribeinfo(i));
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional int64 rebalanceId = 1;
    if (has_rebalanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rebalanceid());
    }

    // optional int32 opType = 2;
    if (has_optype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->optype());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EventProto)
  GOOGLE_DCHECK_NE(&from, this);
  const EventProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EventProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EventProto)
    MergeFrom(*source);
  }
}

void EventProto::MergeFrom(const EventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EventProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscribeinfo_.MergeFrom(from.subscribeinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      rebalanceid_ = from.rebalanceid_;
    }
    if (cached_has_bits & 0x00000002u) {
      optype_ = from.optype_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EventProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventProto::CopyFrom(const EventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventProto::IsInitialized() const {
  return true;
}

void EventProto::Swap(EventProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventProto::InternalSwap(EventProto* other) {
  using std::swap;
  subscribeinfo_.InternalSwap(CastToBase(&other->subscribeinfo_));
  swap(rebalanceid_, other->rebalanceid_);
  swap(optype_, other->optype_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EventProto::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EnableBrokerFunInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnableBrokerFunInfo::kEnableConsumeAuthenticateFieldNumber;
const int EnableBrokerFunInfo::kEnableConsumeAuthorizeFieldNumber;
const int EnableBrokerFunInfo::kEnableProduceAuthenticateFieldNumber;
const int EnableBrokerFunInfo::kEnableProduceAuthorizeFieldNumber;
const int EnableBrokerFunInfo::kEnableVisitTokenCheckFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnableBrokerFunInfo::EnableBrokerFunInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_EnableBrokerFunInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnableBrokerFunInfo)
}
EnableBrokerFunInfo::EnableBrokerFunInfo(const EnableBrokerFunInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enableconsumeauthenticate_, &from.enableconsumeauthenticate_,
    static_cast<size_t>(reinterpret_cast<char*>(&enablevisittokencheck_) -
    reinterpret_cast<char*>(&enableconsumeauthenticate_)) + sizeof(enablevisittokencheck_));
  // @@protoc_insertion_point(copy_constructor:EnableBrokerFunInfo)
}

void EnableBrokerFunInfo::SharedCtor() {
  ::memset(&enableconsumeauthenticate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enablevisittokencheck_) -
      reinterpret_cast<char*>(&enableconsumeauthenticate_)) + sizeof(enablevisittokencheck_));
}

EnableBrokerFunInfo::~EnableBrokerFunInfo() {
  // @@protoc_insertion_point(destructor:EnableBrokerFunInfo)
  SharedDtor();
}

void EnableBrokerFunInfo::SharedDtor() {
}

void EnableBrokerFunInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EnableBrokerFunInfo::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EnableBrokerFunInfo& EnableBrokerFunInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_EnableBrokerFunInfo.base);
  return *internal_default_instance();
}


void EnableBrokerFunInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:EnableBrokerFunInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&enableconsumeauthenticate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enablevisittokencheck_) -
        reinterpret_cast<char*>(&enableconsumeauthenticate_)) + sizeof(enablevisittokencheck_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EnableBrokerFunInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EnableBrokerFunInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enableConsumeAuthenticate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_enableconsumeauthenticate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableconsumeauthenticate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool enableConsumeAuthorize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_enableconsumeauthorize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableconsumeauthorize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool enableProduceAuthenticate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_enableproduceauthenticate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableproduceauthenticate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool enableProduceAuthorize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_enableproduceauthorize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableproduceauthorize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enableVisitTokenCheck = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_enablevisittokencheck();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enablevisittokencheck_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EnableBrokerFunInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EnableBrokerFunInfo)
  return false;
#undef DO_
}

void EnableBrokerFunInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EnableBrokerFunInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enableConsumeAuthenticate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enableconsumeauthenticate(), output);
  }

  // required bool enableConsumeAuthorize = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enableconsumeauthorize(), output);
  }

  // required bool enableProduceAuthenticate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enableproduceauthenticate(), output);
  }

  // required bool enableProduceAuthorize = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enableproduceauthorize(), output);
  }

  // optional bool enableVisitTokenCheck = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enablevisittokencheck(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EnableBrokerFunInfo)
}

::google::protobuf::uint8* EnableBrokerFunInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EnableBrokerFunInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enableConsumeAuthenticate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enableconsumeauthenticate(), target);
  }

  // required bool enableConsumeAuthorize = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enableconsumeauthorize(), target);
  }

  // required bool enableProduceAuthenticate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enableproduceauthenticate(), target);
  }

  // required bool enableProduceAuthorize = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enableproduceauthorize(), target);
  }

  // optional bool enableVisitTokenCheck = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enablevisittokencheck(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnableBrokerFunInfo)
  return target;
}

size_t EnableBrokerFunInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EnableBrokerFunInfo)
  size_t total_size = 0;

  if (has_enableconsumeauthenticate()) {
    // required bool enableConsumeAuthenticate = 1;
    total_size += 1 + 1;
  }

  if (has_enableconsumeauthorize()) {
    // required bool enableConsumeAuthorize = 2;
    total_size += 1 + 1;
  }

  if (has_enableproduceauthenticate()) {
    // required bool enableProduceAuthenticate = 3;
    total_size += 1 + 1;
  }

  if (has_enableproduceauthorize()) {
    // required bool enableProduceAuthorize = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t EnableBrokerFunInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnableBrokerFunInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bool enableConsumeAuthenticate = 1;
    total_size += 1 + 1;

    // required bool enableConsumeAuthorize = 2;
    total_size += 1 + 1;

    // required bool enableProduceAuthenticate = 3;
    total_size += 1 + 1;

    // required bool enableProduceAuthorize = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool enableVisitTokenCheck = 5;
  if (has_enablevisittokencheck()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableBrokerFunInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnableBrokerFunInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EnableBrokerFunInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnableBrokerFunInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnableBrokerFunInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnableBrokerFunInfo)
    MergeFrom(*source);
  }
}

void EnableBrokerFunInfo::MergeFrom(const EnableBrokerFunInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnableBrokerFunInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      enableconsumeauthenticate_ = from.enableconsumeauthenticate_;
    }
    if (cached_has_bits & 0x00000002u) {
      enableconsumeauthorize_ = from.enableconsumeauthorize_;
    }
    if (cached_has_bits & 0x00000004u) {
      enableproduceauthenticate_ = from.enableproduceauthenticate_;
    }
    if (cached_has_bits & 0x00000008u) {
      enableproduceauthorize_ = from.enableproduceauthorize_;
    }
    if (cached_has_bits & 0x00000010u) {
      enablevisittokencheck_ = from.enablevisittokencheck_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EnableBrokerFunInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnableBrokerFunInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableBrokerFunInfo::CopyFrom(const EnableBrokerFunInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnableBrokerFunInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableBrokerFunInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void EnableBrokerFunInfo::Swap(EnableBrokerFunInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnableBrokerFunInfo::InternalSwap(EnableBrokerFunInfo* other) {
  using std::swap;
  swap(enableconsumeauthenticate_, other->enableconsumeauthenticate_);
  swap(enableconsumeauthorize_, other->enableconsumeauthorize_);
  swap(enableproduceauthenticate_, other->enableproduceauthenticate_);
  swap(enableproduceauthorize_, other->enableproduceauthorize_);
  swap(enablevisittokencheck_, other->enablevisittokencheck_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EnableBrokerFunInfo::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AuthenticateInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthenticateInfo::kUserNameFieldNumber;
const int AuthenticateInfo::kTimestampFieldNumber;
const int AuthenticateInfo::kNonceFieldNumber;
const int AuthenticateInfo::kOthParamsFieldNumber;
const int AuthenticateInfo::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthenticateInfo::AuthenticateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_AuthenticateInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthenticateInfo)
}
AuthenticateInfo::AuthenticateInfo(const AuthenticateInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  othparams_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_othparams()) {
    othparams_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.othparams_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&nonce_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(nonce_));
  // @@protoc_insertion_point(copy_constructor:AuthenticateInfo)
}

void AuthenticateInfo::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  othparams_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nonce_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(nonce_));
}

AuthenticateInfo::~AuthenticateInfo() {
  // @@protoc_insertion_point(destructor:AuthenticateInfo)
  SharedDtor();
}

void AuthenticateInfo::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  othparams_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthenticateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AuthenticateInfo::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AuthenticateInfo& AuthenticateInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_AuthenticateInfo.base);
  return *internal_default_instance();
}


void AuthenticateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AuthenticateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      othparams_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nonce_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(nonce_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthenticateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AuthenticateInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AuthenticateInfo.userName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 nonce = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_nonce();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nonce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string othParams = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_othparams()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->othparams().data(), static_cast<int>(this->othparams().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AuthenticateInfo.othParams");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string signature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), static_cast<int>(this->signature().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AuthenticateInfo.signature");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthenticateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthenticateInfo)
  return false;
#undef DO_
}

void AuthenticateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthenticateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AuthenticateInfo.userName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required int64 timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // required int32 nonce = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nonce(), output);
  }

  // required string othParams = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->othparams().data(), static_cast<int>(this->othparams().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AuthenticateInfo.othParams");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->othparams(), output);
  }

  // required string signature = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AuthenticateInfo.signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AuthenticateInfo)
}

::google::protobuf::uint8* AuthenticateInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AuthenticateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AuthenticateInfo.userName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required int64 timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // required int32 nonce = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nonce(), target);
  }

  // required string othParams = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->othparams().data(), static_cast<int>(this->othparams().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AuthenticateInfo.othParams");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->othparams(), target);
  }

  // required string signature = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), static_cast<int>(this->signature().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AuthenticateInfo.signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AuthenticateInfo)
  return target;
}

size_t AuthenticateInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AuthenticateInfo)
  size_t total_size = 0;

  if (has_username()) {
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_othparams()) {
    // required string othParams = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->othparams());
  }

  if (has_signature()) {
    // required string signature = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());
  }

  if (has_timestamp()) {
    // required int64 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  if (has_nonce()) {
    // required int32 nonce = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nonce());
  }

  return total_size;
}
size_t AuthenticateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AuthenticateInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string userName = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required string othParams = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->othparams());

    // required string signature = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signature());

    // required int64 timestamp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

    // required int32 nonce = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nonce());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AuthenticateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticateInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AuthenticateInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AuthenticateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AuthenticateInfo)
    MergeFrom(*source);
  }
}

void AuthenticateInfo::MergeFrom(const AuthenticateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AuthenticateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_othparams();
      othparams_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.othparams_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      nonce_ = from.nonce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AuthenticateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AuthenticateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticateInfo::CopyFrom(const AuthenticateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AuthenticateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void AuthenticateInfo::Swap(AuthenticateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateInfo::InternalSwap(AuthenticateInfo* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  othparams_.Swap(&other->othparams_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(nonce_, other->nonce_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AuthenticateInfo::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MasterCertificateInfo::InitAsDefaultInstance() {
  ::_MasterCertificateInfo_default_instance_._instance.get_mutable()->authinfo_ = const_cast< ::AuthenticateInfo*>(
      ::AuthenticateInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterCertificateInfo::kAuthInfoFieldNumber;
const int MasterCertificateInfo::kAuthorizedTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterCertificateInfo::MasterCertificateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_MasterCertificateInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MasterCertificateInfo)
}
MasterCertificateInfo::MasterCertificateInfo(const MasterCertificateInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  authorizedtoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authorizedtoken()) {
    authorizedtoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authorizedtoken_);
  }
  if (from.has_authinfo()) {
    authinfo_ = new ::AuthenticateInfo(*from.authinfo_);
  } else {
    authinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MasterCertificateInfo)
}

void MasterCertificateInfo::SharedCtor() {
  authorizedtoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authinfo_ = NULL;
}

MasterCertificateInfo::~MasterCertificateInfo() {
  // @@protoc_insertion_point(destructor:MasterCertificateInfo)
  SharedDtor();
}

void MasterCertificateInfo::SharedDtor() {
  authorizedtoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete authinfo_;
}

void MasterCertificateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MasterCertificateInfo::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MasterCertificateInfo& MasterCertificateInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_MasterCertificateInfo.base);
  return *internal_default_instance();
}


void MasterCertificateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MasterCertificateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      authorizedtoken_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(authinfo_ != NULL);
      authinfo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MasterCertificateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MasterCertificateInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AuthenticateInfo authInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string authorizedToken = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authorizedtoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authorizedtoken().data(), static_cast<int>(this->authorizedtoken().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MasterCertificateInfo.authorizedToken");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MasterCertificateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MasterCertificateInfo)
  return false;
#undef DO_
}

void MasterCertificateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MasterCertificateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .AuthenticateInfo authInfo = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_authinfo(), output);
  }

  // optional string authorizedToken = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authorizedtoken().data(), static_cast<int>(this->authorizedtoken().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MasterCertificateInfo.authorizedToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->authorizedtoken(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MasterCertificateInfo)
}

::google::protobuf::uint8* MasterCertificateInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MasterCertificateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .AuthenticateInfo authInfo = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_authinfo(), deterministic, target);
  }

  // optional string authorizedToken = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authorizedtoken().data(), static_cast<int>(this->authorizedtoken().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MasterCertificateInfo.authorizedToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authorizedtoken(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MasterCertificateInfo)
  return target;
}

size_t MasterCertificateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MasterCertificateInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string authorizedToken = 2;
    if (has_authorizedtoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authorizedtoken());
    }

    // optional .AuthenticateInfo authInfo = 1;
    if (has_authinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *authinfo_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MasterCertificateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MasterCertificateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MasterCertificateInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterCertificateInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MasterCertificateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MasterCertificateInfo)
    MergeFrom(*source);
  }
}

void MasterCertificateInfo::MergeFrom(const MasterCertificateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MasterCertificateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_authorizedtoken();
      authorizedtoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authorizedtoken_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_authinfo()->::AuthenticateInfo::MergeFrom(from.authinfo());
    }
  }
}

void MasterCertificateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MasterCertificateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterCertificateInfo::CopyFrom(const MasterCertificateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MasterCertificateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterCertificateInfo::IsInitialized() const {
  if (has_authinfo()) {
    if (!this->authinfo_->IsInitialized()) return false;
  }
  return true;
}

void MasterCertificateInfo::Swap(MasterCertificateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterCertificateInfo::InternalSwap(MasterCertificateInfo* other) {
  using std::swap;
  authorizedtoken_.Swap(&other->authorizedtoken_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(authinfo_, other->authinfo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MasterCertificateInfo::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MasterAuthorizedInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterAuthorizedInfo::kVisitAuthorizedTokenFieldNumber;
const int MasterAuthorizedInfo::kAuthAuthorizedTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterAuthorizedInfo::MasterAuthorizedInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_MasterAuthorizedInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MasterAuthorizedInfo)
}
MasterAuthorizedInfo::MasterAuthorizedInfo(const MasterAuthorizedInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  authauthorizedtoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authauthorizedtoken()) {
    authauthorizedtoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authauthorizedtoken_);
  }
  visitauthorizedtoken_ = from.visitauthorizedtoken_;
  // @@protoc_insertion_point(copy_constructor:MasterAuthorizedInfo)
}

void MasterAuthorizedInfo::SharedCtor() {
  authauthorizedtoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visitauthorizedtoken_ = GOOGLE_LONGLONG(0);
}

MasterAuthorizedInfo::~MasterAuthorizedInfo() {
  // @@protoc_insertion_point(destructor:MasterAuthorizedInfo)
  SharedDtor();
}

void MasterAuthorizedInfo::SharedDtor() {
  authauthorizedtoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MasterAuthorizedInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MasterAuthorizedInfo::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MasterAuthorizedInfo& MasterAuthorizedInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_MasterAuthorizedInfo.base);
  return *internal_default_instance();
}


void MasterAuthorizedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MasterAuthorizedInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    authauthorizedtoken_.ClearNonDefaultToEmptyNoArena();
  }
  visitauthorizedtoken_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MasterAuthorizedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MasterAuthorizedInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 visitAuthorizedToken = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_visitauthorizedtoken();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &visitauthorizedtoken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string authAuthorizedToken = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authauthorizedtoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authauthorizedtoken().data(), static_cast<int>(this->authauthorizedtoken().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MasterAuthorizedInfo.authAuthorizedToken");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MasterAuthorizedInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MasterAuthorizedInfo)
  return false;
#undef DO_
}

void MasterAuthorizedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MasterAuthorizedInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 visitAuthorizedToken = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->visitauthorizedtoken(), output);
  }

  // optional string authAuthorizedToken = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authauthorizedtoken().data(), static_cast<int>(this->authauthorizedtoken().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MasterAuthorizedInfo.authAuthorizedToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->authauthorizedtoken(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MasterAuthorizedInfo)
}

::google::protobuf::uint8* MasterAuthorizedInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MasterAuthorizedInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 visitAuthorizedToken = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->visitauthorizedtoken(), target);
  }

  // optional string authAuthorizedToken = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authauthorizedtoken().data(), static_cast<int>(this->authauthorizedtoken().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MasterAuthorizedInfo.authAuthorizedToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authauthorizedtoken(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MasterAuthorizedInfo)
  return target;
}

size_t MasterAuthorizedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MasterAuthorizedInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 visitAuthorizedToken = 1;
  if (has_visitauthorizedtoken()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->visitauthorizedtoken());
  }
  // optional string authAuthorizedToken = 2;
  if (has_authauthorizedtoken()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->authauthorizedtoken());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MasterAuthorizedInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MasterAuthorizedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MasterAuthorizedInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterAuthorizedInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MasterAuthorizedInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MasterAuthorizedInfo)
    MergeFrom(*source);
  }
}

void MasterAuthorizedInfo::MergeFrom(const MasterAuthorizedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MasterAuthorizedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_authauthorizedtoken();
      authauthorizedtoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authauthorizedtoken_);
    }
    if (cached_has_bits & 0x00000002u) {
      visitauthorizedtoken_ = from.visitauthorizedtoken_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MasterAuthorizedInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MasterAuthorizedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterAuthorizedInfo::CopyFrom(const MasterAuthorizedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MasterAuthorizedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterAuthorizedInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void MasterAuthorizedInfo::Swap(MasterAuthorizedInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterAuthorizedInfo::InternalSwap(MasterAuthorizedInfo* other) {
  using std::swap;
  authauthorizedtoken_.Swap(&other->authauthorizedtoken_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(visitauthorizedtoken_, other->visitauthorizedtoken_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MasterAuthorizedInfo::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MasterBrokerAuthorizedInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MasterBrokerAuthorizedInfo::kVisitAuthorizedTokenFieldNumber;
const int MasterBrokerAuthorizedInfo::kAuthAuthorizedTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MasterBrokerAuthorizedInfo::MasterBrokerAuthorizedInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_MasterBrokerAuthorizedInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MasterBrokerAuthorizedInfo)
}
MasterBrokerAuthorizedInfo::MasterBrokerAuthorizedInfo(const MasterBrokerAuthorizedInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  visitauthorizedtoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_visitauthorizedtoken()) {
    visitauthorizedtoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.visitauthorizedtoken_);
  }
  authauthorizedtoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_authauthorizedtoken()) {
    authauthorizedtoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authauthorizedtoken_);
  }
  // @@protoc_insertion_point(copy_constructor:MasterBrokerAuthorizedInfo)
}

void MasterBrokerAuthorizedInfo::SharedCtor() {
  visitauthorizedtoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authauthorizedtoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MasterBrokerAuthorizedInfo::~MasterBrokerAuthorizedInfo() {
  // @@protoc_insertion_point(destructor:MasterBrokerAuthorizedInfo)
  SharedDtor();
}

void MasterBrokerAuthorizedInfo::SharedDtor() {
  visitauthorizedtoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authauthorizedtoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MasterBrokerAuthorizedInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MasterBrokerAuthorizedInfo::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MasterBrokerAuthorizedInfo& MasterBrokerAuthorizedInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_MasterBrokerAuthorizedInfo.base);
  return *internal_default_instance();
}


void MasterBrokerAuthorizedInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:MasterBrokerAuthorizedInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      visitauthorizedtoken_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      authauthorizedtoken_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MasterBrokerAuthorizedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MasterBrokerAuthorizedInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string visitAuthorizedToken = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_visitauthorizedtoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->visitauthorizedtoken().data(), static_cast<int>(this->visitauthorizedtoken().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MasterBrokerAuthorizedInfo.visitAuthorizedToken");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string authAuthorizedToken = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authauthorizedtoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authauthorizedtoken().data(), static_cast<int>(this->authauthorizedtoken().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MasterBrokerAuthorizedInfo.authAuthorizedToken");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MasterBrokerAuthorizedInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MasterBrokerAuthorizedInfo)
  return false;
#undef DO_
}

void MasterBrokerAuthorizedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MasterBrokerAuthorizedInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string visitAuthorizedToken = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->visitauthorizedtoken().data(), static_cast<int>(this->visitauthorizedtoken().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MasterBrokerAuthorizedInfo.visitAuthorizedToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->visitauthorizedtoken(), output);
  }

  // optional string authAuthorizedToken = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authauthorizedtoken().data(), static_cast<int>(this->authauthorizedtoken().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MasterBrokerAuthorizedInfo.authAuthorizedToken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->authauthorizedtoken(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MasterBrokerAuthorizedInfo)
}

::google::protobuf::uint8* MasterBrokerAuthorizedInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MasterBrokerAuthorizedInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string visitAuthorizedToken = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->visitauthorizedtoken().data(), static_cast<int>(this->visitauthorizedtoken().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MasterBrokerAuthorizedInfo.visitAuthorizedToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->visitauthorizedtoken(), target);
  }

  // optional string authAuthorizedToken = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authauthorizedtoken().data(), static_cast<int>(this->authauthorizedtoken().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MasterBrokerAuthorizedInfo.authAuthorizedToken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authauthorizedtoken(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MasterBrokerAuthorizedInfo)
  return target;
}

size_t MasterBrokerAuthorizedInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MasterBrokerAuthorizedInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string visitAuthorizedToken = 1;
  if (has_visitauthorizedtoken()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->visitauthorizedtoken());
  }
  // optional string authAuthorizedToken = 2;
  if (has_authauthorizedtoken()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->authauthorizedtoken());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MasterBrokerAuthorizedInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MasterBrokerAuthorizedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MasterBrokerAuthorizedInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MasterBrokerAuthorizedInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MasterBrokerAuthorizedInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MasterBrokerAuthorizedInfo)
    MergeFrom(*source);
  }
}

void MasterBrokerAuthorizedInfo::MergeFrom(const MasterBrokerAuthorizedInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MasterBrokerAuthorizedInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_visitauthorizedtoken();
      visitauthorizedtoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.visitauthorizedtoken_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_authauthorizedtoken();
      authauthorizedtoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.authauthorizedtoken_);
    }
  }
}

void MasterBrokerAuthorizedInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MasterBrokerAuthorizedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MasterBrokerAuthorizedInfo::CopyFrom(const MasterBrokerAuthorizedInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MasterBrokerAuthorizedInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MasterBrokerAuthorizedInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MasterBrokerAuthorizedInfo::Swap(MasterBrokerAuthorizedInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MasterBrokerAuthorizedInfo::InternalSwap(MasterBrokerAuthorizedInfo* other) {
  using std::swap;
  visitauthorizedtoken_.Swap(&other->visitauthorizedtoken_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  authauthorizedtoken_.Swap(&other->authauthorizedtoken_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MasterBrokerAuthorizedInfo::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegisterRequestP2M::InitAsDefaultInstance() {
  ::_RegisterRequestP2M_default_instance_._instance.get_mutable()->authinfo_ = const_cast< ::MasterCertificateInfo*>(
      ::MasterCertificateInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterRequestP2M::kClientIdFieldNumber;
const int RegisterRequestP2M::kTopicListFieldNumber;
const int RegisterRequestP2M::kBrokerCheckSumFieldNumber;
const int RegisterRequestP2M::kHostNameFieldNumber;
const int RegisterRequestP2M::kAuthInfoFieldNumber;
const int RegisterRequestP2M::kJdkVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterRequestP2M::RegisterRequestP2M()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_RegisterRequestP2M.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterRequestP2M)
}
RegisterRequestP2M::RegisterRequestP2M(const RegisterRequestP2M& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      topiclist_(from.topiclist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  jdkversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_jdkversion()) {
    jdkversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jdkversion_);
  }
  if (from.has_authinfo()) {
    authinfo_ = new ::MasterCertificateInfo(*from.authinfo_);
  } else {
    authinfo_ = NULL;
  }
  brokerchecksum_ = from.brokerchecksum_;
  // @@protoc_insertion_point(copy_constructor:RegisterRequestP2M)
}

void RegisterRequestP2M::SharedCtor() {
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jdkversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&authinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brokerchecksum_) -
      reinterpret_cast<char*>(&authinfo_)) + sizeof(brokerchecksum_));
}

RegisterRequestP2M::~RegisterRequestP2M() {
  // @@protoc_insertion_point(destructor:RegisterRequestP2M)
  SharedDtor();
}

void RegisterRequestP2M::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jdkversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete authinfo_;
}

void RegisterRequestP2M::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegisterRequestP2M::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterRequestP2M& RegisterRequestP2M::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_RegisterRequestP2M.base);
  return *internal_default_instance();
}


void RegisterRequestP2M::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterRequestP2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topiclist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      clientid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      hostname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      jdkversion_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(authinfo_ != NULL);
      authinfo_->Clear();
    }
  }
  brokerchecksum_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegisterRequestP2M::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RegisterRequestP2M)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clientId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), static_cast<int>(this->clientid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestP2M.clientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string topicList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topiclist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topiclist(this->topiclist_size() - 1).data(),
            static_cast<int>(this->topiclist(this->topiclist_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestP2M.topicList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 brokerCheckSum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_brokerchecksum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &brokerchecksum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string hostName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestP2M.hostName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MasterCertificateInfo authInfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string jdkVersion = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jdkversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jdkversion().data(), static_cast<int>(this->jdkversion().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestP2M.jdkVersion");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RegisterRequestP2M)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RegisterRequestP2M)
  return false;
#undef DO_
}

void RegisterRequestP2M::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RegisterRequestP2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestP2M.clientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientid(), output);
  }

  // repeated string topicList = 2;
  for (int i = 0, n = this->topiclist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topiclist(i).data(), static_cast<int>(this->topiclist(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestP2M.topicList");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->topiclist(i), output);
  }

  // required int64 brokerCheckSum = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->brokerchecksum(), output);
  }

  // required string hostName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestP2M.hostName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hostname(), output);
  }

  // optional .MasterCertificateInfo authInfo = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_authinfo(), output);
  }

  // optional string jdkVersion = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jdkversion().data(), static_cast<int>(this->jdkversion().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestP2M.jdkVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->jdkversion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RegisterRequestP2M)
}

::google::protobuf::uint8* RegisterRequestP2M::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RegisterRequestP2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestP2M.clientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientid(), target);
  }

  // repeated string topicList = 2;
  for (int i = 0, n = this->topiclist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topiclist(i).data(), static_cast<int>(this->topiclist(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestP2M.topicList");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->topiclist(i), target);
  }

  // required int64 brokerCheckSum = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->brokerchecksum(), target);
  }

  // required string hostName = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestP2M.hostName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hostname(), target);
  }

  // optional .MasterCertificateInfo authInfo = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_authinfo(), deterministic, target);
  }

  // optional string jdkVersion = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jdkversion().data(), static_cast<int>(this->jdkversion().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestP2M.jdkVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->jdkversion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterRequestP2M)
  return target;
}

size_t RegisterRequestP2M::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RegisterRequestP2M)
  size_t total_size = 0;

  if (has_clientid()) {
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  if (has_hostname()) {
    // required string hostName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  if (has_brokerchecksum()) {
    // required int64 brokerCheckSum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->brokerchecksum());
  }

  return total_size;
}
size_t RegisterRequestP2M::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterRequestP2M)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());

    // required string hostName = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());

    // required int64 brokerCheckSum = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->brokerchecksum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string topicList = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->topiclist_size());
  for (int i = 0, n = this->topiclist_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topiclist(i));
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional string jdkVersion = 6;
    if (has_jdkversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jdkversion());
    }

    // optional .MasterCertificateInfo authInfo = 5;
    if (has_authinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *authinfo_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterRequestP2M::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterRequestP2M)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterRequestP2M* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterRequestP2M>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterRequestP2M)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterRequestP2M)
    MergeFrom(*source);
  }
}

void RegisterRequestP2M::MergeFrom(const RegisterRequestP2M& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterRequestP2M)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topiclist_.MergeFrom(from.topiclist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hostname();
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_jdkversion();
      jdkversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jdkversion_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_authinfo()->::MasterCertificateInfo::MergeFrom(from.authinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      brokerchecksum_ = from.brokerchecksum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegisterRequestP2M::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterRequestP2M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequestP2M::CopyFrom(const RegisterRequestP2M& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterRequestP2M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequestP2M::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  if (has_authinfo()) {
    if (!this->authinfo_->IsInitialized()) return false;
  }
  return true;
}

void RegisterRequestP2M::Swap(RegisterRequestP2M* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterRequestP2M::InternalSwap(RegisterRequestP2M* other) {
  using std::swap;
  topiclist_.InternalSwap(CastToBase(&other->topiclist_));
  clientid_.Swap(&other->clientid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostname_.Swap(&other->hostname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  jdkversion_.Swap(&other->jdkversion_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(authinfo_, other->authinfo_);
  swap(brokerchecksum_, other->brokerchecksum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegisterRequestP2M::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegisterResponseM2P::InitAsDefaultInstance() {
  ::_RegisterResponseM2P_default_instance_._instance.get_mutable()->authorizedinfo_ = const_cast< ::MasterAuthorizedInfo*>(
      ::MasterAuthorizedInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterResponseM2P::kSuccessFieldNumber;
const int RegisterResponseM2P::kErrCodeFieldNumber;
const int RegisterResponseM2P::kErrMsgFieldNumber;
const int RegisterResponseM2P::kBrokerCheckSumFieldNumber;
const int RegisterResponseM2P::kBrokerInfosFieldNumber;
const int RegisterResponseM2P::kAuthorizedInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterResponseM2P::RegisterResponseM2P()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_RegisterResponseM2P.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterResponseM2P)
}
RegisterResponseM2P::RegisterResponseM2P(const RegisterResponseM2P& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      brokerinfos_(from.brokerinfos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errmsg()) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.has_authorizedinfo()) {
    authorizedinfo_ = new ::MasterAuthorizedInfo(*from.authorizedinfo_);
  } else {
    authorizedinfo_ = NULL;
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&brokerchecksum_) -
    reinterpret_cast<char*>(&success_)) + sizeof(brokerchecksum_));
  // @@protoc_insertion_point(copy_constructor:RegisterResponseM2P)
}

void RegisterResponseM2P::SharedCtor() {
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&authorizedinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brokerchecksum_) -
      reinterpret_cast<char*>(&authorizedinfo_)) + sizeof(brokerchecksum_));
}

RegisterResponseM2P::~RegisterResponseM2P() {
  // @@protoc_insertion_point(destructor:RegisterResponseM2P)
  SharedDtor();
}

void RegisterResponseM2P::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete authorizedinfo_;
}

void RegisterResponseM2P::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegisterResponseM2P::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterResponseM2P& RegisterResponseM2P::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_RegisterResponseM2P.base);
  return *internal_default_instance();
}


void RegisterResponseM2P::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterResponseM2P)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brokerinfos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      errmsg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(authorizedinfo_ != NULL);
      authorizedinfo_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&success_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brokerchecksum_) -
        reinterpret_cast<char*>(&success_)) + sizeof(brokerchecksum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegisterResponseM2P::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RegisterResponseM2P)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 errCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_errcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string errMsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterResponseM2P.errMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 brokerCheckSum = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_brokerchecksum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &brokerchecksum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string brokerInfos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_brokerinfos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brokerinfos(this->brokerinfos_size() - 1).data(),
            static_cast<int>(this->brokerinfos(this->brokerinfos_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterResponseM2P.brokerInfos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MasterAuthorizedInfo authorizedInfo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authorizedinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RegisterResponseM2P)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RegisterResponseM2P)
  return false;
#undef DO_
}

void RegisterResponseM2P::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RegisterResponseM2P)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errcode(), output);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterResponseM2P.errMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // required int64 brokerCheckSum = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->brokerchecksum(), output);
  }

  // repeated string brokerInfos = 5;
  for (int i = 0, n = this->brokerinfos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokerinfos(i).data(), static_cast<int>(this->brokerinfos(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterResponseM2P.brokerInfos");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->brokerinfos(i), output);
  }

  // optional .MasterAuthorizedInfo authorizedInfo = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_authorizedinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RegisterResponseM2P)
}

::google::protobuf::uint8* RegisterResponseM2P::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RegisterResponseM2P)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errcode(), target);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterResponseM2P.errMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // required int64 brokerCheckSum = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->brokerchecksum(), target);
  }

  // repeated string brokerInfos = 5;
  for (int i = 0, n = this->brokerinfos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokerinfos(i).data(), static_cast<int>(this->brokerinfos(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterResponseM2P.brokerInfos");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->brokerinfos(i), target);
  }

  // optional .MasterAuthorizedInfo authorizedInfo = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_authorizedinfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterResponseM2P)
  return target;
}

size_t RegisterResponseM2P::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RegisterResponseM2P)
  size_t total_size = 0;

  if (has_errmsg()) {
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  if (has_success()) {
    // required bool success = 1;
    total_size += 1 + 1;
  }

  if (has_errcode()) {
    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  if (has_brokerchecksum()) {
    // required int64 brokerCheckSum = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->brokerchecksum());
  }

  return total_size;
}
size_t RegisterResponseM2P::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterResponseM2P)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());

    // required bool success = 1;
    total_size += 1 + 1;

    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());

    // required int64 brokerCheckSum = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->brokerchecksum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string brokerInfos = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->brokerinfos_size());
  for (int i = 0, n = this->brokerinfos_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->brokerinfos(i));
  }

  // optional .MasterAuthorizedInfo authorizedInfo = 6;
  if (has_authorizedinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *authorizedinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterResponseM2P::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterResponseM2P)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterResponseM2P* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterResponseM2P>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterResponseM2P)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterResponseM2P)
    MergeFrom(*source);
  }
}

void RegisterResponseM2P::MergeFrom(const RegisterResponseM2P& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterResponseM2P)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  brokerinfos_.MergeFrom(from.brokerinfos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errmsg();
      errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_authorizedinfo()->::MasterAuthorizedInfo::MergeFrom(from.authorizedinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000008u) {
      errcode_ = from.errcode_;
    }
    if (cached_has_bits & 0x00000010u) {
      brokerchecksum_ = from.brokerchecksum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegisterResponseM2P::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterResponseM2P)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterResponseM2P::CopyFrom(const RegisterResponseM2P& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterResponseM2P)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponseM2P::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;
  if (has_authorizedinfo()) {
    if (!this->authorizedinfo_->IsInitialized()) return false;
  }
  return true;
}

void RegisterResponseM2P::Swap(RegisterResponseM2P* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterResponseM2P::InternalSwap(RegisterResponseM2P* other) {
  using std::swap;
  brokerinfos_.InternalSwap(CastToBase(&other->brokerinfos_));
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(authorizedinfo_, other->authorizedinfo_);
  swap(success_, other->success_);
  swap(errcode_, other->errcode_);
  swap(brokerchecksum_, other->brokerchecksum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegisterResponseM2P::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeartRequestP2M::InitAsDefaultInstance() {
  ::_HeartRequestP2M_default_instance_._instance.get_mutable()->authinfo_ = const_cast< ::MasterCertificateInfo*>(
      ::MasterCertificateInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartRequestP2M::kClientIdFieldNumber;
const int HeartRequestP2M::kBrokerCheckSumFieldNumber;
const int HeartRequestP2M::kHostNameFieldNumber;
const int HeartRequestP2M::kTopicListFieldNumber;
const int HeartRequestP2M::kAuthInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartRequestP2M::HeartRequestP2M()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_HeartRequestP2M.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HeartRequestP2M)
}
HeartRequestP2M::HeartRequestP2M(const HeartRequestP2M& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      topiclist_(from.topiclist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.has_authinfo()) {
    authinfo_ = new ::MasterCertificateInfo(*from.authinfo_);
  } else {
    authinfo_ = NULL;
  }
  brokerchecksum_ = from.brokerchecksum_;
  // @@protoc_insertion_point(copy_constructor:HeartRequestP2M)
}

void HeartRequestP2M::SharedCtor() {
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&authinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brokerchecksum_) -
      reinterpret_cast<char*>(&authinfo_)) + sizeof(brokerchecksum_));
}

HeartRequestP2M::~HeartRequestP2M() {
  // @@protoc_insertion_point(destructor:HeartRequestP2M)
  SharedDtor();
}

void HeartRequestP2M::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete authinfo_;
}

void HeartRequestP2M::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HeartRequestP2M::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeartRequestP2M& HeartRequestP2M::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_HeartRequestP2M.base);
  return *internal_default_instance();
}


void HeartRequestP2M::Clear() {
// @@protoc_insertion_point(message_clear_start:HeartRequestP2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topiclist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      clientid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      hostname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(authinfo_ != NULL);
      authinfo_->Clear();
    }
  }
  brokerchecksum_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartRequestP2M::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HeartRequestP2M)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clientId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), static_cast<int>(this->clientid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HeartRequestP2M.clientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 brokerCheckSum = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_brokerchecksum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &brokerchecksum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string hostName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HeartRequestP2M.hostName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string topicList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topiclist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topiclist(this->topiclist_size() - 1).data(),
            static_cast<int>(this->topiclist(this->topiclist_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HeartRequestP2M.topicList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MasterCertificateInfo authInfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HeartRequestP2M)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HeartRequestP2M)
  return false;
#undef DO_
}

void HeartRequestP2M::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HeartRequestP2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartRequestP2M.clientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientid(), output);
  }

  // required int64 brokerCheckSum = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->brokerchecksum(), output);
  }

  // required string hostName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartRequestP2M.hostName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hostname(), output);
  }

  // repeated string topicList = 4;
  for (int i = 0, n = this->topiclist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topiclist(i).data(), static_cast<int>(this->topiclist(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartRequestP2M.topicList");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->topiclist(i), output);
  }

  // optional .MasterCertificateInfo authInfo = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_authinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HeartRequestP2M)
}

::google::protobuf::uint8* HeartRequestP2M::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HeartRequestP2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartRequestP2M.clientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientid(), target);
  }

  // required int64 brokerCheckSum = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->brokerchecksum(), target);
  }

  // required string hostName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartRequestP2M.hostName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hostname(), target);
  }

  // repeated string topicList = 4;
  for (int i = 0, n = this->topiclist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topiclist(i).data(), static_cast<int>(this->topiclist(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartRequestP2M.topicList");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->topiclist(i), target);
  }

  // optional .MasterCertificateInfo authInfo = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_authinfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeartRequestP2M)
  return target;
}

size_t HeartRequestP2M::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HeartRequestP2M)
  size_t total_size = 0;

  if (has_clientid()) {
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  if (has_hostname()) {
    // required string hostName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  if (has_brokerchecksum()) {
    // required int64 brokerCheckSum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->brokerchecksum());
  }

  return total_size;
}
size_t HeartRequestP2M::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HeartRequestP2M)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());

    // required string hostName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());

    // required int64 brokerCheckSum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->brokerchecksum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string topicList = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->topiclist_size());
  for (int i = 0, n = this->topiclist_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topiclist(i));
  }

  // optional .MasterCertificateInfo authInfo = 5;
  if (has_authinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *authinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartRequestP2M::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HeartRequestP2M)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartRequestP2M* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartRequestP2M>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HeartRequestP2M)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HeartRequestP2M)
    MergeFrom(*source);
  }
}

void HeartRequestP2M::MergeFrom(const HeartRequestP2M& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HeartRequestP2M)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topiclist_.MergeFrom(from.topiclist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hostname();
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_authinfo()->::MasterCertificateInfo::MergeFrom(from.authinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      brokerchecksum_ = from.brokerchecksum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeartRequestP2M::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HeartRequestP2M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartRequestP2M::CopyFrom(const HeartRequestP2M& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HeartRequestP2M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartRequestP2M::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  if (has_authinfo()) {
    if (!this->authinfo_->IsInitialized()) return false;
  }
  return true;
}

void HeartRequestP2M::Swap(HeartRequestP2M* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartRequestP2M::InternalSwap(HeartRequestP2M* other) {
  using std::swap;
  topiclist_.InternalSwap(CastToBase(&other->topiclist_));
  clientid_.Swap(&other->clientid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostname_.Swap(&other->hostname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(authinfo_, other->authinfo_);
  swap(brokerchecksum_, other->brokerchecksum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HeartRequestP2M::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeartResponseM2P::InitAsDefaultInstance() {
  ::_HeartResponseM2P_default_instance_._instance.get_mutable()->authorizedinfo_ = const_cast< ::MasterAuthorizedInfo*>(
      ::MasterAuthorizedInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartResponseM2P::kSuccessFieldNumber;
const int HeartResponseM2P::kErrCodeFieldNumber;
const int HeartResponseM2P::kErrMsgFieldNumber;
const int HeartResponseM2P::kBrokerCheckSumFieldNumber;
const int HeartResponseM2P::kTopicInfosFieldNumber;
const int HeartResponseM2P::kBrokerInfosFieldNumber;
const int HeartResponseM2P::kRequireAuthFieldNumber;
const int HeartResponseM2P::kAuthorizedInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartResponseM2P::HeartResponseM2P()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_HeartResponseM2P.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HeartResponseM2P)
}
HeartResponseM2P::HeartResponseM2P(const HeartResponseM2P& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      topicinfos_(from.topicinfos_),
      brokerinfos_(from.brokerinfos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errmsg()) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.has_authorizedinfo()) {
    authorizedinfo_ = new ::MasterAuthorizedInfo(*from.authorizedinfo_);
  } else {
    authorizedinfo_ = NULL;
  }
  ::memcpy(&errcode_, &from.errcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&brokerchecksum_) -
    reinterpret_cast<char*>(&errcode_)) + sizeof(brokerchecksum_));
  // @@protoc_insertion_point(copy_constructor:HeartResponseM2P)
}

void HeartResponseM2P::SharedCtor() {
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&authorizedinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brokerchecksum_) -
      reinterpret_cast<char*>(&authorizedinfo_)) + sizeof(brokerchecksum_));
}

HeartResponseM2P::~HeartResponseM2P() {
  // @@protoc_insertion_point(destructor:HeartResponseM2P)
  SharedDtor();
}

void HeartResponseM2P::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete authorizedinfo_;
}

void HeartResponseM2P::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HeartResponseM2P::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeartResponseM2P& HeartResponseM2P::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_HeartResponseM2P.base);
  return *internal_default_instance();
}


void HeartResponseM2P::Clear() {
// @@protoc_insertion_point(message_clear_start:HeartResponseM2P)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topicinfos_.Clear();
  brokerinfos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      errmsg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(authorizedinfo_ != NULL);
      authorizedinfo_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&errcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&brokerchecksum_) -
        reinterpret_cast<char*>(&errcode_)) + sizeof(brokerchecksum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartResponseM2P::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HeartResponseM2P)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 errCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_errcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string errMsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HeartResponseM2P.errMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 brokerCheckSum = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_brokerchecksum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &brokerchecksum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string topicInfos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topicinfos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topicinfos(this->topicinfos_size() - 1).data(),
            static_cast<int>(this->topicinfos(this->topicinfos_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HeartResponseM2P.topicInfos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string brokerInfos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_brokerinfos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->brokerinfos(this->brokerinfos_size() - 1).data(),
            static_cast<int>(this->brokerinfos(this->brokerinfos_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HeartResponseM2P.brokerInfos");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requireAuth = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_requireauth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requireauth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MasterAuthorizedInfo authorizedInfo = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authorizedinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HeartResponseM2P)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HeartResponseM2P)
  return false;
#undef DO_
}

void HeartResponseM2P::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HeartResponseM2P)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errcode(), output);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartResponseM2P.errMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // required int64 brokerCheckSum = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->brokerchecksum(), output);
  }

  // repeated string topicInfos = 5;
  for (int i = 0, n = this->topicinfos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topicinfos(i).data(), static_cast<int>(this->topicinfos(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartResponseM2P.topicInfos");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->topicinfos(i), output);
  }

  // repeated string brokerInfos = 6;
  for (int i = 0, n = this->brokerinfos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokerinfos(i).data(), static_cast<int>(this->brokerinfos(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartResponseM2P.brokerInfos");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->brokerinfos(i), output);
  }

  // optional bool requireAuth = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->requireauth(), output);
  }

  // optional .MasterAuthorizedInfo authorizedInfo = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_authorizedinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HeartResponseM2P)
}

::google::protobuf::uint8* HeartResponseM2P::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HeartResponseM2P)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errcode(), target);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartResponseM2P.errMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // required int64 brokerCheckSum = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->brokerchecksum(), target);
  }

  // repeated string topicInfos = 5;
  for (int i = 0, n = this->topicinfos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topicinfos(i).data(), static_cast<int>(this->topicinfos(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartResponseM2P.topicInfos");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->topicinfos(i), target);
  }

  // repeated string brokerInfos = 6;
  for (int i = 0, n = this->brokerinfos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->brokerinfos(i).data(), static_cast<int>(this->brokerinfos(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartResponseM2P.brokerInfos");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->brokerinfos(i), target);
  }

  // optional bool requireAuth = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->requireauth(), target);
  }

  // optional .MasterAuthorizedInfo authorizedInfo = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_authorizedinfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeartResponseM2P)
  return target;
}

size_t HeartResponseM2P::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HeartResponseM2P)
  size_t total_size = 0;

  if (has_errmsg()) {
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  if (has_errcode()) {
    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  if (has_success()) {
    // required bool success = 1;
    total_size += 1 + 1;
  }

  if (has_brokerchecksum()) {
    // required int64 brokerCheckSum = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->brokerchecksum());
  }

  return total_size;
}
size_t HeartResponseM2P::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HeartResponseM2P)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000002d) ^ 0x0000002d) == 0) {  // All required fields are present.
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());

    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());

    // required bool success = 1;
    total_size += 1 + 1;

    // required int64 brokerCheckSum = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->brokerchecksum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string topicInfos = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->topicinfos_size());
  for (int i = 0, n = this->topicinfos_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topicinfos(i));
  }

  // repeated string brokerInfos = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->brokerinfos_size());
  for (int i = 0, n = this->brokerinfos_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->brokerinfos(i));
  }

  // optional .MasterAuthorizedInfo authorizedInfo = 8;
  if (has_authorizedinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *authorizedinfo_);
  }

  // optional bool requireAuth = 7;
  if (has_requireauth()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartResponseM2P::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HeartResponseM2P)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartResponseM2P* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartResponseM2P>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HeartResponseM2P)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HeartResponseM2P)
    MergeFrom(*source);
  }
}

void HeartResponseM2P::MergeFrom(const HeartResponseM2P& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HeartResponseM2P)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topicinfos_.MergeFrom(from.topicinfos_);
  brokerinfos_.MergeFrom(from.brokerinfos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errmsg();
      errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_authorizedinfo()->::MasterAuthorizedInfo::MergeFrom(from.authorizedinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      errcode_ = from.errcode_;
    }
    if (cached_has_bits & 0x00000008u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000010u) {
      requireauth_ = from.requireauth_;
    }
    if (cached_has_bits & 0x00000020u) {
      brokerchecksum_ = from.brokerchecksum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeartResponseM2P::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HeartResponseM2P)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartResponseM2P::CopyFrom(const HeartResponseM2P& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HeartResponseM2P)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartResponseM2P::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000002d) != 0x0000002d) return false;
  if (has_authorizedinfo()) {
    if (!this->authorizedinfo_->IsInitialized()) return false;
  }
  return true;
}

void HeartResponseM2P::Swap(HeartResponseM2P* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartResponseM2P::InternalSwap(HeartResponseM2P* other) {
  using std::swap;
  topicinfos_.InternalSwap(CastToBase(&other->topicinfos_));
  brokerinfos_.InternalSwap(CastToBase(&other->brokerinfos_));
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(authorizedinfo_, other->authorizedinfo_);
  swap(errcode_, other->errcode_);
  swap(success_, other->success_);
  swap(requireauth_, other->requireauth_);
  swap(brokerchecksum_, other->brokerchecksum_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HeartResponseM2P::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CloseRequestP2M::InitAsDefaultInstance() {
  ::_CloseRequestP2M_default_instance_._instance.get_mutable()->authinfo_ = const_cast< ::MasterCertificateInfo*>(
      ::MasterCertificateInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseRequestP2M::kClientIdFieldNumber;
const int CloseRequestP2M::kAuthInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseRequestP2M::CloseRequestP2M()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_CloseRequestP2M.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CloseRequestP2M)
}
CloseRequestP2M::CloseRequestP2M(const CloseRequestP2M& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  if (from.has_authinfo()) {
    authinfo_ = new ::MasterCertificateInfo(*from.authinfo_);
  } else {
    authinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CloseRequestP2M)
}

void CloseRequestP2M::SharedCtor() {
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authinfo_ = NULL;
}

CloseRequestP2M::~CloseRequestP2M() {
  // @@protoc_insertion_point(destructor:CloseRequestP2M)
  SharedDtor();
}

void CloseRequestP2M::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete authinfo_;
}

void CloseRequestP2M::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CloseRequestP2M::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloseRequestP2M& CloseRequestP2M::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_CloseRequestP2M.base);
  return *internal_default_instance();
}


void CloseRequestP2M::Clear() {
// @@protoc_insertion_point(message_clear_start:CloseRequestP2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      clientid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(authinfo_ != NULL);
      authinfo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CloseRequestP2M::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CloseRequestP2M)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clientId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), static_cast<int>(this->clientid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CloseRequestP2M.clientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MasterCertificateInfo authInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CloseRequestP2M)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CloseRequestP2M)
  return false;
#undef DO_
}

void CloseRequestP2M::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CloseRequestP2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CloseRequestP2M.clientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientid(), output);
  }

  // optional .MasterCertificateInfo authInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_authinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CloseRequestP2M)
}

::google::protobuf::uint8* CloseRequestP2M::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CloseRequestP2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CloseRequestP2M.clientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientid(), target);
  }

  // optional .MasterCertificateInfo authInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_authinfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CloseRequestP2M)
  return target;
}

size_t CloseRequestP2M::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CloseRequestP2M)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string clientId = 1;
  if (has_clientid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }
  // optional .MasterCertificateInfo authInfo = 2;
  if (has_authinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *authinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseRequestP2M::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CloseRequestP2M)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseRequestP2M* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseRequestP2M>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CloseRequestP2M)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CloseRequestP2M)
    MergeFrom(*source);
  }
}

void CloseRequestP2M::MergeFrom(const CloseRequestP2M& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CloseRequestP2M)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_authinfo()->::MasterCertificateInfo::MergeFrom(from.authinfo());
    }
  }
}

void CloseRequestP2M::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CloseRequestP2M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseRequestP2M::CopyFrom(const CloseRequestP2M& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CloseRequestP2M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseRequestP2M::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_authinfo()) {
    if (!this->authinfo_->IsInitialized()) return false;
  }
  return true;
}

void CloseRequestP2M::Swap(CloseRequestP2M* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseRequestP2M::InternalSwap(CloseRequestP2M* other) {
  using std::swap;
  clientid_.Swap(&other->clientid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(authinfo_, other->authinfo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CloseRequestP2M::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CloseResponseM2P::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseResponseM2P::kSuccessFieldNumber;
const int CloseResponseM2P::kErrCodeFieldNumber;
const int CloseResponseM2P::kErrMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseResponseM2P::CloseResponseM2P()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_CloseResponseM2P.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CloseResponseM2P)
}
CloseResponseM2P::CloseResponseM2P(const CloseResponseM2P& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errmsg()) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&errcode_) -
    reinterpret_cast<char*>(&success_)) + sizeof(errcode_));
  // @@protoc_insertion_point(copy_constructor:CloseResponseM2P)
}

void CloseResponseM2P::SharedCtor() {
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&success_)) + sizeof(errcode_));
}

CloseResponseM2P::~CloseResponseM2P() {
  // @@protoc_insertion_point(destructor:CloseResponseM2P)
  SharedDtor();
}

void CloseResponseM2P::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CloseResponseM2P::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CloseResponseM2P::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloseResponseM2P& CloseResponseM2P::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_CloseResponseM2P.base);
  return *internal_default_instance();
}


void CloseResponseM2P::Clear() {
// @@protoc_insertion_point(message_clear_start:CloseResponseM2P)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errmsg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&success_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&errcode_) -
        reinterpret_cast<char*>(&success_)) + sizeof(errcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CloseResponseM2P::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CloseResponseM2P)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 errCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_errcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string errMsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CloseResponseM2P.errMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CloseResponseM2P)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CloseResponseM2P)
  return false;
#undef DO_
}

void CloseResponseM2P::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CloseResponseM2P)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errcode(), output);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CloseResponseM2P.errMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CloseResponseM2P)
}

::google::protobuf::uint8* CloseResponseM2P::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CloseResponseM2P)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errcode(), target);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CloseResponseM2P.errMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CloseResponseM2P)
  return target;
}

size_t CloseResponseM2P::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CloseResponseM2P)
  size_t total_size = 0;

  if (has_errmsg()) {
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  if (has_success()) {
    // required bool success = 1;
    total_size += 1 + 1;
  }

  if (has_errcode()) {
    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  return total_size;
}
size_t CloseResponseM2P::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CloseResponseM2P)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());

    // required bool success = 1;
    total_size += 1 + 1;

    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseResponseM2P::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CloseResponseM2P)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseResponseM2P* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseResponseM2P>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CloseResponseM2P)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CloseResponseM2P)
    MergeFrom(*source);
  }
}

void CloseResponseM2P::MergeFrom(const CloseResponseM2P& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CloseResponseM2P)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errmsg();
      errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000004u) {
      errcode_ = from.errcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseResponseM2P::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CloseResponseM2P)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseResponseM2P::CopyFrom(const CloseResponseM2P& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CloseResponseM2P)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseResponseM2P::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void CloseResponseM2P::Swap(CloseResponseM2P* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseResponseM2P::InternalSwap(CloseResponseM2P* other) {
  using std::swap;
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  swap(errcode_, other->errcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CloseResponseM2P::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegisterRequestC2M::InitAsDefaultInstance() {
  ::_RegisterRequestC2M_default_instance_._instance.get_mutable()->authinfo_ = const_cast< ::MasterCertificateInfo*>(
      ::MasterCertificateInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterRequestC2M::kClientIdFieldNumber;
const int RegisterRequestC2M::kGroupNameFieldNumber;
const int RegisterRequestC2M::kHostNameFieldNumber;
const int RegisterRequestC2M::kTopicListFieldNumber;
const int RegisterRequestC2M::kSubscribeInfoFieldNumber;
const int RegisterRequestC2M::kTopicConditionFieldNumber;
const int RegisterRequestC2M::kRequireBoundFieldNumber;
const int RegisterRequestC2M::kSessionTimeFieldNumber;
const int RegisterRequestC2M::kSessionKeyFieldNumber;
const int RegisterRequestC2M::kTotalCountFieldNumber;
const int RegisterRequestC2M::kRequiredPartitionFieldNumber;
const int RegisterRequestC2M::kNotAllocatedFieldNumber;
const int RegisterRequestC2M::kSelectBigFieldNumber;
const int RegisterRequestC2M::kGroupFlowCheckIdFieldNumber;
const int RegisterRequestC2M::kDefFlowCheckIdFieldNumber;
const int RegisterRequestC2M::kSsdStoreIdFieldNumber;
const int RegisterRequestC2M::kQryPriorityIdFieldNumber;
const int RegisterRequestC2M::kAuthInfoFieldNumber;
const int RegisterRequestC2M::kJdkVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterRequestC2M::RegisterRequestC2M()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_RegisterRequestC2M.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterRequestC2M)
}
RegisterRequestC2M::RegisterRequestC2M(const RegisterRequestC2M& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      topiclist_(from.topiclist_),
      subscribeinfo_(from.subscribeinfo_),
      topiccondition_(from.topiccondition_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupname()) {
    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sessionkey()) {
    sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
  }
  requiredpartition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_requiredpartition()) {
    requiredpartition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requiredpartition_);
  }
  jdkversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_jdkversion()) {
    jdkversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jdkversion_);
  }
  if (from.has_authinfo()) {
    authinfo_ = new ::MasterCertificateInfo(*from.authinfo_);
  } else {
    authinfo_ = NULL;
  }
  ::memcpy(&sessiontime_, &from.sessiontime_,
    static_cast<size_t>(reinterpret_cast<char*>(&qrypriorityid_) -
    reinterpret_cast<char*>(&sessiontime_)) + sizeof(qrypriorityid_));
  // @@protoc_insertion_point(copy_constructor:RegisterRequestC2M)
}

void RegisterRequestC2M::SharedCtor() {
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requiredpartition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jdkversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&authinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qrypriorityid_) -
      reinterpret_cast<char*>(&authinfo_)) + sizeof(qrypriorityid_));
}

RegisterRequestC2M::~RegisterRequestC2M() {
  // @@protoc_insertion_point(destructor:RegisterRequestC2M)
  SharedDtor();
}

void RegisterRequestC2M::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sessionkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requiredpartition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jdkversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete authinfo_;
}

void RegisterRequestC2M::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegisterRequestC2M::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterRequestC2M& RegisterRequestC2M::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_RegisterRequestC2M.base);
  return *internal_default_instance();
}


void RegisterRequestC2M::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterRequestC2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topiclist_.Clear();
  subscribeinfo_.Clear();
  topiccondition_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      clientid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      groupname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      hostname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      sessionkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      requiredpartition_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      jdkversion_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(authinfo_ != NULL);
      authinfo_->Clear();
    }
  }
  sessiontime_ = GOOGLE_LONGLONG(0);
  if (cached_has_bits & 65280u) {
    ::memset(&totalcount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&qrypriorityid_) -
        reinterpret_cast<char*>(&totalcount_)) + sizeof(qrypriorityid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegisterRequestC2M::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RegisterRequestC2M)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clientId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), static_cast<int>(this->clientid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestC2M.clientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), static_cast<int>(this->groupname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestC2M.groupName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string hostName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestC2M.hostName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string topicList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topiclist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topiclist(this->topiclist_size() - 1).data(),
            static_cast<int>(this->topiclist(this->topiclist_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestC2M.topicList");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string subscribeInfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subscribeinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subscribeinfo(this->subscribeinfo_size() - 1).data(),
            static_cast<int>(this->subscribeinfo(this->subscribeinfo_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestC2M.subscribeInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string topicCondition = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topiccondition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topiccondition(this->topiccondition_size() - 1).data(),
            static_cast<int>(this->topiccondition(this->topiccondition_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestC2M.topicCondition");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requireBound = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_requirebound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requirebound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sessionTime = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_sessiontime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sessiontime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sessionKey = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sessionkey().data(), static_cast<int>(this->sessionkey().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestC2M.sessionKey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 totalCount = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_totalcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string requiredPartition = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requiredpartition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requiredpartition().data(), static_cast<int>(this->requiredpartition().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestC2M.requiredPartition");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool notAllocated = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_notallocated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notallocated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool selectBig = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_selectbig();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selectbig_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 groupFlowCheckId = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_groupflowcheckid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupflowcheckid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 defFlowCheckId = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_defflowcheckid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &defflowcheckid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ssdStoreId = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_ssdstoreid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ssdstoreid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 qryPriorityId = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_qrypriorityid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qrypriorityid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MasterCertificateInfo authInfo = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string jdkVersion = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jdkversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jdkversion().data(), static_cast<int>(this->jdkversion().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterRequestC2M.jdkVersion");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RegisterRequestC2M)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RegisterRequestC2M)
  return false;
#undef DO_
}

void RegisterRequestC2M::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RegisterRequestC2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.clientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientid(), output);
  }

  // required string groupName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.groupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupname(), output);
  }

  // required string hostName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.hostName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hostname(), output);
  }

  // repeated string topicList = 4;
  for (int i = 0, n = this->topiclist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topiclist(i).data(), static_cast<int>(this->topiclist(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.topicList");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->topiclist(i), output);
  }

  // repeated string subscribeInfo = 5;
  for (int i = 0, n = this->subscribeinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscribeinfo(i).data(), static_cast<int>(this->subscribeinfo(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.subscribeInfo");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->subscribeinfo(i), output);
  }

  // repeated string topicCondition = 6;
  for (int i = 0, n = this->topiccondition_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topiccondition(i).data(), static_cast<int>(this->topiccondition(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.topicCondition");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->topiccondition(i), output);
  }

  // optional bool requireBound = 7;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->requirebound(), output);
  }

  // optional int64 sessionTime = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->sessiontime(), output);
  }

  // optional string sessionKey = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionkey().data(), static_cast<int>(this->sessionkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.sessionKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sessionkey(), output);
  }

  // optional int32 totalCount = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->totalcount(), output);
  }

  // optional string requiredPartition = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requiredpartition().data(), static_cast<int>(this->requiredpartition().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.requiredPartition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->requiredpartition(), output);
  }

  // optional bool notAllocated = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->notallocated(), output);
  }

  // optional bool selectBig = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->selectbig(), output);
  }

  // optional int64 groupFlowCheckId = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->groupflowcheckid(), output);
  }

  // optional int64 defFlowCheckId = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->defflowcheckid(), output);
  }

  // optional int64 ssdStoreId = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->ssdstoreid(), output);
  }

  // optional int32 qryPriorityId = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->qrypriorityid(), output);
  }

  // optional .MasterCertificateInfo authInfo = 18;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_authinfo(), output);
  }

  // optional string jdkVersion = 19;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jdkversion().data(), static_cast<int>(this->jdkversion().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.jdkVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->jdkversion(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RegisterRequestC2M)
}

::google::protobuf::uint8* RegisterRequestC2M::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RegisterRequestC2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.clientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientid(), target);
  }

  // required string groupName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.groupName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }

  // required string hostName = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.hostName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hostname(), target);
  }

  // repeated string topicList = 4;
  for (int i = 0, n = this->topiclist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topiclist(i).data(), static_cast<int>(this->topiclist(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.topicList");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->topiclist(i), target);
  }

  // repeated string subscribeInfo = 5;
  for (int i = 0, n = this->subscribeinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscribeinfo(i).data(), static_cast<int>(this->subscribeinfo(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.subscribeInfo");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->subscribeinfo(i), target);
  }

  // repeated string topicCondition = 6;
  for (int i = 0, n = this->topiccondition_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topiccondition(i).data(), static_cast<int>(this->topiccondition(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.topicCondition");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->topiccondition(i), target);
  }

  // optional bool requireBound = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->requirebound(), target);
  }

  // optional int64 sessionTime = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->sessiontime(), target);
  }

  // optional string sessionKey = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sessionkey().data(), static_cast<int>(this->sessionkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.sessionKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sessionkey(), target);
  }

  // optional int32 totalCount = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->totalcount(), target);
  }

  // optional string requiredPartition = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requiredpartition().data(), static_cast<int>(this->requiredpartition().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.requiredPartition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->requiredpartition(), target);
  }

  // optional bool notAllocated = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->notallocated(), target);
  }

  // optional bool selectBig = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->selectbig(), target);
  }

  // optional int64 groupFlowCheckId = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->groupflowcheckid(), target);
  }

  // optional int64 defFlowCheckId = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->defflowcheckid(), target);
  }

  // optional int64 ssdStoreId = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->ssdstoreid(), target);
  }

  // optional int32 qryPriorityId = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->qrypriorityid(), target);
  }

  // optional .MasterCertificateInfo authInfo = 18;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_authinfo(), deterministic, target);
  }

  // optional string jdkVersion = 19;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jdkversion().data(), static_cast<int>(this->jdkversion().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterRequestC2M.jdkVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->jdkversion(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterRequestC2M)
  return target;
}

size_t RegisterRequestC2M::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RegisterRequestC2M)
  size_t total_size = 0;

  if (has_clientid()) {
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  if (has_groupname()) {
    // required string groupName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());
  }

  if (has_hostname()) {
    // required string hostName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  return total_size;
}
size_t RegisterRequestC2M::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterRequestC2M)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());

    // required string groupName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());

    // required string hostName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string topicList = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->topiclist_size());
  for (int i = 0, n = this->topiclist_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topiclist(i));
  }

  // repeated string subscribeInfo = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->subscribeinfo_size());
  for (int i = 0, n = this->subscribeinfo_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subscribeinfo(i));
  }

  // repeated string topicCondition = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->topiccondition_size());
  for (int i = 0, n = this->topiccondition_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topiccondition(i));
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional string sessionKey = 9;
    if (has_sessionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sessionkey());
    }

    // optional string requiredPartition = 11;
    if (has_requiredpartition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requiredpartition());
    }

    // optional string jdkVersion = 19;
    if (has_jdkversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jdkversion());
    }

    // optional .MasterCertificateInfo authInfo = 18;
    if (has_authinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *authinfo_);
    }

    // optional int64 sessionTime = 8;
    if (has_sessiontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sessiontime());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 totalCount = 10;
    if (has_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

    // optional bool requireBound = 7;
    if (has_requirebound()) {
      total_size += 1 + 1;
    }

    // optional bool notAllocated = 12;
    if (has_notallocated()) {
      total_size += 1 + 1;
    }

    // optional bool selectBig = 13;
    if (has_selectbig()) {
      total_size += 1 + 1;
    }

    // optional int64 groupFlowCheckId = 14;
    if (has_groupflowcheckid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->groupflowcheckid());
    }

    // optional int64 defFlowCheckId = 15;
    if (has_defflowcheckid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->defflowcheckid());
    }

    // optional int64 ssdStoreId = 16;
    if (has_ssdstoreid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ssdstoreid());
    }

    // optional int32 qryPriorityId = 17;
    if (has_qrypriorityid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qrypriorityid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterRequestC2M::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterRequestC2M)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterRequestC2M* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterRequestC2M>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterRequestC2M)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterRequestC2M)
    MergeFrom(*source);
  }
}

void RegisterRequestC2M::MergeFrom(const RegisterRequestC2M& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterRequestC2M)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topiclist_.MergeFrom(from.topiclist_);
  subscribeinfo_.MergeFrom(from.subscribeinfo_);
  topiccondition_.MergeFrom(from.topiccondition_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupname();
      groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_hostname();
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_sessionkey();
      sessionkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessionkey_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_requiredpartition();
      requiredpartition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requiredpartition_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_jdkversion();
      jdkversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.jdkversion_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_authinfo()->::MasterCertificateInfo::MergeFrom(from.authinfo());
    }
    if (cached_has_bits & 0x00000080u) {
      sessiontime_ = from.sessiontime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      totalcount_ = from.totalcount_;
    }
    if (cached_has_bits & 0x00000200u) {
      requirebound_ = from.requirebound_;
    }
    if (cached_has_bits & 0x00000400u) {
      notallocated_ = from.notallocated_;
    }
    if (cached_has_bits & 0x00000800u) {
      selectbig_ = from.selectbig_;
    }
    if (cached_has_bits & 0x00001000u) {
      groupflowcheckid_ = from.groupflowcheckid_;
    }
    if (cached_has_bits & 0x00002000u) {
      defflowcheckid_ = from.defflowcheckid_;
    }
    if (cached_has_bits & 0x00004000u) {
      ssdstoreid_ = from.ssdstoreid_;
    }
    if (cached_has_bits & 0x00008000u) {
      qrypriorityid_ = from.qrypriorityid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegisterRequestC2M::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterRequestC2M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequestC2M::CopyFrom(const RegisterRequestC2M& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterRequestC2M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequestC2M::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_authinfo()) {
    if (!this->authinfo_->IsInitialized()) return false;
  }
  return true;
}

void RegisterRequestC2M::Swap(RegisterRequestC2M* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterRequestC2M::InternalSwap(RegisterRequestC2M* other) {
  using std::swap;
  topiclist_.InternalSwap(CastToBase(&other->topiclist_));
  subscribeinfo_.InternalSwap(CastToBase(&other->subscribeinfo_));
  topiccondition_.InternalSwap(CastToBase(&other->topiccondition_));
  clientid_.Swap(&other->clientid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  groupname_.Swap(&other->groupname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hostname_.Swap(&other->hostname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sessionkey_.Swap(&other->sessionkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  requiredpartition_.Swap(&other->requiredpartition_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  jdkversion_.Swap(&other->jdkversion_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(authinfo_, other->authinfo_);
  swap(sessiontime_, other->sessiontime_);
  swap(totalcount_, other->totalcount_);
  swap(requirebound_, other->requirebound_);
  swap(notallocated_, other->notallocated_);
  swap(selectbig_, other->selectbig_);
  swap(groupflowcheckid_, other->groupflowcheckid_);
  swap(defflowcheckid_, other->defflowcheckid_);
  swap(ssdstoreid_, other->ssdstoreid_);
  swap(qrypriorityid_, other->qrypriorityid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegisterRequestC2M::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RegisterResponseM2C::InitAsDefaultInstance() {
  ::_RegisterResponseM2C_default_instance_._instance.get_mutable()->authorizedinfo_ = const_cast< ::MasterAuthorizedInfo*>(
      ::MasterAuthorizedInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterResponseM2C::kSuccessFieldNumber;
const int RegisterResponseM2C::kErrCodeFieldNumber;
const int RegisterResponseM2C::kErrMsgFieldNumber;
const int RegisterResponseM2C::kTopicInfoFieldNumber;
const int RegisterResponseM2C::kNotAllocatedFieldNumber;
const int RegisterResponseM2C::kDefFlowCheckIdFieldNumber;
const int RegisterResponseM2C::kDefFlowControlInfoFieldNumber;
const int RegisterResponseM2C::kGroupFlowCheckIdFieldNumber;
const int RegisterResponseM2C::kGroupFlowControlInfoFieldNumber;
const int RegisterResponseM2C::kSsdStoreIdFieldNumber;
const int RegisterResponseM2C::kQryPriorityIdFieldNumber;
const int RegisterResponseM2C::kAuthorizedInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterResponseM2C::RegisterResponseM2C()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_RegisterResponseM2C.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegisterResponseM2C)
}
RegisterResponseM2C::RegisterResponseM2C(const RegisterResponseM2C& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      topicinfo_(from.topicinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errmsg()) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  defflowcontrolinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_defflowcontrolinfo()) {
    defflowcontrolinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.defflowcontrolinfo_);
  }
  groupflowcontrolinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupflowcontrolinfo()) {
    groupflowcontrolinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupflowcontrolinfo_);
  }
  if (from.has_authorizedinfo()) {
    authorizedinfo_ = new ::MasterAuthorizedInfo(*from.authorizedinfo_);
  } else {
    authorizedinfo_ = NULL;
  }
  ::memcpy(&errcode_, &from.errcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&qrypriorityid_) -
    reinterpret_cast<char*>(&errcode_)) + sizeof(qrypriorityid_));
  // @@protoc_insertion_point(copy_constructor:RegisterResponseM2C)
}

void RegisterResponseM2C::SharedCtor() {
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defflowcontrolinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupflowcontrolinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&authorizedinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qrypriorityid_) -
      reinterpret_cast<char*>(&authorizedinfo_)) + sizeof(qrypriorityid_));
}

RegisterResponseM2C::~RegisterResponseM2C() {
  // @@protoc_insertion_point(destructor:RegisterResponseM2C)
  SharedDtor();
}

void RegisterResponseM2C::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defflowcontrolinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupflowcontrolinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete authorizedinfo_;
}

void RegisterResponseM2C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RegisterResponseM2C::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RegisterResponseM2C& RegisterResponseM2C::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_RegisterResponseM2C.base);
  return *internal_default_instance();
}


void RegisterResponseM2C::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterResponseM2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topicinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      errmsg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      defflowcontrolinfo_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      groupflowcontrolinfo_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(authorizedinfo_ != NULL);
      authorizedinfo_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&errcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&defflowcheckid_) -
        reinterpret_cast<char*>(&errcode_)) + sizeof(defflowcheckid_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&groupflowcheckid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&qrypriorityid_) -
        reinterpret_cast<char*>(&groupflowcheckid_)) + sizeof(qrypriorityid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RegisterResponseM2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RegisterResponseM2C)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 errCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_errcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string errMsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterResponseM2C.errMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string topicInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_topicinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topicinfo(this->topicinfo_size() - 1).data(),
            static_cast<int>(this->topicinfo(this->topicinfo_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterResponseM2C.topicInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool notAllocated = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_notallocated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notallocated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 defFlowCheckId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_defflowcheckid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &defflowcheckid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string defFlowControlInfo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defflowcontrolinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->defflowcontrolinfo().data(), static_cast<int>(this->defflowcontrolinfo().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterResponseM2C.defFlowControlInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 groupFlowCheckId = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_groupflowcheckid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupflowcheckid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string groupFlowControlInfo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupflowcontrolinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupflowcontrolinfo().data(), static_cast<int>(this->groupflowcontrolinfo().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RegisterResponseM2C.groupFlowControlInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ssdStoreId = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_ssdstoreid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ssdstoreid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 qryPriorityId = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_qrypriorityid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qrypriorityid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MasterAuthorizedInfo authorizedInfo = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authorizedinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RegisterResponseM2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RegisterResponseM2C)
  return false;
#undef DO_
}

void RegisterResponseM2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RegisterResponseM2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errcode(), output);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterResponseM2C.errMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // repeated string topicInfo = 4;
  for (int i = 0, n = this->topicinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topicinfo(i).data(), static_cast<int>(this->topicinfo(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterResponseM2C.topicInfo");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->topicinfo(i), output);
  }

  // optional bool notAllocated = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->notallocated(), output);
  }

  // optional int64 defFlowCheckId = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->defflowcheckid(), output);
  }

  // optional string defFlowControlInfo = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defflowcontrolinfo().data(), static_cast<int>(this->defflowcontrolinfo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterResponseM2C.defFlowControlInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->defflowcontrolinfo(), output);
  }

  // optional int64 groupFlowCheckId = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->groupflowcheckid(), output);
  }

  // optional string groupFlowControlInfo = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupflowcontrolinfo().data(), static_cast<int>(this->groupflowcontrolinfo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterResponseM2C.groupFlowControlInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->groupflowcontrolinfo(), output);
  }

  // optional int64 ssdStoreId = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->ssdstoreid(), output);
  }

  // optional int32 qryPriorityId = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->qrypriorityid(), output);
  }

  // optional .MasterAuthorizedInfo authorizedInfo = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_authorizedinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RegisterResponseM2C)
}

::google::protobuf::uint8* RegisterResponseM2C::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RegisterResponseM2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errcode(), target);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterResponseM2C.errMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // repeated string topicInfo = 4;
  for (int i = 0, n = this->topicinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topicinfo(i).data(), static_cast<int>(this->topicinfo(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterResponseM2C.topicInfo");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->topicinfo(i), target);
  }

  // optional bool notAllocated = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->notallocated(), target);
  }

  // optional int64 defFlowCheckId = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->defflowcheckid(), target);
  }

  // optional string defFlowControlInfo = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defflowcontrolinfo().data(), static_cast<int>(this->defflowcontrolinfo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterResponseM2C.defFlowControlInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->defflowcontrolinfo(), target);
  }

  // optional int64 groupFlowCheckId = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->groupflowcheckid(), target);
  }

  // optional string groupFlowControlInfo = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupflowcontrolinfo().data(), static_cast<int>(this->groupflowcontrolinfo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RegisterResponseM2C.groupFlowControlInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->groupflowcontrolinfo(), target);
  }

  // optional int64 ssdStoreId = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->ssdstoreid(), target);
  }

  // optional int32 qryPriorityId = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->qrypriorityid(), target);
  }

  // optional .MasterAuthorizedInfo authorizedInfo = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_authorizedinfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterResponseM2C)
  return target;
}

size_t RegisterResponseM2C::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RegisterResponseM2C)
  size_t total_size = 0;

  if (has_errmsg()) {
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  if (has_errcode()) {
    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  if (has_success()) {
    // required bool success = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t RegisterResponseM2C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterResponseM2C)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000031) ^ 0x00000031) == 0) {  // All required fields are present.
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());

    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());

    // required bool success = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string topicInfo = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->topicinfo_size());
  for (int i = 0, n = this->topicinfo_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->topicinfo(i));
  }

  if (_has_bits_[0 / 32] & 14u) {
    // optional string defFlowControlInfo = 7;
    if (has_defflowcontrolinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defflowcontrolinfo());
    }

    // optional string groupFlowControlInfo = 9;
    if (has_groupflowcontrolinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupflowcontrolinfo());
    }

    // optional .MasterAuthorizedInfo authorizedInfo = 12;
    if (has_authorizedinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *authorizedinfo_);
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional bool notAllocated = 5;
    if (has_notallocated()) {
      total_size += 1 + 1;
    }

    // optional int64 defFlowCheckId = 6;
    if (has_defflowcheckid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->defflowcheckid());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int64 groupFlowCheckId = 8;
    if (has_groupflowcheckid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->groupflowcheckid());
    }

    // optional int64 ssdStoreId = 10;
    if (has_ssdstoreid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ssdstoreid());
    }

    // optional int32 qryPriorityId = 11;
    if (has_qrypriorityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qrypriorityid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterResponseM2C::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RegisterResponseM2C)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterResponseM2C* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterResponseM2C>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RegisterResponseM2C)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RegisterResponseM2C)
    MergeFrom(*source);
  }
}

void RegisterResponseM2C::MergeFrom(const RegisterResponseM2C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RegisterResponseM2C)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topicinfo_.MergeFrom(from.topicinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errmsg();
      errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_defflowcontrolinfo();
      defflowcontrolinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.defflowcontrolinfo_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_groupflowcontrolinfo();
      groupflowcontrolinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupflowcontrolinfo_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_authorizedinfo()->::MasterAuthorizedInfo::MergeFrom(from.authorizedinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      errcode_ = from.errcode_;
    }
    if (cached_has_bits & 0x00000020u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000040u) {
      notallocated_ = from.notallocated_;
    }
    if (cached_has_bits & 0x00000080u) {
      defflowcheckid_ = from.defflowcheckid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      groupflowcheckid_ = from.groupflowcheckid_;
    }
    if (cached_has_bits & 0x00000200u) {
      ssdstoreid_ = from.ssdstoreid_;
    }
    if (cached_has_bits & 0x00000400u) {
      qrypriorityid_ = from.qrypriorityid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegisterResponseM2C::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RegisterResponseM2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterResponseM2C::CopyFrom(const RegisterResponseM2C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterResponseM2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponseM2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000031) != 0x00000031) return false;
  if (has_authorizedinfo()) {
    if (!this->authorizedinfo_->IsInitialized()) return false;
  }
  return true;
}

void RegisterResponseM2C::Swap(RegisterResponseM2C* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterResponseM2C::InternalSwap(RegisterResponseM2C* other) {
  using std::swap;
  topicinfo_.InternalSwap(CastToBase(&other->topicinfo_));
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  defflowcontrolinfo_.Swap(&other->defflowcontrolinfo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  groupflowcontrolinfo_.Swap(&other->groupflowcontrolinfo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(authorizedinfo_, other->authorizedinfo_);
  swap(errcode_, other->errcode_);
  swap(success_, other->success_);
  swap(notallocated_, other->notallocated_);
  swap(defflowcheckid_, other->defflowcheckid_);
  swap(groupflowcheckid_, other->groupflowcheckid_);
  swap(ssdstoreid_, other->ssdstoreid_);
  swap(qrypriorityid_, other->qrypriorityid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RegisterResponseM2C::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeartRequestC2M::InitAsDefaultInstance() {
  ::_HeartRequestC2M_default_instance_._instance.get_mutable()->event_ = const_cast< ::EventProto*>(
      ::EventProto::internal_default_instance());
  ::_HeartRequestC2M_default_instance_._instance.get_mutable()->authinfo_ = const_cast< ::MasterCertificateInfo*>(
      ::MasterCertificateInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartRequestC2M::kClientIdFieldNumber;
const int HeartRequestC2M::kGroupNameFieldNumber;
const int HeartRequestC2M::kSubscribeInfoFieldNumber;
const int HeartRequestC2M::kReportSubscribeInfoFieldNumber;
const int HeartRequestC2M::kEventFieldNumber;
const int HeartRequestC2M::kDefFlowCheckIdFieldNumber;
const int HeartRequestC2M::kGroupFlowCheckIdFieldNumber;
const int HeartRequestC2M::kSsdStoreIdFieldNumber;
const int HeartRequestC2M::kQryPriorityIdFieldNumber;
const int HeartRequestC2M::kAuthInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartRequestC2M::HeartRequestC2M()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_HeartRequestC2M.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HeartRequestC2M)
}
HeartRequestC2M::HeartRequestC2M(const HeartRequestC2M& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      subscribeinfo_(from.subscribeinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupname()) {
    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  if (from.has_event()) {
    event_ = new ::EventProto(*from.event_);
  } else {
    event_ = NULL;
  }
  if (from.has_authinfo()) {
    authinfo_ = new ::MasterCertificateInfo(*from.authinfo_);
  } else {
    authinfo_ = NULL;
  }
  ::memcpy(&defflowcheckid_, &from.defflowcheckid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ssdstoreid_) -
    reinterpret_cast<char*>(&defflowcheckid_)) + sizeof(ssdstoreid_));
  // @@protoc_insertion_point(copy_constructor:HeartRequestC2M)
}

void HeartRequestC2M::SharedCtor() {
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ssdstoreid_) -
      reinterpret_cast<char*>(&event_)) + sizeof(ssdstoreid_));
}

HeartRequestC2M::~HeartRequestC2M() {
  // @@protoc_insertion_point(destructor:HeartRequestC2M)
  SharedDtor();
}

void HeartRequestC2M::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete event_;
  if (this != internal_default_instance()) delete authinfo_;
}

void HeartRequestC2M::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HeartRequestC2M::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeartRequestC2M& HeartRequestC2M::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_HeartRequestC2M.base);
  return *internal_default_instance();
}


void HeartRequestC2M::Clear() {
// @@protoc_insertion_point(message_clear_start:HeartRequestC2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscribeinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      clientid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      groupname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(event_ != NULL);
      event_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(authinfo_ != NULL);
      authinfo_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&defflowcheckid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&groupflowcheckid_) -
        reinterpret_cast<char*>(&defflowcheckid_)) + sizeof(groupflowcheckid_));
  }
  ssdstoreid_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartRequestC2M::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HeartRequestC2M)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clientId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), static_cast<int>(this->clientid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HeartRequestC2M.clientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), static_cast<int>(this->groupname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HeartRequestC2M.groupName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string subscribeInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subscribeinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subscribeinfo(this->subscribeinfo_size() - 1).data(),
            static_cast<int>(this->subscribeinfo(this->subscribeinfo_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HeartRequestC2M.subscribeInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool reportSubscribeInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_reportsubscribeinfo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reportsubscribeinfo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EventProto event = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 defFlowCheckId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_defflowcheckid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &defflowcheckid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 groupFlowCheckId = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_groupflowcheckid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupflowcheckid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ssdStoreId = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_ssdstoreid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ssdstoreid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 qryPriorityId = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_qrypriorityid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qrypriorityid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MasterCertificateInfo authInfo = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HeartRequestC2M)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HeartRequestC2M)
  return false;
#undef DO_
}

void HeartRequestC2M::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HeartRequestC2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartRequestC2M.clientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientid(), output);
  }

  // required string groupName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartRequestC2M.groupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupname(), output);
  }

  // repeated string subscribeInfo = 3;
  for (int i = 0, n = this->subscribeinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscribeinfo(i).data(), static_cast<int>(this->subscribeinfo(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartRequestC2M.subscribeInfo");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->subscribeinfo(i), output);
  }

  // required bool reportSubscribeInfo = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reportsubscribeinfo(), output);
  }

  // optional .EventProto event = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_event(), output);
  }

  // optional int64 defFlowCheckId = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->defflowcheckid(), output);
  }

  // optional int64 groupFlowCheckId = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->groupflowcheckid(), output);
  }

  // optional int64 ssdStoreId = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->ssdstoreid(), output);
  }

  // optional int32 qryPriorityId = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->qrypriorityid(), output);
  }

  // optional .MasterCertificateInfo authInfo = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_authinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HeartRequestC2M)
}

::google::protobuf::uint8* HeartRequestC2M::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HeartRequestC2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartRequestC2M.clientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientid(), target);
  }

  // required string groupName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartRequestC2M.groupName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }

  // repeated string subscribeInfo = 3;
  for (int i = 0, n = this->subscribeinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subscribeinfo(i).data(), static_cast<int>(this->subscribeinfo(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartRequestC2M.subscribeInfo");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->subscribeinfo(i), target);
  }

  // required bool reportSubscribeInfo = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->reportsubscribeinfo(), target);
  }

  // optional .EventProto event = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_event(), deterministic, target);
  }

  // optional int64 defFlowCheckId = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->defflowcheckid(), target);
  }

  // optional int64 groupFlowCheckId = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->groupflowcheckid(), target);
  }

  // optional int64 ssdStoreId = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->ssdstoreid(), target);
  }

  // optional int32 qryPriorityId = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->qrypriorityid(), target);
  }

  // optional .MasterCertificateInfo authInfo = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_authinfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeartRequestC2M)
  return target;
}

size_t HeartRequestC2M::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HeartRequestC2M)
  size_t total_size = 0;

  if (has_clientid()) {
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  if (has_groupname()) {
    // required string groupName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());
  }

  if (has_reportsubscribeinfo()) {
    // required bool reportSubscribeInfo = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t HeartRequestC2M::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HeartRequestC2M)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000023) ^ 0x00000023) == 0) {  // All required fields are present.
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());

    // required string groupName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());

    // required bool reportSubscribeInfo = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string subscribeInfo = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->subscribeinfo_size());
  for (int i = 0, n = this->subscribeinfo_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subscribeinfo(i));
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional .EventProto event = 5;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_);
    }

    // optional .MasterCertificateInfo authInfo = 10;
    if (has_authinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *authinfo_);
    }

    // optional int64 defFlowCheckId = 6;
    if (has_defflowcheckid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->defflowcheckid());
    }

  }
  if (_has_bits_[0 / 32] & 192u) {
    // optional int32 qryPriorityId = 9;
    if (has_qrypriorityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qrypriorityid());
    }

    // optional int64 groupFlowCheckId = 7;
    if (has_groupflowcheckid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->groupflowcheckid());
    }

  }
  // optional int64 ssdStoreId = 8;
  if (has_ssdstoreid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ssdstoreid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartRequestC2M::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HeartRequestC2M)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartRequestC2M* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartRequestC2M>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HeartRequestC2M)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HeartRequestC2M)
    MergeFrom(*source);
  }
}

void HeartRequestC2M::MergeFrom(const HeartRequestC2M& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HeartRequestC2M)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscribeinfo_.MergeFrom(from.subscribeinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupname();
      groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_event()->::EventProto::MergeFrom(from.event());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_authinfo()->::MasterCertificateInfo::MergeFrom(from.authinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      defflowcheckid_ = from.defflowcheckid_;
    }
    if (cached_has_bits & 0x00000020u) {
      reportsubscribeinfo_ = from.reportsubscribeinfo_;
    }
    if (cached_has_bits & 0x00000040u) {
      qrypriorityid_ = from.qrypriorityid_;
    }
    if (cached_has_bits & 0x00000080u) {
      groupflowcheckid_ = from.groupflowcheckid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_ssdstoreid(from.ssdstoreid());
  }
}

void HeartRequestC2M::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HeartRequestC2M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartRequestC2M::CopyFrom(const HeartRequestC2M& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HeartRequestC2M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartRequestC2M::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000023) != 0x00000023) return false;
  if (has_authinfo()) {
    if (!this->authinfo_->IsInitialized()) return false;
  }
  return true;
}

void HeartRequestC2M::Swap(HeartRequestC2M* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartRequestC2M::InternalSwap(HeartRequestC2M* other) {
  using std::swap;
  subscribeinfo_.InternalSwap(CastToBase(&other->subscribeinfo_));
  clientid_.Swap(&other->clientid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  groupname_.Swap(&other->groupname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_, other->event_);
  swap(authinfo_, other->authinfo_);
  swap(defflowcheckid_, other->defflowcheckid_);
  swap(reportsubscribeinfo_, other->reportsubscribeinfo_);
  swap(qrypriorityid_, other->qrypriorityid_);
  swap(groupflowcheckid_, other->groupflowcheckid_);
  swap(ssdstoreid_, other->ssdstoreid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HeartRequestC2M::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HeartResponseM2C::InitAsDefaultInstance() {
  ::_HeartResponseM2C_default_instance_._instance.get_mutable()->event_ = const_cast< ::EventProto*>(
      ::EventProto::internal_default_instance());
  ::_HeartResponseM2C_default_instance_._instance.get_mutable()->authorizedinfo_ = const_cast< ::MasterAuthorizedInfo*>(
      ::MasterAuthorizedInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartResponseM2C::kSuccessFieldNumber;
const int HeartResponseM2C::kErrCodeFieldNumber;
const int HeartResponseM2C::kErrMsgFieldNumber;
const int HeartResponseM2C::kEventFieldNumber;
const int HeartResponseM2C::kNotAllocatedFieldNumber;
const int HeartResponseM2C::kDefFlowCheckIdFieldNumber;
const int HeartResponseM2C::kDefFlowControlInfoFieldNumber;
const int HeartResponseM2C::kGroupFlowCheckIdFieldNumber;
const int HeartResponseM2C::kGroupFlowControlInfoFieldNumber;
const int HeartResponseM2C::kSsdStoreIdFieldNumber;
const int HeartResponseM2C::kQryPriorityIdFieldNumber;
const int HeartResponseM2C::kRequireAuthFieldNumber;
const int HeartResponseM2C::kAuthorizedInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartResponseM2C::HeartResponseM2C()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_HeartResponseM2C.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HeartResponseM2C)
}
HeartResponseM2C::HeartResponseM2C(const HeartResponseM2C& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errmsg()) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  defflowcontrolinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_defflowcontrolinfo()) {
    defflowcontrolinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.defflowcontrolinfo_);
  }
  groupflowcontrolinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupflowcontrolinfo()) {
    groupflowcontrolinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupflowcontrolinfo_);
  }
  if (from.has_event()) {
    event_ = new ::EventProto(*from.event_);
  } else {
    event_ = NULL;
  }
  if (from.has_authorizedinfo()) {
    authorizedinfo_ = new ::MasterAuthorizedInfo(*from.authorizedinfo_);
  } else {
    authorizedinfo_ = NULL;
  }
  ::memcpy(&errcode_, &from.errcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&qrypriorityid_) -
    reinterpret_cast<char*>(&errcode_)) + sizeof(qrypriorityid_));
  // @@protoc_insertion_point(copy_constructor:HeartResponseM2C)
}

void HeartResponseM2C::SharedCtor() {
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defflowcontrolinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupflowcontrolinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qrypriorityid_) -
      reinterpret_cast<char*>(&event_)) + sizeof(qrypriorityid_));
}

HeartResponseM2C::~HeartResponseM2C() {
  // @@protoc_insertion_point(destructor:HeartResponseM2C)
  SharedDtor();
}

void HeartResponseM2C::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defflowcontrolinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupflowcontrolinfo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete event_;
  if (this != internal_default_instance()) delete authorizedinfo_;
}

void HeartResponseM2C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* HeartResponseM2C::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeartResponseM2C& HeartResponseM2C::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_HeartResponseM2C.base);
  return *internal_default_instance();
}


void HeartResponseM2C::Clear() {
// @@protoc_insertion_point(message_clear_start:HeartResponseM2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      errmsg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      defflowcontrolinfo_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      groupflowcontrolinfo_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(event_ != NULL);
      event_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(authorizedinfo_ != NULL);
      authorizedinfo_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&errcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&notallocated_) -
        reinterpret_cast<char*>(&errcode_)) + sizeof(notallocated_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&requireauth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&qrypriorityid_) -
        reinterpret_cast<char*>(&requireauth_)) + sizeof(qrypriorityid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartResponseM2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HeartResponseM2C)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 errCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_errcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string errMsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HeartResponseM2C.errMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EventProto event = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool notAllocated = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_notallocated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notallocated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 defFlowCheckId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_defflowcheckid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &defflowcheckid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string defFlowControlInfo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defflowcontrolinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->defflowcontrolinfo().data(), static_cast<int>(this->defflowcontrolinfo().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HeartResponseM2C.defFlowControlInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 groupFlowCheckId = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_groupflowcheckid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupflowcheckid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string groupFlowControlInfo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupflowcontrolinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupflowcontrolinfo().data(), static_cast<int>(this->groupflowcontrolinfo().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "HeartResponseM2C.groupFlowControlInfo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ssdStoreId = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_ssdstoreid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ssdstoreid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 qryPriorityId = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_qrypriorityid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qrypriorityid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requireAuth = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_requireauth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requireauth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MasterAuthorizedInfo authorizedInfo = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authorizedinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HeartResponseM2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HeartResponseM2C)
  return false;
#undef DO_
}

void HeartResponseM2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HeartResponseM2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errcode(), output);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartResponseM2C.errMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // optional .EventProto event = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_event(), output);
  }

  // optional bool notAllocated = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->notallocated(), output);
  }

  // optional int64 defFlowCheckId = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->defflowcheckid(), output);
  }

  // optional string defFlowControlInfo = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defflowcontrolinfo().data(), static_cast<int>(this->defflowcontrolinfo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartResponseM2C.defFlowControlInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->defflowcontrolinfo(), output);
  }

  // optional int64 groupFlowCheckId = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->groupflowcheckid(), output);
  }

  // optional string groupFlowControlInfo = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupflowcontrolinfo().data(), static_cast<int>(this->groupflowcontrolinfo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartResponseM2C.groupFlowControlInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->groupflowcontrolinfo(), output);
  }

  // optional int64 ssdStoreId = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->ssdstoreid(), output);
  }

  // optional int32 qryPriorityId = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->qrypriorityid(), output);
  }

  // optional bool requireAuth = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->requireauth(), output);
  }

  // optional .MasterAuthorizedInfo authorizedInfo = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_authorizedinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HeartResponseM2C)
}

::google::protobuf::uint8* HeartResponseM2C::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HeartResponseM2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errcode(), target);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartResponseM2C.errMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // optional .EventProto event = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_event(), deterministic, target);
  }

  // optional bool notAllocated = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->notallocated(), target);
  }

  // optional int64 defFlowCheckId = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->defflowcheckid(), target);
  }

  // optional string defFlowControlInfo = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defflowcontrolinfo().data(), static_cast<int>(this->defflowcontrolinfo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartResponseM2C.defFlowControlInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->defflowcontrolinfo(), target);
  }

  // optional int64 groupFlowCheckId = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->groupflowcheckid(), target);
  }

  // optional string groupFlowControlInfo = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupflowcontrolinfo().data(), static_cast<int>(this->groupflowcontrolinfo().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "HeartResponseM2C.groupFlowControlInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->groupflowcontrolinfo(), target);
  }

  // optional int64 ssdStoreId = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->ssdstoreid(), target);
  }

  // optional int32 qryPriorityId = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->qrypriorityid(), target);
  }

  // optional bool requireAuth = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->requireauth(), target);
  }

  // optional .MasterAuthorizedInfo authorizedInfo = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_authorizedinfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeartResponseM2C)
  return target;
}

size_t HeartResponseM2C::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:HeartResponseM2C)
  size_t total_size = 0;

  if (has_errmsg()) {
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  if (has_errcode()) {
    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  if (has_success()) {
    // required bool success = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t HeartResponseM2C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HeartResponseM2C)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000061) ^ 0x00000061) == 0) {  // All required fields are present.
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());

    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());

    // required bool success = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional string defFlowControlInfo = 7;
    if (has_defflowcontrolinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defflowcontrolinfo());
    }

    // optional string groupFlowControlInfo = 9;
    if (has_groupflowcontrolinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupflowcontrolinfo());
    }

    // optional .EventProto event = 4;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *event_);
    }

    // optional .MasterAuthorizedInfo authorizedInfo = 13;
    if (has_authorizedinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *authorizedinfo_);
    }

  }
  // optional bool notAllocated = 5;
  if (has_notallocated()) {
    total_size += 1 + 1;
  }

  if (_has_bits_[8 / 32] & 7936u) {
    // optional bool requireAuth = 12;
    if (has_requireauth()) {
      total_size += 1 + 1;
    }

    // optional int64 defFlowCheckId = 6;
    if (has_defflowcheckid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->defflowcheckid());
    }

    // optional int64 groupFlowCheckId = 8;
    if (has_groupflowcheckid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->groupflowcheckid());
    }

    // optional int64 ssdStoreId = 10;
    if (has_ssdstoreid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ssdstoreid());
    }

    // optional int32 qryPriorityId = 11;
    if (has_qrypriorityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qrypriorityid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartResponseM2C::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HeartResponseM2C)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartResponseM2C* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartResponseM2C>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HeartResponseM2C)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HeartResponseM2C)
    MergeFrom(*source);
  }
}

void HeartResponseM2C::MergeFrom(const HeartResponseM2C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HeartResponseM2C)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errmsg();
      errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_defflowcontrolinfo();
      defflowcontrolinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.defflowcontrolinfo_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_groupflowcontrolinfo();
      groupflowcontrolinfo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupflowcontrolinfo_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_event()->::EventProto::MergeFrom(from.event());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_authorizedinfo()->::MasterAuthorizedInfo::MergeFrom(from.authorizedinfo());
    }
    if (cached_has_bits & 0x00000020u) {
      errcode_ = from.errcode_;
    }
    if (cached_has_bits & 0x00000040u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000080u) {
      notallocated_ = from.notallocated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      requireauth_ = from.requireauth_;
    }
    if (cached_has_bits & 0x00000200u) {
      defflowcheckid_ = from.defflowcheckid_;
    }
    if (cached_has_bits & 0x00000400u) {
      groupflowcheckid_ = from.groupflowcheckid_;
    }
    if (cached_has_bits & 0x00000800u) {
      ssdstoreid_ = from.ssdstoreid_;
    }
    if (cached_has_bits & 0x00001000u) {
      qrypriorityid_ = from.qrypriorityid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeartResponseM2C::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HeartResponseM2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartResponseM2C::CopyFrom(const HeartResponseM2C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HeartResponseM2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartResponseM2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000061) != 0x00000061) return false;
  if (has_authorizedinfo()) {
    if (!this->authorizedinfo_->IsInitialized()) return false;
  }
  return true;
}

void HeartResponseM2C::Swap(HeartResponseM2C* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartResponseM2C::InternalSwap(HeartResponseM2C* other) {
  using std::swap;
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  defflowcontrolinfo_.Swap(&other->defflowcontrolinfo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  groupflowcontrolinfo_.Swap(&other->groupflowcontrolinfo_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_, other->event_);
  swap(authorizedinfo_, other->authorizedinfo_);
  swap(errcode_, other->errcode_);
  swap(success_, other->success_);
  swap(notallocated_, other->notallocated_);
  swap(requireauth_, other->requireauth_);
  swap(defflowcheckid_, other->defflowcheckid_);
  swap(groupflowcheckid_, other->groupflowcheckid_);
  swap(ssdstoreid_, other->ssdstoreid_);
  swap(qrypriorityid_, other->qrypriorityid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata HeartResponseM2C::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CloseRequestC2M::InitAsDefaultInstance() {
  ::_CloseRequestC2M_default_instance_._instance.get_mutable()->authinfo_ = const_cast< ::MasterCertificateInfo*>(
      ::MasterCertificateInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseRequestC2M::kClientIdFieldNumber;
const int CloseRequestC2M::kGroupNameFieldNumber;
const int CloseRequestC2M::kAuthInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseRequestC2M::CloseRequestC2M()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_CloseRequestC2M.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CloseRequestC2M)
}
CloseRequestC2M::CloseRequestC2M(const CloseRequestC2M& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_groupname()) {
    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  if (from.has_authinfo()) {
    authinfo_ = new ::MasterCertificateInfo(*from.authinfo_);
  } else {
    authinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CloseRequestC2M)
}

void CloseRequestC2M::SharedCtor() {
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authinfo_ = NULL;
}

CloseRequestC2M::~CloseRequestC2M() {
  // @@protoc_insertion_point(destructor:CloseRequestC2M)
  SharedDtor();
}

void CloseRequestC2M::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete authinfo_;
}

void CloseRequestC2M::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CloseRequestC2M::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloseRequestC2M& CloseRequestC2M::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_CloseRequestC2M.base);
  return *internal_default_instance();
}


void CloseRequestC2M::Clear() {
// @@protoc_insertion_point(message_clear_start:CloseRequestC2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      clientid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      groupname_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(authinfo_ != NULL);
      authinfo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CloseRequestC2M::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CloseRequestC2M)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clientId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), static_cast<int>(this->clientid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CloseRequestC2M.clientId");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string groupName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), static_cast<int>(this->groupname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CloseRequestC2M.groupName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MasterCertificateInfo authInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CloseRequestC2M)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CloseRequestC2M)
  return false;
#undef DO_
}

void CloseRequestC2M::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CloseRequestC2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CloseRequestC2M.clientId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientid(), output);
  }

  // required string groupName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CloseRequestC2M.groupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupname(), output);
  }

  // optional .MasterCertificateInfo authInfo = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_authinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CloseRequestC2M)
}

::google::protobuf::uint8* CloseRequestC2M::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CloseRequestC2M)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string clientId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CloseRequestC2M.clientId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientid(), target);
  }

  // required string groupName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), static_cast<int>(this->groupname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CloseRequestC2M.groupName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }

  // optional .MasterCertificateInfo authInfo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_authinfo(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CloseRequestC2M)
  return target;
}

size_t CloseRequestC2M::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CloseRequestC2M)
  size_t total_size = 0;

  if (has_clientid()) {
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  if (has_groupname()) {
    // required string groupName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());
  }

  return total_size;
}
size_t CloseRequestC2M::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CloseRequestC2M)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string clientId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());

    // required string groupName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .MasterCertificateInfo authInfo = 3;
  if (has_authinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *authinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseRequestC2M::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CloseRequestC2M)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseRequestC2M* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseRequestC2M>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CloseRequestC2M)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CloseRequestC2M)
    MergeFrom(*source);
  }
}

void CloseRequestC2M::MergeFrom(const CloseRequestC2M& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CloseRequestC2M)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_clientid();
      clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_groupname();
      groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_authinfo()->::MasterCertificateInfo::MergeFrom(from.authinfo());
    }
  }
}

void CloseRequestC2M::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CloseRequestC2M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseRequestC2M::CopyFrom(const CloseRequestC2M& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CloseRequestC2M)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseRequestC2M::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_authinfo()) {
    if (!this->authinfo_->IsInitialized()) return false;
  }
  return true;
}

void CloseRequestC2M::Swap(CloseRequestC2M* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseRequestC2M::InternalSwap(CloseRequestC2M* other) {
  using std::swap;
  clientid_.Swap(&other->clientid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  groupname_.Swap(&other->groupname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(authinfo_, other->authinfo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CloseRequestC2M::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CloseResponseM2C::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseResponseM2C::kSuccessFieldNumber;
const int CloseResponseM2C::kErrCodeFieldNumber;
const int CloseResponseM2C::kErrMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseResponseM2C::CloseResponseM2C()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MasterService_2eproto::scc_info_CloseResponseM2C.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CloseResponseM2C)
}
CloseResponseM2C::CloseResponseM2C(const CloseResponseM2C& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errmsg()) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&errcode_) -
    reinterpret_cast<char*>(&success_)) + sizeof(errcode_));
  // @@protoc_insertion_point(copy_constructor:CloseResponseM2C)
}

void CloseResponseM2C::SharedCtor() {
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&success_)) + sizeof(errcode_));
}

CloseResponseM2C::~CloseResponseM2C() {
  // @@protoc_insertion_point(destructor:CloseResponseM2C)
  SharedDtor();
}

void CloseResponseM2C::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CloseResponseM2C::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CloseResponseM2C::descriptor() {
  ::protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CloseResponseM2C& CloseResponseM2C::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MasterService_2eproto::scc_info_CloseResponseM2C.base);
  return *internal_default_instance();
}


void CloseResponseM2C::Clear() {
// @@protoc_insertion_point(message_clear_start:CloseResponseM2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errmsg_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&success_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&errcode_) -
        reinterpret_cast<char*>(&success_)) + sizeof(errcode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CloseResponseM2C::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CloseResponseM2C)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 errCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_errcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string errMsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CloseResponseM2C.errMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CloseResponseM2C)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CloseResponseM2C)
  return false;
#undef DO_
}

void CloseResponseM2C::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CloseResponseM2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errcode(), output);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CloseResponseM2C.errMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CloseResponseM2C)
}

::google::protobuf::uint8* CloseResponseM2C::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CloseResponseM2C)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool success = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // required int32 errCode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errcode(), target);
  }

  // required string errMsg = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CloseResponseM2C.errMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CloseResponseM2C)
  return target;
}

size_t CloseResponseM2C::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CloseResponseM2C)
  size_t total_size = 0;

  if (has_errmsg()) {
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  if (has_success()) {
    // required bool success = 1;
    total_size += 1 + 1;
  }

  if (has_errcode()) {
    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  return total_size;
}
size_t CloseResponseM2C::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CloseResponseM2C)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string errMsg = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());

    // required bool success = 1;
    total_size += 1 + 1;

    // required int32 errCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseResponseM2C::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CloseResponseM2C)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseResponseM2C* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseResponseM2C>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CloseResponseM2C)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CloseResponseM2C)
    MergeFrom(*source);
  }
}

void CloseResponseM2C::MergeFrom(const CloseResponseM2C& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CloseResponseM2C)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errmsg();
      errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
    }
    if (cached_has_bits & 0x00000002u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000004u) {
      errcode_ = from.errcode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CloseResponseM2C::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CloseResponseM2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseResponseM2C::CopyFrom(const CloseResponseM2C& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CloseResponseM2C)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseResponseM2C::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void CloseResponseM2C::Swap(CloseResponseM2C* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseResponseM2C::InternalSwap(CloseResponseM2C* other) {
  using std::swap;
  errmsg_.Swap(&other->errmsg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  swap(errcode_, other->errcode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CloseResponseM2C::GetMetadata() const {
  protobuf_MasterService_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MasterService_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EventProto* Arena::CreateMaybeMessage< ::EventProto >(Arena* arena) {
  return Arena::CreateInternal< ::EventProto >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EnableBrokerFunInfo* Arena::CreateMaybeMessage< ::EnableBrokerFunInfo >(Arena* arena) {
  return Arena::CreateInternal< ::EnableBrokerFunInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AuthenticateInfo* Arena::CreateMaybeMessage< ::AuthenticateInfo >(Arena* arena) {
  return Arena::CreateInternal< ::AuthenticateInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MasterCertificateInfo* Arena::CreateMaybeMessage< ::MasterCertificateInfo >(Arena* arena) {
  return Arena::CreateInternal< ::MasterCertificateInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MasterAuthorizedInfo* Arena::CreateMaybeMessage< ::MasterAuthorizedInfo >(Arena* arena) {
  return Arena::CreateInternal< ::MasterAuthorizedInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MasterBrokerAuthorizedInfo* Arena::CreateMaybeMessage< ::MasterBrokerAuthorizedInfo >(Arena* arena) {
  return Arena::CreateInternal< ::MasterBrokerAuthorizedInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RegisterRequestP2M* Arena::CreateMaybeMessage< ::RegisterRequestP2M >(Arena* arena) {
  return Arena::CreateInternal< ::RegisterRequestP2M >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RegisterResponseM2P* Arena::CreateMaybeMessage< ::RegisterResponseM2P >(Arena* arena) {
  return Arena::CreateInternal< ::RegisterResponseM2P >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HeartRequestP2M* Arena::CreateMaybeMessage< ::HeartRequestP2M >(Arena* arena) {
  return Arena::CreateInternal< ::HeartRequestP2M >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HeartResponseM2P* Arena::CreateMaybeMessage< ::HeartResponseM2P >(Arena* arena) {
  return Arena::CreateInternal< ::HeartResponseM2P >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CloseRequestP2M* Arena::CreateMaybeMessage< ::CloseRequestP2M >(Arena* arena) {
  return Arena::CreateInternal< ::CloseRequestP2M >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CloseResponseM2P* Arena::CreateMaybeMessage< ::CloseResponseM2P >(Arena* arena) {
  return Arena::CreateInternal< ::CloseResponseM2P >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RegisterRequestC2M* Arena::CreateMaybeMessage< ::RegisterRequestC2M >(Arena* arena) {
  return Arena::CreateInternal< ::RegisterRequestC2M >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RegisterResponseM2C* Arena::CreateMaybeMessage< ::RegisterResponseM2C >(Arena* arena) {
  return Arena::CreateInternal< ::RegisterResponseM2C >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HeartRequestC2M* Arena::CreateMaybeMessage< ::HeartRequestC2M >(Arena* arena) {
  return Arena::CreateInternal< ::HeartRequestC2M >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HeartResponseM2C* Arena::CreateMaybeMessage< ::HeartResponseM2C >(Arena* arena) {
  return Arena::CreateInternal< ::HeartResponseM2C >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CloseRequestC2M* Arena::CreateMaybeMessage< ::CloseRequestC2M >(Arena* arena) {
  return Arena::CreateInternal< ::CloseRequestC2M >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CloseResponseM2C* Arena::CreateMaybeMessage< ::CloseResponseM2C >(Arena* arena) {
  return Arena::CreateInternal< ::CloseResponseM2C >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
