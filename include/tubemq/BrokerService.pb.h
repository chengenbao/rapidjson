// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BrokerService.proto

#ifndef PROTOBUF_INCLUDED_BrokerService_2eproto
#define PROTOBUF_INCLUDED_BrokerService_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_BrokerService_2eproto 

namespace protobuf_BrokerService_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_BrokerService_2eproto
class AuthorizedInfo;
class AuthorizedInfoDefaultTypeInternal;
extern AuthorizedInfoDefaultTypeInternal _AuthorizedInfo_default_instance_;
class CommitOffsetRequestC2B;
class CommitOffsetRequestC2BDefaultTypeInternal;
extern CommitOffsetRequestC2BDefaultTypeInternal _CommitOffsetRequestC2B_default_instance_;
class CommitOffsetResponseB2C;
class CommitOffsetResponseB2CDefaultTypeInternal;
extern CommitOffsetResponseB2CDefaultTypeInternal _CommitOffsetResponseB2C_default_instance_;
class GetMessageRequestC2B;
class GetMessageRequestC2BDefaultTypeInternal;
extern GetMessageRequestC2BDefaultTypeInternal _GetMessageRequestC2B_default_instance_;
class GetMessageResponseB2C;
class GetMessageResponseB2CDefaultTypeInternal;
extern GetMessageResponseB2CDefaultTypeInternal _GetMessageResponseB2C_default_instance_;
class HeartBeatRequestC2B;
class HeartBeatRequestC2BDefaultTypeInternal;
extern HeartBeatRequestC2BDefaultTypeInternal _HeartBeatRequestC2B_default_instance_;
class HeartBeatResponseB2C;
class HeartBeatResponseB2CDefaultTypeInternal;
extern HeartBeatResponseB2CDefaultTypeInternal _HeartBeatResponseB2C_default_instance_;
class RegisterRequestC2B;
class RegisterRequestC2BDefaultTypeInternal;
extern RegisterRequestC2BDefaultTypeInternal _RegisterRequestC2B_default_instance_;
class RegisterResponseB2C;
class RegisterResponseB2CDefaultTypeInternal;
extern RegisterResponseB2CDefaultTypeInternal _RegisterResponseB2C_default_instance_;
class SendMessageRequestP2B;
class SendMessageRequestP2BDefaultTypeInternal;
extern SendMessageRequestP2BDefaultTypeInternal _SendMessageRequestP2B_default_instance_;
class SendMessageResponseB2P;
class SendMessageResponseB2PDefaultTypeInternal;
extern SendMessageResponseB2PDefaultTypeInternal _SendMessageResponseB2P_default_instance_;
class TransferedMessage;
class TransferedMessageDefaultTypeInternal;
extern TransferedMessageDefaultTypeInternal _TransferedMessage_default_instance_;
namespace google {
namespace protobuf {
template<> ::AuthorizedInfo* Arena::CreateMaybeMessage<::AuthorizedInfo>(Arena*);
template<> ::CommitOffsetRequestC2B* Arena::CreateMaybeMessage<::CommitOffsetRequestC2B>(Arena*);
template<> ::CommitOffsetResponseB2C* Arena::CreateMaybeMessage<::CommitOffsetResponseB2C>(Arena*);
template<> ::GetMessageRequestC2B* Arena::CreateMaybeMessage<::GetMessageRequestC2B>(Arena*);
template<> ::GetMessageResponseB2C* Arena::CreateMaybeMessage<::GetMessageResponseB2C>(Arena*);
template<> ::HeartBeatRequestC2B* Arena::CreateMaybeMessage<::HeartBeatRequestC2B>(Arena*);
template<> ::HeartBeatResponseB2C* Arena::CreateMaybeMessage<::HeartBeatResponseB2C>(Arena*);
template<> ::RegisterRequestC2B* Arena::CreateMaybeMessage<::RegisterRequestC2B>(Arena*);
template<> ::RegisterResponseB2C* Arena::CreateMaybeMessage<::RegisterResponseB2C>(Arena*);
template<> ::SendMessageRequestP2B* Arena::CreateMaybeMessage<::SendMessageRequestP2B>(Arena*);
template<> ::SendMessageResponseB2P* Arena::CreateMaybeMessage<::SendMessageResponseB2P>(Arena*);
template<> ::TransferedMessage* Arena::CreateMaybeMessage<::TransferedMessage>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class TransferedMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TransferedMessage) */ {
 public:
  TransferedMessage();
  virtual ~TransferedMessage();

  TransferedMessage(const TransferedMessage& from);

  inline TransferedMessage& operator=(const TransferedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransferedMessage(TransferedMessage&& from) noexcept
    : TransferedMessage() {
    *this = ::std::move(from);
  }

  inline TransferedMessage& operator=(TransferedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferedMessage* internal_default_instance() {
    return reinterpret_cast<const TransferedMessage*>(
               &_TransferedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TransferedMessage* other);
  friend void swap(TransferedMessage& a, TransferedMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransferedMessage* New() const final {
    return CreateMaybeMessage<TransferedMessage>(NULL);
  }

  TransferedMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransferedMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransferedMessage& from);
  void MergeFrom(const TransferedMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferedMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes payLoadData = 3;
  bool has_payloaddata() const;
  void clear_payloaddata();
  static const int kPayLoadDataFieldNumber = 3;
  const ::std::string& payloaddata() const;
  void set_payloaddata(const ::std::string& value);
  #if LANG_CXX11
  void set_payloaddata(::std::string&& value);
  #endif
  void set_payloaddata(const char* value);
  void set_payloaddata(const void* value, size_t size);
  ::std::string* mutable_payloaddata();
  ::std::string* release_payloaddata();
  void set_allocated_payloaddata(::std::string* payloaddata);

  // required int64 messageId = 1;
  bool has_messageid() const;
  void clear_messageid();
  static const int kMessageIdFieldNumber = 1;
  ::google::protobuf::int64 messageid() const;
  void set_messageid(::google::protobuf::int64 value);

  // required int32 checkSum = 2;
  bool has_checksum() const;
  void clear_checksum();
  static const int kCheckSumFieldNumber = 2;
  ::google::protobuf::int32 checksum() const;
  void set_checksum(::google::protobuf::int32 value);

  // required int32 flag = 4;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 4;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TransferedMessage)
 private:
  void set_has_messageid();
  void clear_has_messageid();
  void set_has_checksum();
  void clear_has_checksum();
  void set_has_payloaddata();
  void clear_has_payloaddata();
  void set_has_flag();
  void clear_has_flag();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr payloaddata_;
  ::google::protobuf::int64 messageid_;
  ::google::protobuf::int32 checksum_;
  ::google::protobuf::int32 flag_;
  friend struct ::protobuf_BrokerService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthorizedInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AuthorizedInfo) */ {
 public:
  AuthorizedInfo();
  virtual ~AuthorizedInfo();

  AuthorizedInfo(const AuthorizedInfo& from);

  inline AuthorizedInfo& operator=(const AuthorizedInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthorizedInfo(AuthorizedInfo&& from) noexcept
    : AuthorizedInfo() {
    *this = ::std::move(from);
  }

  inline AuthorizedInfo& operator=(AuthorizedInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthorizedInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthorizedInfo* internal_default_instance() {
    return reinterpret_cast<const AuthorizedInfo*>(
               &_AuthorizedInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AuthorizedInfo* other);
  friend void swap(AuthorizedInfo& a, AuthorizedInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthorizedInfo* New() const final {
    return CreateMaybeMessage<AuthorizedInfo>(NULL);
  }

  AuthorizedInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthorizedInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthorizedInfo& from);
  void MergeFrom(const AuthorizedInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthorizedInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string authAuthorizedToken = 2;
  bool has_authauthorizedtoken() const;
  void clear_authauthorizedtoken();
  static const int kAuthAuthorizedTokenFieldNumber = 2;
  const ::std::string& authauthorizedtoken() const;
  void set_authauthorizedtoken(const ::std::string& value);
  #if LANG_CXX11
  void set_authauthorizedtoken(::std::string&& value);
  #endif
  void set_authauthorizedtoken(const char* value);
  void set_authauthorizedtoken(const char* value, size_t size);
  ::std::string* mutable_authauthorizedtoken();
  ::std::string* release_authauthorizedtoken();
  void set_allocated_authauthorizedtoken(::std::string* authauthorizedtoken);

  // required int64 visitAuthorizedToken = 1;
  bool has_visitauthorizedtoken() const;
  void clear_visitauthorizedtoken();
  static const int kVisitAuthorizedTokenFieldNumber = 1;
  ::google::protobuf::int64 visitauthorizedtoken() const;
  void set_visitauthorizedtoken(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:AuthorizedInfo)
 private:
  void set_has_visitauthorizedtoken();
  void clear_has_visitauthorizedtoken();
  void set_has_authauthorizedtoken();
  void clear_has_authauthorizedtoken();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr authauthorizedtoken_;
  ::google::protobuf::int64 visitauthorizedtoken_;
  friend struct ::protobuf_BrokerService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendMessageRequestP2B : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SendMessageRequestP2B) */ {
 public:
  SendMessageRequestP2B();
  virtual ~SendMessageRequestP2B();

  SendMessageRequestP2B(const SendMessageRequestP2B& from);

  inline SendMessageRequestP2B& operator=(const SendMessageRequestP2B& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendMessageRequestP2B(SendMessageRequestP2B&& from) noexcept
    : SendMessageRequestP2B() {
    *this = ::std::move(from);
  }

  inline SendMessageRequestP2B& operator=(SendMessageRequestP2B&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMessageRequestP2B& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMessageRequestP2B* internal_default_instance() {
    return reinterpret_cast<const SendMessageRequestP2B*>(
               &_SendMessageRequestP2B_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SendMessageRequestP2B* other);
  friend void swap(SendMessageRequestP2B& a, SendMessageRequestP2B& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendMessageRequestP2B* New() const final {
    return CreateMaybeMessage<SendMessageRequestP2B>(NULL);
  }

  SendMessageRequestP2B* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendMessageRequestP2B>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendMessageRequestP2B& from);
  void MergeFrom(const SendMessageRequestP2B& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageRequestP2B* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string clientId = 1;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // required string topicName = 2;
  bool has_topicname() const;
  void clear_topicname();
  static const int kTopicNameFieldNumber = 2;
  const ::std::string& topicname() const;
  void set_topicname(const ::std::string& value);
  #if LANG_CXX11
  void set_topicname(::std::string&& value);
  #endif
  void set_topicname(const char* value);
  void set_topicname(const char* value, size_t size);
  ::std::string* mutable_topicname();
  ::std::string* release_topicname();
  void set_allocated_topicname(::std::string* topicname);

  // required bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string msgType = 8;
  bool has_msgtype() const;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 8;
  const ::std::string& msgtype() const;
  void set_msgtype(const ::std::string& value);
  #if LANG_CXX11
  void set_msgtype(::std::string&& value);
  #endif
  void set_msgtype(const char* value);
  void set_msgtype(const char* value, size_t size);
  ::std::string* mutable_msgtype();
  ::std::string* release_msgtype();
  void set_allocated_msgtype(::std::string* msgtype);

  // optional string msgTime = 9;
  bool has_msgtime() const;
  void clear_msgtime();
  static const int kMsgTimeFieldNumber = 9;
  const ::std::string& msgtime() const;
  void set_msgtime(const ::std::string& value);
  #if LANG_CXX11
  void set_msgtime(::std::string&& value);
  #endif
  void set_msgtime(const char* value);
  void set_msgtime(const char* value, size_t size);
  ::std::string* mutable_msgtime();
  ::std::string* release_msgtime();
  void set_allocated_msgtime(::std::string* msgtime);

  // optional .AuthorizedInfo authInfo = 10;
  bool has_authinfo() const;
  void clear_authinfo();
  static const int kAuthInfoFieldNumber = 10;
  private:
  const ::AuthorizedInfo& _internal_authinfo() const;
  public:
  const ::AuthorizedInfo& authinfo() const;
  ::AuthorizedInfo* release_authinfo();
  ::AuthorizedInfo* mutable_authinfo();
  void set_allocated_authinfo(::AuthorizedInfo* authinfo);

  // required int32 partitionId = 3;
  bool has_partitionid() const;
  void clear_partitionid();
  static const int kPartitionIdFieldNumber = 3;
  ::google::protobuf::int32 partitionid() const;
  void set_partitionid(::google::protobuf::int32 value);

  // required int32 flag = 5;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 5;
  ::google::protobuf::int32 flag() const;
  void set_flag(::google::protobuf::int32 value);

  // required int32 checkSum = 6;
  bool has_checksum() const;
  void clear_checksum();
  static const int kCheckSumFieldNumber = 6;
  ::google::protobuf::int32 checksum() const;
  void set_checksum(::google::protobuf::int32 value);

  // required int32 sentAddr = 7;
  bool has_sentaddr() const;
  void clear_sentaddr();
  static const int kSentAddrFieldNumber = 7;
  ::google::protobuf::int32 sentaddr() const;
  void set_sentaddr(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SendMessageRequestP2B)
 private:
  void set_has_clientid();
  void clear_has_clientid();
  void set_has_topicname();
  void clear_has_topicname();
  void set_has_partitionid();
  void clear_has_partitionid();
  void set_has_data();
  void clear_has_data();
  void set_has_flag();
  void clear_has_flag();
  void set_has_checksum();
  void clear_has_checksum();
  void set_has_sentaddr();
  void clear_has_sentaddr();
  void set_has_msgtype();
  void clear_has_msgtype();
  void set_has_msgtime();
  void clear_has_msgtime();
  void set_has_authinfo();
  void clear_has_authinfo();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr topicname_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr msgtype_;
  ::google::protobuf::internal::ArenaStringPtr msgtime_;
  ::AuthorizedInfo* authinfo_;
  ::google::protobuf::int32 partitionid_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 checksum_;
  ::google::protobuf::int32 sentaddr_;
  friend struct ::protobuf_BrokerService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendMessageResponseB2P : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SendMessageResponseB2P) */ {
 public:
  SendMessageResponseB2P();
  virtual ~SendMessageResponseB2P();

  SendMessageResponseB2P(const SendMessageResponseB2P& from);

  inline SendMessageResponseB2P& operator=(const SendMessageResponseB2P& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendMessageResponseB2P(SendMessageResponseB2P&& from) noexcept
    : SendMessageResponseB2P() {
    *this = ::std::move(from);
  }

  inline SendMessageResponseB2P& operator=(SendMessageResponseB2P&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMessageResponseB2P& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendMessageResponseB2P* internal_default_instance() {
    return reinterpret_cast<const SendMessageResponseB2P*>(
               &_SendMessageResponseB2P_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SendMessageResponseB2P* other);
  friend void swap(SendMessageResponseB2P& a, SendMessageResponseB2P& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendMessageResponseB2P* New() const final {
    return CreateMaybeMessage<SendMessageResponseB2P>(NULL);
  }

  SendMessageResponseB2P* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendMessageResponseB2P>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendMessageResponseB2P& from);
  void MergeFrom(const SendMessageResponseB2P& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageResponseB2P* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string errMsg = 3;
  bool has_errmsg() const;
  void clear_errmsg();
  static const int kErrMsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // required int32 errCode = 2;
  bool has_errcode() const;
  void clear_errcode();
  static const int kErrCodeFieldNumber = 2;
  ::google::protobuf::int32 errcode() const;
  void set_errcode(::google::protobuf::int32 value);

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional bool requireAuth = 4;
  bool has_requireauth() const;
  void clear_requireauth();
  static const int kRequireAuthFieldNumber = 4;
  bool requireauth() const;
  void set_requireauth(bool value);

  // @@protoc_insertion_point(class_scope:SendMessageResponseB2P)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_errcode();
  void clear_has_errcode();
  void set_has_errmsg();
  void clear_has_errmsg();
  void set_has_requireauth();
  void clear_has_requireauth();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::int32 errcode_;
  bool success_;
  bool requireauth_;
  friend struct ::protobuf_BrokerService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterRequestC2B : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RegisterRequestC2B) */ {
 public:
  RegisterRequestC2B();
  virtual ~RegisterRequestC2B();

  RegisterRequestC2B(const RegisterRequestC2B& from);

  inline RegisterRequestC2B& operator=(const RegisterRequestC2B& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterRequestC2B(RegisterRequestC2B&& from) noexcept
    : RegisterRequestC2B() {
    *this = ::std::move(from);
  }

  inline RegisterRequestC2B& operator=(RegisterRequestC2B&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterRequestC2B& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterRequestC2B* internal_default_instance() {
    return reinterpret_cast<const RegisterRequestC2B*>(
               &_RegisterRequestC2B_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RegisterRequestC2B* other);
  friend void swap(RegisterRequestC2B& a, RegisterRequestC2B& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterRequestC2B* New() const final {
    return CreateMaybeMessage<RegisterRequestC2B>(NULL);
  }

  RegisterRequestC2B* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterRequestC2B>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterRequestC2B& from);
  void MergeFrom(const RegisterRequestC2B& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequestC2B* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string filterCondStr = 7;
  int filtercondstr_size() const;
  void clear_filtercondstr();
  static const int kFilterCondStrFieldNumber = 7;
  const ::std::string& filtercondstr(int index) const;
  ::std::string* mutable_filtercondstr(int index);
  void set_filtercondstr(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_filtercondstr(int index, ::std::string&& value);
  #endif
  void set_filtercondstr(int index, const char* value);
  void set_filtercondstr(int index, const char* value, size_t size);
  ::std::string* add_filtercondstr();
  void add_filtercondstr(const ::std::string& value);
  #if LANG_CXX11
  void add_filtercondstr(::std::string&& value);
  #endif
  void add_filtercondstr(const char* value);
  void add_filtercondstr(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& filtercondstr() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_filtercondstr();

  // required string clientId = 2;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // required string groupName = 3;
  bool has_groupname() const;
  void clear_groupname();
  static const int kGroupNameFieldNumber = 3;
  const ::std::string& groupname() const;
  void set_groupname(const ::std::string& value);
  #if LANG_CXX11
  void set_groupname(::std::string&& value);
  #endif
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  ::std::string* mutable_groupname();
  ::std::string* release_groupname();
  void set_allocated_groupname(::std::string* groupname);

  // required string topicName = 4;
  bool has_topicname() const;
  void clear_topicname();
  static const int kTopicNameFieldNumber = 4;
  const ::std::string& topicname() const;
  void set_topicname(const ::std::string& value);
  #if LANG_CXX11
  void set_topicname(::std::string&& value);
  #endif
  void set_topicname(const char* value);
  void set_topicname(const char* value, size_t size);
  ::std::string* mutable_topicname();
  ::std::string* release_topicname();
  void set_allocated_topicname(::std::string* topicname);

  // optional string sessionKey = 9;
  bool has_sessionkey() const;
  void clear_sessionkey();
  static const int kSessionKeyFieldNumber = 9;
  const ::std::string& sessionkey() const;
  void set_sessionkey(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionkey(::std::string&& value);
  #endif
  void set_sessionkey(const char* value);
  void set_sessionkey(const char* value, size_t size);
  ::std::string* mutable_sessionkey();
  ::std::string* release_sessionkey();
  void set_allocated_sessionkey(::std::string* sessionkey);

  // optional .AuthorizedInfo authInfo = 13;
  bool has_authinfo() const;
  void clear_authinfo();
  static const int kAuthInfoFieldNumber = 13;
  private:
  const ::AuthorizedInfo& _internal_authinfo() const;
  public:
  const ::AuthorizedInfo& authinfo() const;
  ::AuthorizedInfo* release_authinfo();
  ::AuthorizedInfo* mutable_authinfo();
  void set_allocated_authinfo(::AuthorizedInfo* authinfo);

  // required int32 opType = 1;
  bool has_optype() const;
  void clear_optype();
  static const int kOpTypeFieldNumber = 1;
  ::google::protobuf::int32 optype() const;
  void set_optype(::google::protobuf::int32 value);

  // required int32 partitionId = 5;
  bool has_partitionid() const;
  void clear_partitionid();
  static const int kPartitionIdFieldNumber = 5;
  ::google::protobuf::int32 partitionid() const;
  void set_partitionid(::google::protobuf::int32 value);

  // optional int64 currOffset = 8;
  bool has_curroffset() const;
  void clear_curroffset();
  static const int kCurrOffsetFieldNumber = 8;
  ::google::protobuf::int64 curroffset() const;
  void set_curroffset(::google::protobuf::int64 value);

  // required int32 readStatus = 6;
  bool has_readstatus() const;
  void clear_readstatus();
  static const int kReadStatusFieldNumber = 6;
  ::google::protobuf::int32 readstatus() const;
  void set_readstatus(::google::protobuf::int32 value);

  // optional int32 qryPriorityId = 12;
  bool has_qrypriorityid() const;
  void clear_qrypriorityid();
  static const int kQryPriorityIdFieldNumber = 12;
  ::google::protobuf::int32 qrypriorityid() const;
  void set_qrypriorityid(::google::protobuf::int32 value);

  // optional int64 sessionTime = 10;
  bool has_sessiontime() const;
  void clear_sessiontime();
  static const int kSessionTimeFieldNumber = 10;
  ::google::protobuf::int64 sessiontime() const;
  void set_sessiontime(::google::protobuf::int64 value);

  // optional int64 ssdStoreId = 11;
  bool has_ssdstoreid() const;
  void clear_ssdstoreid();
  static const int kSsdStoreIdFieldNumber = 11;
  ::google::protobuf::int64 ssdstoreid() const;
  void set_ssdstoreid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:RegisterRequestC2B)
 private:
  void set_has_optype();
  void clear_has_optype();
  void set_has_clientid();
  void clear_has_clientid();
  void set_has_groupname();
  void clear_has_groupname();
  void set_has_topicname();
  void clear_has_topicname();
  void set_has_partitionid();
  void clear_has_partitionid();
  void set_has_readstatus();
  void clear_has_readstatus();
  void set_has_curroffset();
  void clear_has_curroffset();
  void set_has_sessionkey();
  void clear_has_sessionkey();
  void set_has_sessiontime();
  void clear_has_sessiontime();
  void set_has_ssdstoreid();
  void clear_has_ssdstoreid();
  void set_has_qrypriorityid();
  void clear_has_qrypriorityid();
  void set_has_authinfo();
  void clear_has_authinfo();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> filtercondstr_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr groupname_;
  ::google::protobuf::internal::ArenaStringPtr topicname_;
  ::google::protobuf::internal::ArenaStringPtr sessionkey_;
  ::AuthorizedInfo* authinfo_;
  ::google::protobuf::int32 optype_;
  ::google::protobuf::int32 partitionid_;
  ::google::protobuf::int64 curroffset_;
  ::google::protobuf::int32 readstatus_;
  ::google::protobuf::int32 qrypriorityid_;
  ::google::protobuf::int64 sessiontime_;
  ::google::protobuf::int64 ssdstoreid_;
  friend struct ::protobuf_BrokerService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterResponseB2C : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RegisterResponseB2C) */ {
 public:
  RegisterResponseB2C();
  virtual ~RegisterResponseB2C();

  RegisterResponseB2C(const RegisterResponseB2C& from);

  inline RegisterResponseB2C& operator=(const RegisterResponseB2C& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterResponseB2C(RegisterResponseB2C&& from) noexcept
    : RegisterResponseB2C() {
    *this = ::std::move(from);
  }

  inline RegisterResponseB2C& operator=(RegisterResponseB2C&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterResponseB2C& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterResponseB2C* internal_default_instance() {
    return reinterpret_cast<const RegisterResponseB2C*>(
               &_RegisterResponseB2C_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RegisterResponseB2C* other);
  friend void swap(RegisterResponseB2C& a, RegisterResponseB2C& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterResponseB2C* New() const final {
    return CreateMaybeMessage<RegisterResponseB2C>(NULL);
  }

  RegisterResponseB2C* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterResponseB2C>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterResponseB2C& from);
  void MergeFrom(const RegisterResponseB2C& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterResponseB2C* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string errMsg = 3;
  bool has_errmsg() const;
  void clear_errmsg();
  static const int kErrMsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // required int32 errCode = 2;
  bool has_errcode() const;
  void clear_errcode();
  static const int kErrCodeFieldNumber = 2;
  ::google::protobuf::int32 errcode() const;
  void set_errcode(::google::protobuf::int32 value);

  // optional int64 currOffset = 4;
  bool has_curroffset() const;
  void clear_curroffset();
  static const int kCurrOffsetFieldNumber = 4;
  ::google::protobuf::int64 curroffset() const;
  void set_curroffset(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:RegisterResponseB2C)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_errcode();
  void clear_has_errcode();
  void set_has_errmsg();
  void clear_has_errmsg();
  void set_has_curroffset();
  void clear_has_curroffset();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool success_;
  ::google::protobuf::int32 errcode_;
  ::google::protobuf::int64 curroffset_;
  friend struct ::protobuf_BrokerService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeartBeatRequestC2B : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HeartBeatRequestC2B) */ {
 public:
  HeartBeatRequestC2B();
  virtual ~HeartBeatRequestC2B();

  HeartBeatRequestC2B(const HeartBeatRequestC2B& from);

  inline HeartBeatRequestC2B& operator=(const HeartBeatRequestC2B& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartBeatRequestC2B(HeartBeatRequestC2B&& from) noexcept
    : HeartBeatRequestC2B() {
    *this = ::std::move(from);
  }

  inline HeartBeatRequestC2B& operator=(HeartBeatRequestC2B&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatRequestC2B& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartBeatRequestC2B* internal_default_instance() {
    return reinterpret_cast<const HeartBeatRequestC2B*>(
               &_HeartBeatRequestC2B_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(HeartBeatRequestC2B* other);
  friend void swap(HeartBeatRequestC2B& a, HeartBeatRequestC2B& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartBeatRequestC2B* New() const final {
    return CreateMaybeMessage<HeartBeatRequestC2B>(NULL);
  }

  HeartBeatRequestC2B* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HeartBeatRequestC2B>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HeartBeatRequestC2B& from);
  void MergeFrom(const HeartBeatRequestC2B& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatRequestC2B* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string partitionInfo = 4;
  int partitioninfo_size() const;
  void clear_partitioninfo();
  static const int kPartitionInfoFieldNumber = 4;
  const ::std::string& partitioninfo(int index) const;
  ::std::string* mutable_partitioninfo(int index);
  void set_partitioninfo(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_partitioninfo(int index, ::std::string&& value);
  #endif
  void set_partitioninfo(int index, const char* value);
  void set_partitioninfo(int index, const char* value, size_t size);
  ::std::string* add_partitioninfo();
  void add_partitioninfo(const ::std::string& value);
  #if LANG_CXX11
  void add_partitioninfo(::std::string&& value);
  #endif
  void add_partitioninfo(const char* value);
  void add_partitioninfo(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& partitioninfo() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_partitioninfo();

  // required string clientId = 1;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // required string groupName = 2;
  bool has_groupname() const;
  void clear_groupname();
  static const int kGroupNameFieldNumber = 2;
  const ::std::string& groupname() const;
  void set_groupname(const ::std::string& value);
  #if LANG_CXX11
  void set_groupname(::std::string&& value);
  #endif
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  ::std::string* mutable_groupname();
  ::std::string* release_groupname();
  void set_allocated_groupname(::std::string* groupname);

  // optional .AuthorizedInfo authInfo = 7;
  bool has_authinfo() const;
  void clear_authinfo();
  static const int kAuthInfoFieldNumber = 7;
  private:
  const ::AuthorizedInfo& _internal_authinfo() const;
  public:
  const ::AuthorizedInfo& authinfo() const;
  ::AuthorizedInfo* release_authinfo();
  ::AuthorizedInfo* mutable_authinfo();
  void set_allocated_authinfo(::AuthorizedInfo* authinfo);

  // required int32 readStatus = 3;
  bool has_readstatus() const;
  void clear_readstatus();
  static const int kReadStatusFieldNumber = 3;
  ::google::protobuf::int32 readstatus() const;
  void set_readstatus(::google::protobuf::int32 value);

  // optional int32 qryPriorityId = 6;
  bool has_qrypriorityid() const;
  void clear_qrypriorityid();
  static const int kQryPriorityIdFieldNumber = 6;
  ::google::protobuf::int32 qrypriorityid() const;
  void set_qrypriorityid(::google::protobuf::int32 value);

  // optional int64 ssdStoreId = 5;
  bool has_ssdstoreid() const;
  void clear_ssdstoreid();
  static const int kSsdStoreIdFieldNumber = 5;
  ::google::protobuf::int64 ssdstoreid() const;
  void set_ssdstoreid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:HeartBeatRequestC2B)
 private:
  void set_has_clientid();
  void clear_has_clientid();
  void set_has_groupname();
  void clear_has_groupname();
  void set_has_readstatus();
  void clear_has_readstatus();
  void set_has_ssdstoreid();
  void clear_has_ssdstoreid();
  void set_has_qrypriorityid();
  void clear_has_qrypriorityid();
  void set_has_authinfo();
  void clear_has_authinfo();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> partitioninfo_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr groupname_;
  ::AuthorizedInfo* authinfo_;
  ::google::protobuf::int32 readstatus_;
  ::google::protobuf::int32 qrypriorityid_;
  ::google::protobuf::int64 ssdstoreid_;
  friend struct ::protobuf_BrokerService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HeartBeatResponseB2C : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HeartBeatResponseB2C) */ {
 public:
  HeartBeatResponseB2C();
  virtual ~HeartBeatResponseB2C();

  HeartBeatResponseB2C(const HeartBeatResponseB2C& from);

  inline HeartBeatResponseB2C& operator=(const HeartBeatResponseB2C& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HeartBeatResponseB2C(HeartBeatResponseB2C&& from) noexcept
    : HeartBeatResponseB2C() {
    *this = ::std::move(from);
  }

  inline HeartBeatResponseB2C& operator=(HeartBeatResponseB2C&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeatResponseB2C& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartBeatResponseB2C* internal_default_instance() {
    return reinterpret_cast<const HeartBeatResponseB2C*>(
               &_HeartBeatResponseB2C_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(HeartBeatResponseB2C* other);
  friend void swap(HeartBeatResponseB2C& a, HeartBeatResponseB2C& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HeartBeatResponseB2C* New() const final {
    return CreateMaybeMessage<HeartBeatResponseB2C>(NULL);
  }

  HeartBeatResponseB2C* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HeartBeatResponseB2C>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HeartBeatResponseB2C& from);
  void MergeFrom(const HeartBeatResponseB2C& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatResponseB2C* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string failureInfo = 5;
  int failureinfo_size() const;
  void clear_failureinfo();
  static const int kFailureInfoFieldNumber = 5;
  const ::std::string& failureinfo(int index) const;
  ::std::string* mutable_failureinfo(int index);
  void set_failureinfo(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_failureinfo(int index, ::std::string&& value);
  #endif
  void set_failureinfo(int index, const char* value);
  void set_failureinfo(int index, const char* value, size_t size);
  ::std::string* add_failureinfo();
  void add_failureinfo(const ::std::string& value);
  #if LANG_CXX11
  void add_failureinfo(::std::string&& value);
  #endif
  void add_failureinfo(const char* value);
  void add_failureinfo(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& failureinfo() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_failureinfo();

  // required string errMsg = 3;
  bool has_errmsg() const;
  void clear_errmsg();
  static const int kErrMsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // required int32 errCode = 2;
  bool has_errcode() const;
  void clear_errcode();
  static const int kErrCodeFieldNumber = 2;
  ::google::protobuf::int32 errcode() const;
  void set_errcode(::google::protobuf::int32 value);

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional bool hasPartFailure = 4;
  bool has_haspartfailure() const;
  void clear_haspartfailure();
  static const int kHasPartFailureFieldNumber = 4;
  bool haspartfailure() const;
  void set_haspartfailure(bool value);

  // optional bool requireAuth = 6;
  bool has_requireauth() const;
  void clear_requireauth();
  static const int kRequireAuthFieldNumber = 6;
  bool requireauth() const;
  void set_requireauth(bool value);

  // @@protoc_insertion_point(class_scope:HeartBeatResponseB2C)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_errcode();
  void clear_has_errcode();
  void set_has_errmsg();
  void clear_has_errmsg();
  void set_has_haspartfailure();
  void clear_has_haspartfailure();
  void set_has_requireauth();
  void clear_has_requireauth();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> failureinfo_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::int32 errcode_;
  bool success_;
  bool haspartfailure_;
  bool requireauth_;
  friend struct ::protobuf_BrokerService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMessageRequestC2B : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetMessageRequestC2B) */ {
 public:
  GetMessageRequestC2B();
  virtual ~GetMessageRequestC2B();

  GetMessageRequestC2B(const GetMessageRequestC2B& from);

  inline GetMessageRequestC2B& operator=(const GetMessageRequestC2B& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMessageRequestC2B(GetMessageRequestC2B&& from) noexcept
    : GetMessageRequestC2B() {
    *this = ::std::move(from);
  }

  inline GetMessageRequestC2B& operator=(GetMessageRequestC2B&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMessageRequestC2B& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMessageRequestC2B* internal_default_instance() {
    return reinterpret_cast<const GetMessageRequestC2B*>(
               &_GetMessageRequestC2B_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GetMessageRequestC2B* other);
  friend void swap(GetMessageRequestC2B& a, GetMessageRequestC2B& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMessageRequestC2B* New() const final {
    return CreateMaybeMessage<GetMessageRequestC2B>(NULL);
  }

  GetMessageRequestC2B* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMessageRequestC2B>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMessageRequestC2B& from);
  void MergeFrom(const GetMessageRequestC2B& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMessageRequestC2B* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string clientId = 1;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // required string groupName = 3;
  bool has_groupname() const;
  void clear_groupname();
  static const int kGroupNameFieldNumber = 3;
  const ::std::string& groupname() const;
  void set_groupname(const ::std::string& value);
  #if LANG_CXX11
  void set_groupname(::std::string&& value);
  #endif
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  ::std::string* mutable_groupname();
  ::std::string* release_groupname();
  void set_allocated_groupname(::std::string* groupname);

  // required string topicName = 4;
  bool has_topicname() const;
  void clear_topicname();
  static const int kTopicNameFieldNumber = 4;
  const ::std::string& topicname() const;
  void set_topicname(const ::std::string& value);
  #if LANG_CXX11
  void set_topicname(::std::string&& value);
  #endif
  void set_topicname(const char* value);
  void set_topicname(const char* value, size_t size);
  ::std::string* mutable_topicname();
  ::std::string* release_topicname();
  void set_allocated_topicname(::std::string* topicname);

  // required int32 partitionId = 2;
  bool has_partitionid() const;
  void clear_partitionid();
  static const int kPartitionIdFieldNumber = 2;
  ::google::protobuf::int32 partitionid() const;
  void set_partitionid(::google::protobuf::int32 value);

  // optional bool lastPackConsumed = 5;
  bool has_lastpackconsumed() const;
  void clear_lastpackconsumed();
  static const int kLastPackConsumedFieldNumber = 5;
  bool lastpackconsumed() const;
  void set_lastpackconsumed(bool value);

  // optional bool manualCommitOffset = 6;
  bool has_manualcommitoffset() const;
  void clear_manualcommitoffset();
  static const int kManualCommitOffsetFieldNumber = 6;
  bool manualcommitoffset() const;
  void set_manualcommitoffset(bool value);

  // optional bool escFlowCtrl = 7;
  bool has_escflowctrl() const;
  void clear_escflowctrl();
  static const int kEscFlowCtrlFieldNumber = 7;
  bool escflowctrl() const;
  void set_escflowctrl(bool value);

  // @@protoc_insertion_point(class_scope:GetMessageRequestC2B)
 private:
  void set_has_clientid();
  void clear_has_clientid();
  void set_has_partitionid();
  void clear_has_partitionid();
  void set_has_groupname();
  void clear_has_groupname();
  void set_has_topicname();
  void clear_has_topicname();
  void set_has_lastpackconsumed();
  void clear_has_lastpackconsumed();
  void set_has_manualcommitoffset();
  void clear_has_manualcommitoffset();
  void set_has_escflowctrl();
  void clear_has_escflowctrl();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr groupname_;
  ::google::protobuf::internal::ArenaStringPtr topicname_;
  ::google::protobuf::int32 partitionid_;
  bool lastpackconsumed_;
  bool manualcommitoffset_;
  bool escflowctrl_;
  friend struct ::protobuf_BrokerService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMessageResponseB2C : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GetMessageResponseB2C) */ {
 public:
  GetMessageResponseB2C();
  virtual ~GetMessageResponseB2C();

  GetMessageResponseB2C(const GetMessageResponseB2C& from);

  inline GetMessageResponseB2C& operator=(const GetMessageResponseB2C& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMessageResponseB2C(GetMessageResponseB2C&& from) noexcept
    : GetMessageResponseB2C() {
    *this = ::std::move(from);
  }

  inline GetMessageResponseB2C& operator=(GetMessageResponseB2C&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMessageResponseB2C& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMessageResponseB2C* internal_default_instance() {
    return reinterpret_cast<const GetMessageResponseB2C*>(
               &_GetMessageResponseB2C_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetMessageResponseB2C* other);
  friend void swap(GetMessageResponseB2C& a, GetMessageResponseB2C& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMessageResponseB2C* New() const final {
    return CreateMaybeMessage<GetMessageResponseB2C>(NULL);
  }

  GetMessageResponseB2C* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMessageResponseB2C>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMessageResponseB2C& from);
  void MergeFrom(const GetMessageResponseB2C& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMessageResponseB2C* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TransferedMessage messages = 4;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 4;
  ::TransferedMessage* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::TransferedMessage >*
      mutable_messages();
  const ::TransferedMessage& messages(int index) const;
  ::TransferedMessage* add_messages();
  const ::google::protobuf::RepeatedPtrField< ::TransferedMessage >&
      messages() const;

  // optional string errMsg = 3;
  bool has_errmsg() const;
  void clear_errmsg();
  static const int kErrMsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // required int32 errCode = 2;
  bool has_errcode() const;
  void clear_errcode();
  static const int kErrCodeFieldNumber = 2;
  ::google::protobuf::int32 errcode() const;
  void set_errcode(::google::protobuf::int32 value);

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional bool escFlowCtrl = 7;
  bool has_escflowctrl() const;
  void clear_escflowctrl();
  static const int kEscFlowCtrlFieldNumber = 7;
  bool escflowctrl() const;
  void set_escflowctrl(bool value);

  // optional bool requireSlow = 9;
  bool has_requireslow() const;
  void clear_requireslow();
  static const int kRequireSlowFieldNumber = 9;
  bool requireslow() const;
  void set_requireslow(bool value);

  // optional int64 currOffset = 5;
  bool has_curroffset() const;
  void clear_curroffset();
  static const int kCurrOffsetFieldNumber = 5;
  ::google::protobuf::int64 curroffset() const;
  void set_curroffset(::google::protobuf::int64 value);

  // optional int64 currDataDlt = 8;
  bool has_currdatadlt() const;
  void clear_currdatadlt();
  static const int kCurrDataDltFieldNumber = 8;
  ::google::protobuf::int64 currdatadlt() const;
  void set_currdatadlt(::google::protobuf::int64 value);

  // optional int32 minLimitTime = 6;
  bool has_minlimittime() const;
  void clear_minlimittime();
  static const int kMinLimitTimeFieldNumber = 6;
  ::google::protobuf::int32 minlimittime() const;
  void set_minlimittime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GetMessageResponseB2C)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_errcode();
  void clear_has_errcode();
  void set_has_errmsg();
  void clear_has_errmsg();
  void set_has_curroffset();
  void clear_has_curroffset();
  void set_has_minlimittime();
  void clear_has_minlimittime();
  void set_has_escflowctrl();
  void clear_has_escflowctrl();
  void set_has_currdatadlt();
  void clear_has_currdatadlt();
  void set_has_requireslow();
  void clear_has_requireslow();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TransferedMessage > messages_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::int32 errcode_;
  bool success_;
  bool escflowctrl_;
  bool requireslow_;
  ::google::protobuf::int64 curroffset_;
  ::google::protobuf::int64 currdatadlt_;
  ::google::protobuf::int32 minlimittime_;
  friend struct ::protobuf_BrokerService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommitOffsetRequestC2B : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CommitOffsetRequestC2B) */ {
 public:
  CommitOffsetRequestC2B();
  virtual ~CommitOffsetRequestC2B();

  CommitOffsetRequestC2B(const CommitOffsetRequestC2B& from);

  inline CommitOffsetRequestC2B& operator=(const CommitOffsetRequestC2B& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommitOffsetRequestC2B(CommitOffsetRequestC2B&& from) noexcept
    : CommitOffsetRequestC2B() {
    *this = ::std::move(from);
  }

  inline CommitOffsetRequestC2B& operator=(CommitOffsetRequestC2B&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitOffsetRequestC2B& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitOffsetRequestC2B* internal_default_instance() {
    return reinterpret_cast<const CommitOffsetRequestC2B*>(
               &_CommitOffsetRequestC2B_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(CommitOffsetRequestC2B* other);
  friend void swap(CommitOffsetRequestC2B& a, CommitOffsetRequestC2B& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommitOffsetRequestC2B* New() const final {
    return CreateMaybeMessage<CommitOffsetRequestC2B>(NULL);
  }

  CommitOffsetRequestC2B* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommitOffsetRequestC2B>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommitOffsetRequestC2B& from);
  void MergeFrom(const CommitOffsetRequestC2B& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitOffsetRequestC2B* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string clientId = 1;
  bool has_clientid() const;
  void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // required string topicName = 2;
  bool has_topicname() const;
  void clear_topicname();
  static const int kTopicNameFieldNumber = 2;
  const ::std::string& topicname() const;
  void set_topicname(const ::std::string& value);
  #if LANG_CXX11
  void set_topicname(::std::string&& value);
  #endif
  void set_topicname(const char* value);
  void set_topicname(const char* value, size_t size);
  ::std::string* mutable_topicname();
  ::std::string* release_topicname();
  void set_allocated_topicname(::std::string* topicname);

  // required string groupName = 4;
  bool has_groupname() const;
  void clear_groupname();
  static const int kGroupNameFieldNumber = 4;
  const ::std::string& groupname() const;
  void set_groupname(const ::std::string& value);
  #if LANG_CXX11
  void set_groupname(::std::string&& value);
  #endif
  void set_groupname(const char* value);
  void set_groupname(const char* value, size_t size);
  ::std::string* mutable_groupname();
  ::std::string* release_groupname();
  void set_allocated_groupname(::std::string* groupname);

  // required int32 partitionId = 3;
  bool has_partitionid() const;
  void clear_partitionid();
  static const int kPartitionIdFieldNumber = 3;
  ::google::protobuf::int32 partitionid() const;
  void set_partitionid(::google::protobuf::int32 value);

  // optional bool lastPackConsumed = 5;
  bool has_lastpackconsumed() const;
  void clear_lastpackconsumed();
  static const int kLastPackConsumedFieldNumber = 5;
  bool lastpackconsumed() const;
  void set_lastpackconsumed(bool value);

  // @@protoc_insertion_point(class_scope:CommitOffsetRequestC2B)
 private:
  void set_has_clientid();
  void clear_has_clientid();
  void set_has_topicname();
  void clear_has_topicname();
  void set_has_partitionid();
  void clear_has_partitionid();
  void set_has_groupname();
  void clear_has_groupname();
  void set_has_lastpackconsumed();
  void clear_has_lastpackconsumed();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr topicname_;
  ::google::protobuf::internal::ArenaStringPtr groupname_;
  ::google::protobuf::int32 partitionid_;
  bool lastpackconsumed_;
  friend struct ::protobuf_BrokerService_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommitOffsetResponseB2C : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:CommitOffsetResponseB2C) */ {
 public:
  CommitOffsetResponseB2C();
  virtual ~CommitOffsetResponseB2C();

  CommitOffsetResponseB2C(const CommitOffsetResponseB2C& from);

  inline CommitOffsetResponseB2C& operator=(const CommitOffsetResponseB2C& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommitOffsetResponseB2C(CommitOffsetResponseB2C&& from) noexcept
    : CommitOffsetResponseB2C() {
    *this = ::std::move(from);
  }

  inline CommitOffsetResponseB2C& operator=(CommitOffsetResponseB2C&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitOffsetResponseB2C& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommitOffsetResponseB2C* internal_default_instance() {
    return reinterpret_cast<const CommitOffsetResponseB2C*>(
               &_CommitOffsetResponseB2C_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CommitOffsetResponseB2C* other);
  friend void swap(CommitOffsetResponseB2C& a, CommitOffsetResponseB2C& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommitOffsetResponseB2C* New() const final {
    return CreateMaybeMessage<CommitOffsetResponseB2C>(NULL);
  }

  CommitOffsetResponseB2C* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommitOffsetResponseB2C>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommitOffsetResponseB2C& from);
  void MergeFrom(const CommitOffsetResponseB2C& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitOffsetResponseB2C* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string errMsg = 3;
  bool has_errmsg() const;
  void clear_errmsg();
  static const int kErrMsgFieldNumber = 3;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // required int32 errCode = 2;
  bool has_errcode() const;
  void clear_errcode();
  static const int kErrCodeFieldNumber = 2;
  ::google::protobuf::int32 errcode() const;
  void set_errcode(::google::protobuf::int32 value);

  // optional int64 currOffset = 4;
  bool has_curroffset() const;
  void clear_curroffset();
  static const int kCurrOffsetFieldNumber = 4;
  ::google::protobuf::int64 curroffset() const;
  void set_curroffset(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CommitOffsetResponseB2C)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_errcode();
  void clear_has_errcode();
  void set_has_errmsg();
  void clear_has_errmsg();
  void set_has_curroffset();
  void clear_has_curroffset();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  bool success_;
  ::google::protobuf::int32 errcode_;
  ::google::protobuf::int64 curroffset_;
  friend struct ::protobuf_BrokerService_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransferedMessage

// required int64 messageId = 1;
inline bool TransferedMessage::has_messageid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransferedMessage::set_has_messageid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransferedMessage::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransferedMessage::clear_messageid() {
  messageid_ = GOOGLE_LONGLONG(0);
  clear_has_messageid();
}
inline ::google::protobuf::int64 TransferedMessage::messageid() const {
  // @@protoc_insertion_point(field_get:TransferedMessage.messageId)
  return messageid_;
}
inline void TransferedMessage::set_messageid(::google::protobuf::int64 value) {
  set_has_messageid();
  messageid_ = value;
  // @@protoc_insertion_point(field_set:TransferedMessage.messageId)
}

// required int32 checkSum = 2;
inline bool TransferedMessage::has_checksum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransferedMessage::set_has_checksum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransferedMessage::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransferedMessage::clear_checksum() {
  checksum_ = 0;
  clear_has_checksum();
}
inline ::google::protobuf::int32 TransferedMessage::checksum() const {
  // @@protoc_insertion_point(field_get:TransferedMessage.checkSum)
  return checksum_;
}
inline void TransferedMessage::set_checksum(::google::protobuf::int32 value) {
  set_has_checksum();
  checksum_ = value;
  // @@protoc_insertion_point(field_set:TransferedMessage.checkSum)
}

// required bytes payLoadData = 3;
inline bool TransferedMessage::has_payloaddata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransferedMessage::set_has_payloaddata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransferedMessage::clear_has_payloaddata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransferedMessage::clear_payloaddata() {
  payloaddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payloaddata();
}
inline const ::std::string& TransferedMessage::payloaddata() const {
  // @@protoc_insertion_point(field_get:TransferedMessage.payLoadData)
  return payloaddata_.GetNoArena();
}
inline void TransferedMessage::set_payloaddata(const ::std::string& value) {
  set_has_payloaddata();
  payloaddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TransferedMessage.payLoadData)
}
#if LANG_CXX11
inline void TransferedMessage::set_payloaddata(::std::string&& value) {
  set_has_payloaddata();
  payloaddata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TransferedMessage.payLoadData)
}
#endif
inline void TransferedMessage::set_payloaddata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payloaddata();
  payloaddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TransferedMessage.payLoadData)
}
inline void TransferedMessage::set_payloaddata(const void* value, size_t size) {
  set_has_payloaddata();
  payloaddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TransferedMessage.payLoadData)
}
inline ::std::string* TransferedMessage::mutable_payloaddata() {
  set_has_payloaddata();
  // @@protoc_insertion_point(field_mutable:TransferedMessage.payLoadData)
  return payloaddata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferedMessage::release_payloaddata() {
  // @@protoc_insertion_point(field_release:TransferedMessage.payLoadData)
  if (!has_payloaddata()) {
    return NULL;
  }
  clear_has_payloaddata();
  return payloaddata_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferedMessage::set_allocated_payloaddata(::std::string* payloaddata) {
  if (payloaddata != NULL) {
    set_has_payloaddata();
  } else {
    clear_has_payloaddata();
  }
  payloaddata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payloaddata);
  // @@protoc_insertion_point(field_set_allocated:TransferedMessage.payLoadData)
}

// required int32 flag = 4;
inline bool TransferedMessage::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransferedMessage::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransferedMessage::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransferedMessage::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 TransferedMessage::flag() const {
  // @@protoc_insertion_point(field_get:TransferedMessage.flag)
  return flag_;
}
inline void TransferedMessage::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:TransferedMessage.flag)
}

// -------------------------------------------------------------------

// AuthorizedInfo

// required int64 visitAuthorizedToken = 1;
inline bool AuthorizedInfo::has_visitauthorizedtoken() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthorizedInfo::set_has_visitauthorizedtoken() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthorizedInfo::clear_has_visitauthorizedtoken() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthorizedInfo::clear_visitauthorizedtoken() {
  visitauthorizedtoken_ = GOOGLE_LONGLONG(0);
  clear_has_visitauthorizedtoken();
}
inline ::google::protobuf::int64 AuthorizedInfo::visitauthorizedtoken() const {
  // @@protoc_insertion_point(field_get:AuthorizedInfo.visitAuthorizedToken)
  return visitauthorizedtoken_;
}
inline void AuthorizedInfo::set_visitauthorizedtoken(::google::protobuf::int64 value) {
  set_has_visitauthorizedtoken();
  visitauthorizedtoken_ = value;
  // @@protoc_insertion_point(field_set:AuthorizedInfo.visitAuthorizedToken)
}

// optional string authAuthorizedToken = 2;
inline bool AuthorizedInfo::has_authauthorizedtoken() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthorizedInfo::set_has_authauthorizedtoken() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthorizedInfo::clear_has_authauthorizedtoken() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthorizedInfo::clear_authauthorizedtoken() {
  authauthorizedtoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authauthorizedtoken();
}
inline const ::std::string& AuthorizedInfo::authauthorizedtoken() const {
  // @@protoc_insertion_point(field_get:AuthorizedInfo.authAuthorizedToken)
  return authauthorizedtoken_.GetNoArena();
}
inline void AuthorizedInfo::set_authauthorizedtoken(const ::std::string& value) {
  set_has_authauthorizedtoken();
  authauthorizedtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AuthorizedInfo.authAuthorizedToken)
}
#if LANG_CXX11
inline void AuthorizedInfo::set_authauthorizedtoken(::std::string&& value) {
  set_has_authauthorizedtoken();
  authauthorizedtoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AuthorizedInfo.authAuthorizedToken)
}
#endif
inline void AuthorizedInfo::set_authauthorizedtoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_authauthorizedtoken();
  authauthorizedtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AuthorizedInfo.authAuthorizedToken)
}
inline void AuthorizedInfo::set_authauthorizedtoken(const char* value, size_t size) {
  set_has_authauthorizedtoken();
  authauthorizedtoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AuthorizedInfo.authAuthorizedToken)
}
inline ::std::string* AuthorizedInfo::mutable_authauthorizedtoken() {
  set_has_authauthorizedtoken();
  // @@protoc_insertion_point(field_mutable:AuthorizedInfo.authAuthorizedToken)
  return authauthorizedtoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthorizedInfo::release_authauthorizedtoken() {
  // @@protoc_insertion_point(field_release:AuthorizedInfo.authAuthorizedToken)
  if (!has_authauthorizedtoken()) {
    return NULL;
  }
  clear_has_authauthorizedtoken();
  return authauthorizedtoken_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthorizedInfo::set_allocated_authauthorizedtoken(::std::string* authauthorizedtoken) {
  if (authauthorizedtoken != NULL) {
    set_has_authauthorizedtoken();
  } else {
    clear_has_authauthorizedtoken();
  }
  authauthorizedtoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authauthorizedtoken);
  // @@protoc_insertion_point(field_set_allocated:AuthorizedInfo.authAuthorizedToken)
}

// -------------------------------------------------------------------

// SendMessageRequestP2B

// required string clientId = 1;
inline bool SendMessageRequestP2B::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendMessageRequestP2B::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendMessageRequestP2B::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendMessageRequestP2B::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
inline const ::std::string& SendMessageRequestP2B::clientid() const {
  // @@protoc_insertion_point(field_get:SendMessageRequestP2B.clientId)
  return clientid_.GetNoArena();
}
inline void SendMessageRequestP2B::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SendMessageRequestP2B.clientId)
}
#if LANG_CXX11
inline void SendMessageRequestP2B::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SendMessageRequestP2B.clientId)
}
#endif
inline void SendMessageRequestP2B::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SendMessageRequestP2B.clientId)
}
inline void SendMessageRequestP2B::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SendMessageRequestP2B.clientId)
}
inline ::std::string* SendMessageRequestP2B::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:SendMessageRequestP2B.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageRequestP2B::release_clientid() {
  // @@protoc_insertion_point(field_release:SendMessageRequestP2B.clientId)
  if (!has_clientid()) {
    return NULL;
  }
  clear_has_clientid();
  return clientid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequestP2B::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:SendMessageRequestP2B.clientId)
}

// required string topicName = 2;
inline bool SendMessageRequestP2B::has_topicname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendMessageRequestP2B::set_has_topicname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendMessageRequestP2B::clear_has_topicname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendMessageRequestP2B::clear_topicname() {
  topicname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topicname();
}
inline const ::std::string& SendMessageRequestP2B::topicname() const {
  // @@protoc_insertion_point(field_get:SendMessageRequestP2B.topicName)
  return topicname_.GetNoArena();
}
inline void SendMessageRequestP2B::set_topicname(const ::std::string& value) {
  set_has_topicname();
  topicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SendMessageRequestP2B.topicName)
}
#if LANG_CXX11
inline void SendMessageRequestP2B::set_topicname(::std::string&& value) {
  set_has_topicname();
  topicname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SendMessageRequestP2B.topicName)
}
#endif
inline void SendMessageRequestP2B::set_topicname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_topicname();
  topicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SendMessageRequestP2B.topicName)
}
inline void SendMessageRequestP2B::set_topicname(const char* value, size_t size) {
  set_has_topicname();
  topicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SendMessageRequestP2B.topicName)
}
inline ::std::string* SendMessageRequestP2B::mutable_topicname() {
  set_has_topicname();
  // @@protoc_insertion_point(field_mutable:SendMessageRequestP2B.topicName)
  return topicname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageRequestP2B::release_topicname() {
  // @@protoc_insertion_point(field_release:SendMessageRequestP2B.topicName)
  if (!has_topicname()) {
    return NULL;
  }
  clear_has_topicname();
  return topicname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequestP2B::set_allocated_topicname(::std::string* topicname) {
  if (topicname != NULL) {
    set_has_topicname();
  } else {
    clear_has_topicname();
  }
  topicname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topicname);
  // @@protoc_insertion_point(field_set_allocated:SendMessageRequestP2B.topicName)
}

// required int32 partitionId = 3;
inline bool SendMessageRequestP2B::has_partitionid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SendMessageRequestP2B::set_has_partitionid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SendMessageRequestP2B::clear_has_partitionid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SendMessageRequestP2B::clear_partitionid() {
  partitionid_ = 0;
  clear_has_partitionid();
}
inline ::google::protobuf::int32 SendMessageRequestP2B::partitionid() const {
  // @@protoc_insertion_point(field_get:SendMessageRequestP2B.partitionId)
  return partitionid_;
}
inline void SendMessageRequestP2B::set_partitionid(::google::protobuf::int32 value) {
  set_has_partitionid();
  partitionid_ = value;
  // @@protoc_insertion_point(field_set:SendMessageRequestP2B.partitionId)
}

// required bytes data = 4;
inline bool SendMessageRequestP2B::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendMessageRequestP2B::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendMessageRequestP2B::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendMessageRequestP2B::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& SendMessageRequestP2B::data() const {
  // @@protoc_insertion_point(field_get:SendMessageRequestP2B.data)
  return data_.GetNoArena();
}
inline void SendMessageRequestP2B::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SendMessageRequestP2B.data)
}
#if LANG_CXX11
inline void SendMessageRequestP2B::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SendMessageRequestP2B.data)
}
#endif
inline void SendMessageRequestP2B::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SendMessageRequestP2B.data)
}
inline void SendMessageRequestP2B::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SendMessageRequestP2B.data)
}
inline ::std::string* SendMessageRequestP2B::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:SendMessageRequestP2B.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageRequestP2B::release_data() {
  // @@protoc_insertion_point(field_release:SendMessageRequestP2B.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequestP2B::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:SendMessageRequestP2B.data)
}

// required int32 flag = 5;
inline bool SendMessageRequestP2B::has_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SendMessageRequestP2B::set_has_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SendMessageRequestP2B::clear_has_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SendMessageRequestP2B::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 SendMessageRequestP2B::flag() const {
  // @@protoc_insertion_point(field_get:SendMessageRequestP2B.flag)
  return flag_;
}
inline void SendMessageRequestP2B::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:SendMessageRequestP2B.flag)
}

// required int32 checkSum = 6;
inline bool SendMessageRequestP2B::has_checksum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SendMessageRequestP2B::set_has_checksum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SendMessageRequestP2B::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SendMessageRequestP2B::clear_checksum() {
  checksum_ = 0;
  clear_has_checksum();
}
inline ::google::protobuf::int32 SendMessageRequestP2B::checksum() const {
  // @@protoc_insertion_point(field_get:SendMessageRequestP2B.checkSum)
  return checksum_;
}
inline void SendMessageRequestP2B::set_checksum(::google::protobuf::int32 value) {
  set_has_checksum();
  checksum_ = value;
  // @@protoc_insertion_point(field_set:SendMessageRequestP2B.checkSum)
}

// required int32 sentAddr = 7;
inline bool SendMessageRequestP2B::has_sentaddr() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SendMessageRequestP2B::set_has_sentaddr() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SendMessageRequestP2B::clear_has_sentaddr() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SendMessageRequestP2B::clear_sentaddr() {
  sentaddr_ = 0;
  clear_has_sentaddr();
}
inline ::google::protobuf::int32 SendMessageRequestP2B::sentaddr() const {
  // @@protoc_insertion_point(field_get:SendMessageRequestP2B.sentAddr)
  return sentaddr_;
}
inline void SendMessageRequestP2B::set_sentaddr(::google::protobuf::int32 value) {
  set_has_sentaddr();
  sentaddr_ = value;
  // @@protoc_insertion_point(field_set:SendMessageRequestP2B.sentAddr)
}

// optional string msgType = 8;
inline bool SendMessageRequestP2B::has_msgtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendMessageRequestP2B::set_has_msgtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendMessageRequestP2B::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendMessageRequestP2B::clear_msgtype() {
  msgtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgtype();
}
inline const ::std::string& SendMessageRequestP2B::msgtype() const {
  // @@protoc_insertion_point(field_get:SendMessageRequestP2B.msgType)
  return msgtype_.GetNoArena();
}
inline void SendMessageRequestP2B::set_msgtype(const ::std::string& value) {
  set_has_msgtype();
  msgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SendMessageRequestP2B.msgType)
}
#if LANG_CXX11
inline void SendMessageRequestP2B::set_msgtype(::std::string&& value) {
  set_has_msgtype();
  msgtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SendMessageRequestP2B.msgType)
}
#endif
inline void SendMessageRequestP2B::set_msgtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgtype();
  msgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SendMessageRequestP2B.msgType)
}
inline void SendMessageRequestP2B::set_msgtype(const char* value, size_t size) {
  set_has_msgtype();
  msgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SendMessageRequestP2B.msgType)
}
inline ::std::string* SendMessageRequestP2B::mutable_msgtype() {
  set_has_msgtype();
  // @@protoc_insertion_point(field_mutable:SendMessageRequestP2B.msgType)
  return msgtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageRequestP2B::release_msgtype() {
  // @@protoc_insertion_point(field_release:SendMessageRequestP2B.msgType)
  if (!has_msgtype()) {
    return NULL;
  }
  clear_has_msgtype();
  return msgtype_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequestP2B::set_allocated_msgtype(::std::string* msgtype) {
  if (msgtype != NULL) {
    set_has_msgtype();
  } else {
    clear_has_msgtype();
  }
  msgtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgtype);
  // @@protoc_insertion_point(field_set_allocated:SendMessageRequestP2B.msgType)
}

// optional string msgTime = 9;
inline bool SendMessageRequestP2B::has_msgtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendMessageRequestP2B::set_has_msgtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SendMessageRequestP2B::clear_has_msgtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SendMessageRequestP2B::clear_msgtime() {
  msgtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgtime();
}
inline const ::std::string& SendMessageRequestP2B::msgtime() const {
  // @@protoc_insertion_point(field_get:SendMessageRequestP2B.msgTime)
  return msgtime_.GetNoArena();
}
inline void SendMessageRequestP2B::set_msgtime(const ::std::string& value) {
  set_has_msgtime();
  msgtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SendMessageRequestP2B.msgTime)
}
#if LANG_CXX11
inline void SendMessageRequestP2B::set_msgtime(::std::string&& value) {
  set_has_msgtime();
  msgtime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SendMessageRequestP2B.msgTime)
}
#endif
inline void SendMessageRequestP2B::set_msgtime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgtime();
  msgtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SendMessageRequestP2B.msgTime)
}
inline void SendMessageRequestP2B::set_msgtime(const char* value, size_t size) {
  set_has_msgtime();
  msgtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SendMessageRequestP2B.msgTime)
}
inline ::std::string* SendMessageRequestP2B::mutable_msgtime() {
  set_has_msgtime();
  // @@protoc_insertion_point(field_mutable:SendMessageRequestP2B.msgTime)
  return msgtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageRequestP2B::release_msgtime() {
  // @@protoc_insertion_point(field_release:SendMessageRequestP2B.msgTime)
  if (!has_msgtime()) {
    return NULL;
  }
  clear_has_msgtime();
  return msgtime_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequestP2B::set_allocated_msgtime(::std::string* msgtime) {
  if (msgtime != NULL) {
    set_has_msgtime();
  } else {
    clear_has_msgtime();
  }
  msgtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgtime);
  // @@protoc_insertion_point(field_set_allocated:SendMessageRequestP2B.msgTime)
}

// optional .AuthorizedInfo authInfo = 10;
inline bool SendMessageRequestP2B::has_authinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SendMessageRequestP2B::set_has_authinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SendMessageRequestP2B::clear_has_authinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SendMessageRequestP2B::clear_authinfo() {
  if (authinfo_ != NULL) authinfo_->Clear();
  clear_has_authinfo();
}
inline const ::AuthorizedInfo& SendMessageRequestP2B::_internal_authinfo() const {
  return *authinfo_;
}
inline const ::AuthorizedInfo& SendMessageRequestP2B::authinfo() const {
  const ::AuthorizedInfo* p = authinfo_;
  // @@protoc_insertion_point(field_get:SendMessageRequestP2B.authInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::AuthorizedInfo*>(
      &::_AuthorizedInfo_default_instance_);
}
inline ::AuthorizedInfo* SendMessageRequestP2B::release_authinfo() {
  // @@protoc_insertion_point(field_release:SendMessageRequestP2B.authInfo)
  clear_has_authinfo();
  ::AuthorizedInfo* temp = authinfo_;
  authinfo_ = NULL;
  return temp;
}
inline ::AuthorizedInfo* SendMessageRequestP2B::mutable_authinfo() {
  set_has_authinfo();
  if (authinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::AuthorizedInfo>(GetArenaNoVirtual());
    authinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SendMessageRequestP2B.authInfo)
  return authinfo_;
}
inline void SendMessageRequestP2B::set_allocated_authinfo(::AuthorizedInfo* authinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete authinfo_;
  }
  if (authinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      authinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, authinfo, submessage_arena);
    }
    set_has_authinfo();
  } else {
    clear_has_authinfo();
  }
  authinfo_ = authinfo;
  // @@protoc_insertion_point(field_set_allocated:SendMessageRequestP2B.authInfo)
}

// -------------------------------------------------------------------

// SendMessageResponseB2P

// required bool success = 1;
inline bool SendMessageResponseB2P::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendMessageResponseB2P::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendMessageResponseB2P::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendMessageResponseB2P::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool SendMessageResponseB2P::success() const {
  // @@protoc_insertion_point(field_get:SendMessageResponseB2P.success)
  return success_;
}
inline void SendMessageResponseB2P::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:SendMessageResponseB2P.success)
}

// required int32 errCode = 2;
inline bool SendMessageResponseB2P::has_errcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendMessageResponseB2P::set_has_errcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendMessageResponseB2P::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendMessageResponseB2P::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 SendMessageResponseB2P::errcode() const {
  // @@protoc_insertion_point(field_get:SendMessageResponseB2P.errCode)
  return errcode_;
}
inline void SendMessageResponseB2P::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:SendMessageResponseB2P.errCode)
}

// required string errMsg = 3;
inline bool SendMessageResponseB2P::has_errmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendMessageResponseB2P::set_has_errmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendMessageResponseB2P::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendMessageResponseB2P::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errmsg();
}
inline const ::std::string& SendMessageResponseB2P::errmsg() const {
  // @@protoc_insertion_point(field_get:SendMessageResponseB2P.errMsg)
  return errmsg_.GetNoArena();
}
inline void SendMessageResponseB2P::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SendMessageResponseB2P.errMsg)
}
#if LANG_CXX11
inline void SendMessageResponseB2P::set_errmsg(::std::string&& value) {
  set_has_errmsg();
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SendMessageResponseB2P.errMsg)
}
#endif
inline void SendMessageResponseB2P::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SendMessageResponseB2P.errMsg)
}
inline void SendMessageResponseB2P::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SendMessageResponseB2P.errMsg)
}
inline ::std::string* SendMessageResponseB2P::mutable_errmsg() {
  set_has_errmsg();
  // @@protoc_insertion_point(field_mutable:SendMessageResponseB2P.errMsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageResponseB2P::release_errmsg() {
  // @@protoc_insertion_point(field_release:SendMessageResponseB2P.errMsg)
  if (!has_errmsg()) {
    return NULL;
  }
  clear_has_errmsg();
  return errmsg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageResponseB2P::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    set_has_errmsg();
  } else {
    clear_has_errmsg();
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:SendMessageResponseB2P.errMsg)
}

// optional bool requireAuth = 4;
inline bool SendMessageResponseB2P::has_requireauth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendMessageResponseB2P::set_has_requireauth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendMessageResponseB2P::clear_has_requireauth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendMessageResponseB2P::clear_requireauth() {
  requireauth_ = false;
  clear_has_requireauth();
}
inline bool SendMessageResponseB2P::requireauth() const {
  // @@protoc_insertion_point(field_get:SendMessageResponseB2P.requireAuth)
  return requireauth_;
}
inline void SendMessageResponseB2P::set_requireauth(bool value) {
  set_has_requireauth();
  requireauth_ = value;
  // @@protoc_insertion_point(field_set:SendMessageResponseB2P.requireAuth)
}

// -------------------------------------------------------------------

// RegisterRequestC2B

// required int32 opType = 1;
inline bool RegisterRequestC2B::has_optype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegisterRequestC2B::set_has_optype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegisterRequestC2B::clear_has_optype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegisterRequestC2B::clear_optype() {
  optype_ = 0;
  clear_has_optype();
}
inline ::google::protobuf::int32 RegisterRequestC2B::optype() const {
  // @@protoc_insertion_point(field_get:RegisterRequestC2B.opType)
  return optype_;
}
inline void RegisterRequestC2B::set_optype(::google::protobuf::int32 value) {
  set_has_optype();
  optype_ = value;
  // @@protoc_insertion_point(field_set:RegisterRequestC2B.opType)
}

// required string clientId = 2;
inline bool RegisterRequestC2B::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterRequestC2B::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterRequestC2B::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterRequestC2B::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
inline const ::std::string& RegisterRequestC2B::clientid() const {
  // @@protoc_insertion_point(field_get:RegisterRequestC2B.clientId)
  return clientid_.GetNoArena();
}
inline void RegisterRequestC2B::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegisterRequestC2B.clientId)
}
#if LANG_CXX11
inline void RegisterRequestC2B::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequestC2B.clientId)
}
#endif
inline void RegisterRequestC2B::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterRequestC2B.clientId)
}
inline void RegisterRequestC2B::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterRequestC2B.clientId)
}
inline ::std::string* RegisterRequestC2B::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:RegisterRequestC2B.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequestC2B::release_clientid() {
  // @@protoc_insertion_point(field_release:RegisterRequestC2B.clientId)
  if (!has_clientid()) {
    return NULL;
  }
  clear_has_clientid();
  return clientid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequestC2B::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:RegisterRequestC2B.clientId)
}

// required string groupName = 3;
inline bool RegisterRequestC2B::has_groupname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterRequestC2B::set_has_groupname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterRequestC2B::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterRequestC2B::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupname();
}
inline const ::std::string& RegisterRequestC2B::groupname() const {
  // @@protoc_insertion_point(field_get:RegisterRequestC2B.groupName)
  return groupname_.GetNoArena();
}
inline void RegisterRequestC2B::set_groupname(const ::std::string& value) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegisterRequestC2B.groupName)
}
#if LANG_CXX11
inline void RegisterRequestC2B::set_groupname(::std::string&& value) {
  set_has_groupname();
  groupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequestC2B.groupName)
}
#endif
inline void RegisterRequestC2B::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterRequestC2B.groupName)
}
inline void RegisterRequestC2B::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterRequestC2B.groupName)
}
inline ::std::string* RegisterRequestC2B::mutable_groupname() {
  set_has_groupname();
  // @@protoc_insertion_point(field_mutable:RegisterRequestC2B.groupName)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequestC2B::release_groupname() {
  // @@protoc_insertion_point(field_release:RegisterRequestC2B.groupName)
  if (!has_groupname()) {
    return NULL;
  }
  clear_has_groupname();
  return groupname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequestC2B::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    set_has_groupname();
  } else {
    clear_has_groupname();
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:RegisterRequestC2B.groupName)
}

// required string topicName = 4;
inline bool RegisterRequestC2B::has_topicname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterRequestC2B::set_has_topicname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegisterRequestC2B::clear_has_topicname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegisterRequestC2B::clear_topicname() {
  topicname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topicname();
}
inline const ::std::string& RegisterRequestC2B::topicname() const {
  // @@protoc_insertion_point(field_get:RegisterRequestC2B.topicName)
  return topicname_.GetNoArena();
}
inline void RegisterRequestC2B::set_topicname(const ::std::string& value) {
  set_has_topicname();
  topicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegisterRequestC2B.topicName)
}
#if LANG_CXX11
inline void RegisterRequestC2B::set_topicname(::std::string&& value) {
  set_has_topicname();
  topicname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequestC2B.topicName)
}
#endif
inline void RegisterRequestC2B::set_topicname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_topicname();
  topicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterRequestC2B.topicName)
}
inline void RegisterRequestC2B::set_topicname(const char* value, size_t size) {
  set_has_topicname();
  topicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterRequestC2B.topicName)
}
inline ::std::string* RegisterRequestC2B::mutable_topicname() {
  set_has_topicname();
  // @@protoc_insertion_point(field_mutable:RegisterRequestC2B.topicName)
  return topicname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequestC2B::release_topicname() {
  // @@protoc_insertion_point(field_release:RegisterRequestC2B.topicName)
  if (!has_topicname()) {
    return NULL;
  }
  clear_has_topicname();
  return topicname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequestC2B::set_allocated_topicname(::std::string* topicname) {
  if (topicname != NULL) {
    set_has_topicname();
  } else {
    clear_has_topicname();
  }
  topicname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topicname);
  // @@protoc_insertion_point(field_set_allocated:RegisterRequestC2B.topicName)
}

// required int32 partitionId = 5;
inline bool RegisterRequestC2B::has_partitionid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegisterRequestC2B::set_has_partitionid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RegisterRequestC2B::clear_has_partitionid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RegisterRequestC2B::clear_partitionid() {
  partitionid_ = 0;
  clear_has_partitionid();
}
inline ::google::protobuf::int32 RegisterRequestC2B::partitionid() const {
  // @@protoc_insertion_point(field_get:RegisterRequestC2B.partitionId)
  return partitionid_;
}
inline void RegisterRequestC2B::set_partitionid(::google::protobuf::int32 value) {
  set_has_partitionid();
  partitionid_ = value;
  // @@protoc_insertion_point(field_set:RegisterRequestC2B.partitionId)
}

// required int32 readStatus = 6;
inline bool RegisterRequestC2B::has_readstatus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RegisterRequestC2B::set_has_readstatus() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RegisterRequestC2B::clear_has_readstatus() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RegisterRequestC2B::clear_readstatus() {
  readstatus_ = 0;
  clear_has_readstatus();
}
inline ::google::protobuf::int32 RegisterRequestC2B::readstatus() const {
  // @@protoc_insertion_point(field_get:RegisterRequestC2B.readStatus)
  return readstatus_;
}
inline void RegisterRequestC2B::set_readstatus(::google::protobuf::int32 value) {
  set_has_readstatus();
  readstatus_ = value;
  // @@protoc_insertion_point(field_set:RegisterRequestC2B.readStatus)
}

// repeated string filterCondStr = 7;
inline int RegisterRequestC2B::filtercondstr_size() const {
  return filtercondstr_.size();
}
inline void RegisterRequestC2B::clear_filtercondstr() {
  filtercondstr_.Clear();
}
inline const ::std::string& RegisterRequestC2B::filtercondstr(int index) const {
  // @@protoc_insertion_point(field_get:RegisterRequestC2B.filterCondStr)
  return filtercondstr_.Get(index);
}
inline ::std::string* RegisterRequestC2B::mutable_filtercondstr(int index) {
  // @@protoc_insertion_point(field_mutable:RegisterRequestC2B.filterCondStr)
  return filtercondstr_.Mutable(index);
}
inline void RegisterRequestC2B::set_filtercondstr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:RegisterRequestC2B.filterCondStr)
  filtercondstr_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void RegisterRequestC2B::set_filtercondstr(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:RegisterRequestC2B.filterCondStr)
  filtercondstr_.Mutable(index)->assign(std::move(value));
}
#endif
inline void RegisterRequestC2B::set_filtercondstr(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  filtercondstr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RegisterRequestC2B.filterCondStr)
}
inline void RegisterRequestC2B::set_filtercondstr(int index, const char* value, size_t size) {
  filtercondstr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RegisterRequestC2B.filterCondStr)
}
inline ::std::string* RegisterRequestC2B::add_filtercondstr() {
  // @@protoc_insertion_point(field_add_mutable:RegisterRequestC2B.filterCondStr)
  return filtercondstr_.Add();
}
inline void RegisterRequestC2B::add_filtercondstr(const ::std::string& value) {
  filtercondstr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RegisterRequestC2B.filterCondStr)
}
#if LANG_CXX11
inline void RegisterRequestC2B::add_filtercondstr(::std::string&& value) {
  filtercondstr_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:RegisterRequestC2B.filterCondStr)
}
#endif
inline void RegisterRequestC2B::add_filtercondstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  filtercondstr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RegisterRequestC2B.filterCondStr)
}
inline void RegisterRequestC2B::add_filtercondstr(const char* value, size_t size) {
  filtercondstr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RegisterRequestC2B.filterCondStr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RegisterRequestC2B::filtercondstr() const {
  // @@protoc_insertion_point(field_list:RegisterRequestC2B.filterCondStr)
  return filtercondstr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RegisterRequestC2B::mutable_filtercondstr() {
  // @@protoc_insertion_point(field_mutable_list:RegisterRequestC2B.filterCondStr)
  return &filtercondstr_;
}

// optional int64 currOffset = 8;
inline bool RegisterRequestC2B::has_curroffset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RegisterRequestC2B::set_has_curroffset() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RegisterRequestC2B::clear_has_curroffset() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RegisterRequestC2B::clear_curroffset() {
  curroffset_ = GOOGLE_LONGLONG(0);
  clear_has_curroffset();
}
inline ::google::protobuf::int64 RegisterRequestC2B::curroffset() const {
  // @@protoc_insertion_point(field_get:RegisterRequestC2B.currOffset)
  return curroffset_;
}
inline void RegisterRequestC2B::set_curroffset(::google::protobuf::int64 value) {
  set_has_curroffset();
  curroffset_ = value;
  // @@protoc_insertion_point(field_set:RegisterRequestC2B.currOffset)
}

// optional string sessionKey = 9;
inline bool RegisterRequestC2B::has_sessionkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegisterRequestC2B::set_has_sessionkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegisterRequestC2B::clear_has_sessionkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegisterRequestC2B::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionkey();
}
inline const ::std::string& RegisterRequestC2B::sessionkey() const {
  // @@protoc_insertion_point(field_get:RegisterRequestC2B.sessionKey)
  return sessionkey_.GetNoArena();
}
inline void RegisterRequestC2B::set_sessionkey(const ::std::string& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegisterRequestC2B.sessionKey)
}
#if LANG_CXX11
inline void RegisterRequestC2B::set_sessionkey(::std::string&& value) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterRequestC2B.sessionKey)
}
#endif
inline void RegisterRequestC2B::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterRequestC2B.sessionKey)
}
inline void RegisterRequestC2B::set_sessionkey(const char* value, size_t size) {
  set_has_sessionkey();
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterRequestC2B.sessionKey)
}
inline ::std::string* RegisterRequestC2B::mutable_sessionkey() {
  set_has_sessionkey();
  // @@protoc_insertion_point(field_mutable:RegisterRequestC2B.sessionKey)
  return sessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRequestC2B::release_sessionkey() {
  // @@protoc_insertion_point(field_release:RegisterRequestC2B.sessionKey)
  if (!has_sessionkey()) {
    return NULL;
  }
  clear_has_sessionkey();
  return sessionkey_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRequestC2B::set_allocated_sessionkey(::std::string* sessionkey) {
  if (sessionkey != NULL) {
    set_has_sessionkey();
  } else {
    clear_has_sessionkey();
  }
  sessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:RegisterRequestC2B.sessionKey)
}

// optional int64 sessionTime = 10;
inline bool RegisterRequestC2B::has_sessiontime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RegisterRequestC2B::set_has_sessiontime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RegisterRequestC2B::clear_has_sessiontime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RegisterRequestC2B::clear_sessiontime() {
  sessiontime_ = GOOGLE_LONGLONG(0);
  clear_has_sessiontime();
}
inline ::google::protobuf::int64 RegisterRequestC2B::sessiontime() const {
  // @@protoc_insertion_point(field_get:RegisterRequestC2B.sessionTime)
  return sessiontime_;
}
inline void RegisterRequestC2B::set_sessiontime(::google::protobuf::int64 value) {
  set_has_sessiontime();
  sessiontime_ = value;
  // @@protoc_insertion_point(field_set:RegisterRequestC2B.sessionTime)
}

// optional int64 ssdStoreId = 11;
inline bool RegisterRequestC2B::has_ssdstoreid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RegisterRequestC2B::set_has_ssdstoreid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RegisterRequestC2B::clear_has_ssdstoreid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RegisterRequestC2B::clear_ssdstoreid() {
  ssdstoreid_ = GOOGLE_LONGLONG(0);
  clear_has_ssdstoreid();
}
inline ::google::protobuf::int64 RegisterRequestC2B::ssdstoreid() const {
  // @@protoc_insertion_point(field_get:RegisterRequestC2B.ssdStoreId)
  return ssdstoreid_;
}
inline void RegisterRequestC2B::set_ssdstoreid(::google::protobuf::int64 value) {
  set_has_ssdstoreid();
  ssdstoreid_ = value;
  // @@protoc_insertion_point(field_set:RegisterRequestC2B.ssdStoreId)
}

// optional int32 qryPriorityId = 12;
inline bool RegisterRequestC2B::has_qrypriorityid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RegisterRequestC2B::set_has_qrypriorityid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RegisterRequestC2B::clear_has_qrypriorityid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RegisterRequestC2B::clear_qrypriorityid() {
  qrypriorityid_ = 0;
  clear_has_qrypriorityid();
}
inline ::google::protobuf::int32 RegisterRequestC2B::qrypriorityid() const {
  // @@protoc_insertion_point(field_get:RegisterRequestC2B.qryPriorityId)
  return qrypriorityid_;
}
inline void RegisterRequestC2B::set_qrypriorityid(::google::protobuf::int32 value) {
  set_has_qrypriorityid();
  qrypriorityid_ = value;
  // @@protoc_insertion_point(field_set:RegisterRequestC2B.qryPriorityId)
}

// optional .AuthorizedInfo authInfo = 13;
inline bool RegisterRequestC2B::has_authinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegisterRequestC2B::set_has_authinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegisterRequestC2B::clear_has_authinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegisterRequestC2B::clear_authinfo() {
  if (authinfo_ != NULL) authinfo_->Clear();
  clear_has_authinfo();
}
inline const ::AuthorizedInfo& RegisterRequestC2B::_internal_authinfo() const {
  return *authinfo_;
}
inline const ::AuthorizedInfo& RegisterRequestC2B::authinfo() const {
  const ::AuthorizedInfo* p = authinfo_;
  // @@protoc_insertion_point(field_get:RegisterRequestC2B.authInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::AuthorizedInfo*>(
      &::_AuthorizedInfo_default_instance_);
}
inline ::AuthorizedInfo* RegisterRequestC2B::release_authinfo() {
  // @@protoc_insertion_point(field_release:RegisterRequestC2B.authInfo)
  clear_has_authinfo();
  ::AuthorizedInfo* temp = authinfo_;
  authinfo_ = NULL;
  return temp;
}
inline ::AuthorizedInfo* RegisterRequestC2B::mutable_authinfo() {
  set_has_authinfo();
  if (authinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::AuthorizedInfo>(GetArenaNoVirtual());
    authinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:RegisterRequestC2B.authInfo)
  return authinfo_;
}
inline void RegisterRequestC2B::set_allocated_authinfo(::AuthorizedInfo* authinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete authinfo_;
  }
  if (authinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      authinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, authinfo, submessage_arena);
    }
    set_has_authinfo();
  } else {
    clear_has_authinfo();
  }
  authinfo_ = authinfo;
  // @@protoc_insertion_point(field_set_allocated:RegisterRequestC2B.authInfo)
}

// -------------------------------------------------------------------

// RegisterResponseB2C

// required bool success = 1;
inline bool RegisterResponseB2C::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegisterResponseB2C::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegisterResponseB2C::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegisterResponseB2C::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool RegisterResponseB2C::success() const {
  // @@protoc_insertion_point(field_get:RegisterResponseB2C.success)
  return success_;
}
inline void RegisterResponseB2C::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:RegisterResponseB2C.success)
}

// required int32 errCode = 2;
inline bool RegisterResponseB2C::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegisterResponseB2C::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegisterResponseB2C::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegisterResponseB2C::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 RegisterResponseB2C::errcode() const {
  // @@protoc_insertion_point(field_get:RegisterResponseB2C.errCode)
  return errcode_;
}
inline void RegisterResponseB2C::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:RegisterResponseB2C.errCode)
}

// required string errMsg = 3;
inline bool RegisterResponseB2C::has_errmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegisterResponseB2C::set_has_errmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegisterResponseB2C::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegisterResponseB2C::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errmsg();
}
inline const ::std::string& RegisterResponseB2C::errmsg() const {
  // @@protoc_insertion_point(field_get:RegisterResponseB2C.errMsg)
  return errmsg_.GetNoArena();
}
inline void RegisterResponseB2C::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RegisterResponseB2C.errMsg)
}
#if LANG_CXX11
inline void RegisterResponseB2C::set_errmsg(::std::string&& value) {
  set_has_errmsg();
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RegisterResponseB2C.errMsg)
}
#endif
inline void RegisterResponseB2C::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RegisterResponseB2C.errMsg)
}
inline void RegisterResponseB2C::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RegisterResponseB2C.errMsg)
}
inline ::std::string* RegisterResponseB2C::mutable_errmsg() {
  set_has_errmsg();
  // @@protoc_insertion_point(field_mutable:RegisterResponseB2C.errMsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterResponseB2C::release_errmsg() {
  // @@protoc_insertion_point(field_release:RegisterResponseB2C.errMsg)
  if (!has_errmsg()) {
    return NULL;
  }
  clear_has_errmsg();
  return errmsg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterResponseB2C::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    set_has_errmsg();
  } else {
    clear_has_errmsg();
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:RegisterResponseB2C.errMsg)
}

// optional int64 currOffset = 4;
inline bool RegisterResponseB2C::has_curroffset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegisterResponseB2C::set_has_curroffset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegisterResponseB2C::clear_has_curroffset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegisterResponseB2C::clear_curroffset() {
  curroffset_ = GOOGLE_LONGLONG(0);
  clear_has_curroffset();
}
inline ::google::protobuf::int64 RegisterResponseB2C::curroffset() const {
  // @@protoc_insertion_point(field_get:RegisterResponseB2C.currOffset)
  return curroffset_;
}
inline void RegisterResponseB2C::set_curroffset(::google::protobuf::int64 value) {
  set_has_curroffset();
  curroffset_ = value;
  // @@protoc_insertion_point(field_set:RegisterResponseB2C.currOffset)
}

// -------------------------------------------------------------------

// HeartBeatRequestC2B

// required string clientId = 1;
inline bool HeartBeatRequestC2B::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartBeatRequestC2B::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartBeatRequestC2B::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartBeatRequestC2B::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
inline const ::std::string& HeartBeatRequestC2B::clientid() const {
  // @@protoc_insertion_point(field_get:HeartBeatRequestC2B.clientId)
  return clientid_.GetNoArena();
}
inline void HeartBeatRequestC2B::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HeartBeatRequestC2B.clientId)
}
#if LANG_CXX11
inline void HeartBeatRequestC2B::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HeartBeatRequestC2B.clientId)
}
#endif
inline void HeartBeatRequestC2B::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HeartBeatRequestC2B.clientId)
}
inline void HeartBeatRequestC2B::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HeartBeatRequestC2B.clientId)
}
inline ::std::string* HeartBeatRequestC2B::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:HeartBeatRequestC2B.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatRequestC2B::release_clientid() {
  // @@protoc_insertion_point(field_release:HeartBeatRequestC2B.clientId)
  if (!has_clientid()) {
    return NULL;
  }
  clear_has_clientid();
  return clientid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatRequestC2B::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:HeartBeatRequestC2B.clientId)
}

// required string groupName = 2;
inline bool HeartBeatRequestC2B::has_groupname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartBeatRequestC2B::set_has_groupname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartBeatRequestC2B::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartBeatRequestC2B::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupname();
}
inline const ::std::string& HeartBeatRequestC2B::groupname() const {
  // @@protoc_insertion_point(field_get:HeartBeatRequestC2B.groupName)
  return groupname_.GetNoArena();
}
inline void HeartBeatRequestC2B::set_groupname(const ::std::string& value) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HeartBeatRequestC2B.groupName)
}
#if LANG_CXX11
inline void HeartBeatRequestC2B::set_groupname(::std::string&& value) {
  set_has_groupname();
  groupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HeartBeatRequestC2B.groupName)
}
#endif
inline void HeartBeatRequestC2B::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HeartBeatRequestC2B.groupName)
}
inline void HeartBeatRequestC2B::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HeartBeatRequestC2B.groupName)
}
inline ::std::string* HeartBeatRequestC2B::mutable_groupname() {
  set_has_groupname();
  // @@protoc_insertion_point(field_mutable:HeartBeatRequestC2B.groupName)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatRequestC2B::release_groupname() {
  // @@protoc_insertion_point(field_release:HeartBeatRequestC2B.groupName)
  if (!has_groupname()) {
    return NULL;
  }
  clear_has_groupname();
  return groupname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatRequestC2B::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    set_has_groupname();
  } else {
    clear_has_groupname();
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:HeartBeatRequestC2B.groupName)
}

// required int32 readStatus = 3;
inline bool HeartBeatRequestC2B::has_readstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeartBeatRequestC2B::set_has_readstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeartBeatRequestC2B::clear_has_readstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeartBeatRequestC2B::clear_readstatus() {
  readstatus_ = 0;
  clear_has_readstatus();
}
inline ::google::protobuf::int32 HeartBeatRequestC2B::readstatus() const {
  // @@protoc_insertion_point(field_get:HeartBeatRequestC2B.readStatus)
  return readstatus_;
}
inline void HeartBeatRequestC2B::set_readstatus(::google::protobuf::int32 value) {
  set_has_readstatus();
  readstatus_ = value;
  // @@protoc_insertion_point(field_set:HeartBeatRequestC2B.readStatus)
}

// repeated string partitionInfo = 4;
inline int HeartBeatRequestC2B::partitioninfo_size() const {
  return partitioninfo_.size();
}
inline void HeartBeatRequestC2B::clear_partitioninfo() {
  partitioninfo_.Clear();
}
inline const ::std::string& HeartBeatRequestC2B::partitioninfo(int index) const {
  // @@protoc_insertion_point(field_get:HeartBeatRequestC2B.partitionInfo)
  return partitioninfo_.Get(index);
}
inline ::std::string* HeartBeatRequestC2B::mutable_partitioninfo(int index) {
  // @@protoc_insertion_point(field_mutable:HeartBeatRequestC2B.partitionInfo)
  return partitioninfo_.Mutable(index);
}
inline void HeartBeatRequestC2B::set_partitioninfo(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HeartBeatRequestC2B.partitionInfo)
  partitioninfo_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HeartBeatRequestC2B::set_partitioninfo(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:HeartBeatRequestC2B.partitionInfo)
  partitioninfo_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HeartBeatRequestC2B::set_partitioninfo(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  partitioninfo_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:HeartBeatRequestC2B.partitionInfo)
}
inline void HeartBeatRequestC2B::set_partitioninfo(int index, const char* value, size_t size) {
  partitioninfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:HeartBeatRequestC2B.partitionInfo)
}
inline ::std::string* HeartBeatRequestC2B::add_partitioninfo() {
  // @@protoc_insertion_point(field_add_mutable:HeartBeatRequestC2B.partitionInfo)
  return partitioninfo_.Add();
}
inline void HeartBeatRequestC2B::add_partitioninfo(const ::std::string& value) {
  partitioninfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:HeartBeatRequestC2B.partitionInfo)
}
#if LANG_CXX11
inline void HeartBeatRequestC2B::add_partitioninfo(::std::string&& value) {
  partitioninfo_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:HeartBeatRequestC2B.partitionInfo)
}
#endif
inline void HeartBeatRequestC2B::add_partitioninfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  partitioninfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:HeartBeatRequestC2B.partitionInfo)
}
inline void HeartBeatRequestC2B::add_partitioninfo(const char* value, size_t size) {
  partitioninfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:HeartBeatRequestC2B.partitionInfo)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeartBeatRequestC2B::partitioninfo() const {
  // @@protoc_insertion_point(field_list:HeartBeatRequestC2B.partitionInfo)
  return partitioninfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HeartBeatRequestC2B::mutable_partitioninfo() {
  // @@protoc_insertion_point(field_mutable_list:HeartBeatRequestC2B.partitionInfo)
  return &partitioninfo_;
}

// optional int64 ssdStoreId = 5;
inline bool HeartBeatRequestC2B::has_ssdstoreid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeartBeatRequestC2B::set_has_ssdstoreid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HeartBeatRequestC2B::clear_has_ssdstoreid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HeartBeatRequestC2B::clear_ssdstoreid() {
  ssdstoreid_ = GOOGLE_LONGLONG(0);
  clear_has_ssdstoreid();
}
inline ::google::protobuf::int64 HeartBeatRequestC2B::ssdstoreid() const {
  // @@protoc_insertion_point(field_get:HeartBeatRequestC2B.ssdStoreId)
  return ssdstoreid_;
}
inline void HeartBeatRequestC2B::set_ssdstoreid(::google::protobuf::int64 value) {
  set_has_ssdstoreid();
  ssdstoreid_ = value;
  // @@protoc_insertion_point(field_set:HeartBeatRequestC2B.ssdStoreId)
}

// optional int32 qryPriorityId = 6;
inline bool HeartBeatRequestC2B::has_qrypriorityid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeartBeatRequestC2B::set_has_qrypriorityid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeartBeatRequestC2B::clear_has_qrypriorityid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeartBeatRequestC2B::clear_qrypriorityid() {
  qrypriorityid_ = 0;
  clear_has_qrypriorityid();
}
inline ::google::protobuf::int32 HeartBeatRequestC2B::qrypriorityid() const {
  // @@protoc_insertion_point(field_get:HeartBeatRequestC2B.qryPriorityId)
  return qrypriorityid_;
}
inline void HeartBeatRequestC2B::set_qrypriorityid(::google::protobuf::int32 value) {
  set_has_qrypriorityid();
  qrypriorityid_ = value;
  // @@protoc_insertion_point(field_set:HeartBeatRequestC2B.qryPriorityId)
}

// optional .AuthorizedInfo authInfo = 7;
inline bool HeartBeatRequestC2B::has_authinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeartBeatRequestC2B::set_has_authinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeartBeatRequestC2B::clear_has_authinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeartBeatRequestC2B::clear_authinfo() {
  if (authinfo_ != NULL) authinfo_->Clear();
  clear_has_authinfo();
}
inline const ::AuthorizedInfo& HeartBeatRequestC2B::_internal_authinfo() const {
  return *authinfo_;
}
inline const ::AuthorizedInfo& HeartBeatRequestC2B::authinfo() const {
  const ::AuthorizedInfo* p = authinfo_;
  // @@protoc_insertion_point(field_get:HeartBeatRequestC2B.authInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::AuthorizedInfo*>(
      &::_AuthorizedInfo_default_instance_);
}
inline ::AuthorizedInfo* HeartBeatRequestC2B::release_authinfo() {
  // @@protoc_insertion_point(field_release:HeartBeatRequestC2B.authInfo)
  clear_has_authinfo();
  ::AuthorizedInfo* temp = authinfo_;
  authinfo_ = NULL;
  return temp;
}
inline ::AuthorizedInfo* HeartBeatRequestC2B::mutable_authinfo() {
  set_has_authinfo();
  if (authinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::AuthorizedInfo>(GetArenaNoVirtual());
    authinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HeartBeatRequestC2B.authInfo)
  return authinfo_;
}
inline void HeartBeatRequestC2B::set_allocated_authinfo(::AuthorizedInfo* authinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete authinfo_;
  }
  if (authinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      authinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, authinfo, submessage_arena);
    }
    set_has_authinfo();
  } else {
    clear_has_authinfo();
  }
  authinfo_ = authinfo;
  // @@protoc_insertion_point(field_set_allocated:HeartBeatRequestC2B.authInfo)
}

// -------------------------------------------------------------------

// HeartBeatResponseB2C

// required bool success = 1;
inline bool HeartBeatResponseB2C::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeartBeatResponseB2C::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeartBeatResponseB2C::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeartBeatResponseB2C::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool HeartBeatResponseB2C::success() const {
  // @@protoc_insertion_point(field_get:HeartBeatResponseB2C.success)
  return success_;
}
inline void HeartBeatResponseB2C::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:HeartBeatResponseB2C.success)
}

// required int32 errCode = 2;
inline bool HeartBeatResponseB2C::has_errcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartBeatResponseB2C::set_has_errcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartBeatResponseB2C::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartBeatResponseB2C::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 HeartBeatResponseB2C::errcode() const {
  // @@protoc_insertion_point(field_get:HeartBeatResponseB2C.errCode)
  return errcode_;
}
inline void HeartBeatResponseB2C::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:HeartBeatResponseB2C.errCode)
}

// required string errMsg = 3;
inline bool HeartBeatResponseB2C::has_errmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartBeatResponseB2C::set_has_errmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartBeatResponseB2C::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartBeatResponseB2C::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errmsg();
}
inline const ::std::string& HeartBeatResponseB2C::errmsg() const {
  // @@protoc_insertion_point(field_get:HeartBeatResponseB2C.errMsg)
  return errmsg_.GetNoArena();
}
inline void HeartBeatResponseB2C::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HeartBeatResponseB2C.errMsg)
}
#if LANG_CXX11
inline void HeartBeatResponseB2C::set_errmsg(::std::string&& value) {
  set_has_errmsg();
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HeartBeatResponseB2C.errMsg)
}
#endif
inline void HeartBeatResponseB2C::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HeartBeatResponseB2C.errMsg)
}
inline void HeartBeatResponseB2C::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HeartBeatResponseB2C.errMsg)
}
inline ::std::string* HeartBeatResponseB2C::mutable_errmsg() {
  set_has_errmsg();
  // @@protoc_insertion_point(field_mutable:HeartBeatResponseB2C.errMsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeatResponseB2C::release_errmsg() {
  // @@protoc_insertion_point(field_release:HeartBeatResponseB2C.errMsg)
  if (!has_errmsg()) {
    return NULL;
  }
  clear_has_errmsg();
  return errmsg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeatResponseB2C::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    set_has_errmsg();
  } else {
    clear_has_errmsg();
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:HeartBeatResponseB2C.errMsg)
}

// optional bool hasPartFailure = 4;
inline bool HeartBeatResponseB2C::has_haspartfailure() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeartBeatResponseB2C::set_has_haspartfailure() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeartBeatResponseB2C::clear_has_haspartfailure() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeartBeatResponseB2C::clear_haspartfailure() {
  haspartfailure_ = false;
  clear_has_haspartfailure();
}
inline bool HeartBeatResponseB2C::haspartfailure() const {
  // @@protoc_insertion_point(field_get:HeartBeatResponseB2C.hasPartFailure)
  return haspartfailure_;
}
inline void HeartBeatResponseB2C::set_haspartfailure(bool value) {
  set_has_haspartfailure();
  haspartfailure_ = value;
  // @@protoc_insertion_point(field_set:HeartBeatResponseB2C.hasPartFailure)
}

// repeated string failureInfo = 5;
inline int HeartBeatResponseB2C::failureinfo_size() const {
  return failureinfo_.size();
}
inline void HeartBeatResponseB2C::clear_failureinfo() {
  failureinfo_.Clear();
}
inline const ::std::string& HeartBeatResponseB2C::failureinfo(int index) const {
  // @@protoc_insertion_point(field_get:HeartBeatResponseB2C.failureInfo)
  return failureinfo_.Get(index);
}
inline ::std::string* HeartBeatResponseB2C::mutable_failureinfo(int index) {
  // @@protoc_insertion_point(field_mutable:HeartBeatResponseB2C.failureInfo)
  return failureinfo_.Mutable(index);
}
inline void HeartBeatResponseB2C::set_failureinfo(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:HeartBeatResponseB2C.failureInfo)
  failureinfo_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HeartBeatResponseB2C::set_failureinfo(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:HeartBeatResponseB2C.failureInfo)
  failureinfo_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HeartBeatResponseB2C::set_failureinfo(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  failureinfo_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:HeartBeatResponseB2C.failureInfo)
}
inline void HeartBeatResponseB2C::set_failureinfo(int index, const char* value, size_t size) {
  failureinfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:HeartBeatResponseB2C.failureInfo)
}
inline ::std::string* HeartBeatResponseB2C::add_failureinfo() {
  // @@protoc_insertion_point(field_add_mutable:HeartBeatResponseB2C.failureInfo)
  return failureinfo_.Add();
}
inline void HeartBeatResponseB2C::add_failureinfo(const ::std::string& value) {
  failureinfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:HeartBeatResponseB2C.failureInfo)
}
#if LANG_CXX11
inline void HeartBeatResponseB2C::add_failureinfo(::std::string&& value) {
  failureinfo_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:HeartBeatResponseB2C.failureInfo)
}
#endif
inline void HeartBeatResponseB2C::add_failureinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  failureinfo_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:HeartBeatResponseB2C.failureInfo)
}
inline void HeartBeatResponseB2C::add_failureinfo(const char* value, size_t size) {
  failureinfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:HeartBeatResponseB2C.failureInfo)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HeartBeatResponseB2C::failureinfo() const {
  // @@protoc_insertion_point(field_list:HeartBeatResponseB2C.failureInfo)
  return failureinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HeartBeatResponseB2C::mutable_failureinfo() {
  // @@protoc_insertion_point(field_mutable_list:HeartBeatResponseB2C.failureInfo)
  return &failureinfo_;
}

// optional bool requireAuth = 6;
inline bool HeartBeatResponseB2C::has_requireauth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeartBeatResponseB2C::set_has_requireauth() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeartBeatResponseB2C::clear_has_requireauth() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeartBeatResponseB2C::clear_requireauth() {
  requireauth_ = false;
  clear_has_requireauth();
}
inline bool HeartBeatResponseB2C::requireauth() const {
  // @@protoc_insertion_point(field_get:HeartBeatResponseB2C.requireAuth)
  return requireauth_;
}
inline void HeartBeatResponseB2C::set_requireauth(bool value) {
  set_has_requireauth();
  requireauth_ = value;
  // @@protoc_insertion_point(field_set:HeartBeatResponseB2C.requireAuth)
}

// -------------------------------------------------------------------

// GetMessageRequestC2B

// required string clientId = 1;
inline bool GetMessageRequestC2B::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMessageRequestC2B::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMessageRequestC2B::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMessageRequestC2B::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
inline const ::std::string& GetMessageRequestC2B::clientid() const {
  // @@protoc_insertion_point(field_get:GetMessageRequestC2B.clientId)
  return clientid_.GetNoArena();
}
inline void GetMessageRequestC2B::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetMessageRequestC2B.clientId)
}
#if LANG_CXX11
inline void GetMessageRequestC2B::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetMessageRequestC2B.clientId)
}
#endif
inline void GetMessageRequestC2B::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetMessageRequestC2B.clientId)
}
inline void GetMessageRequestC2B::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetMessageRequestC2B.clientId)
}
inline ::std::string* GetMessageRequestC2B::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:GetMessageRequestC2B.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMessageRequestC2B::release_clientid() {
  // @@protoc_insertion_point(field_release:GetMessageRequestC2B.clientId)
  if (!has_clientid()) {
    return NULL;
  }
  clear_has_clientid();
  return clientid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMessageRequestC2B::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:GetMessageRequestC2B.clientId)
}

// required int32 partitionId = 2;
inline bool GetMessageRequestC2B::has_partitionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetMessageRequestC2B::set_has_partitionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetMessageRequestC2B::clear_has_partitionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetMessageRequestC2B::clear_partitionid() {
  partitionid_ = 0;
  clear_has_partitionid();
}
inline ::google::protobuf::int32 GetMessageRequestC2B::partitionid() const {
  // @@protoc_insertion_point(field_get:GetMessageRequestC2B.partitionId)
  return partitionid_;
}
inline void GetMessageRequestC2B::set_partitionid(::google::protobuf::int32 value) {
  set_has_partitionid();
  partitionid_ = value;
  // @@protoc_insertion_point(field_set:GetMessageRequestC2B.partitionId)
}

// required string groupName = 3;
inline bool GetMessageRequestC2B::has_groupname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMessageRequestC2B::set_has_groupname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMessageRequestC2B::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMessageRequestC2B::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupname();
}
inline const ::std::string& GetMessageRequestC2B::groupname() const {
  // @@protoc_insertion_point(field_get:GetMessageRequestC2B.groupName)
  return groupname_.GetNoArena();
}
inline void GetMessageRequestC2B::set_groupname(const ::std::string& value) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetMessageRequestC2B.groupName)
}
#if LANG_CXX11
inline void GetMessageRequestC2B::set_groupname(::std::string&& value) {
  set_has_groupname();
  groupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetMessageRequestC2B.groupName)
}
#endif
inline void GetMessageRequestC2B::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetMessageRequestC2B.groupName)
}
inline void GetMessageRequestC2B::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetMessageRequestC2B.groupName)
}
inline ::std::string* GetMessageRequestC2B::mutable_groupname() {
  set_has_groupname();
  // @@protoc_insertion_point(field_mutable:GetMessageRequestC2B.groupName)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMessageRequestC2B::release_groupname() {
  // @@protoc_insertion_point(field_release:GetMessageRequestC2B.groupName)
  if (!has_groupname()) {
    return NULL;
  }
  clear_has_groupname();
  return groupname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMessageRequestC2B::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    set_has_groupname();
  } else {
    clear_has_groupname();
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:GetMessageRequestC2B.groupName)
}

// required string topicName = 4;
inline bool GetMessageRequestC2B::has_topicname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetMessageRequestC2B::set_has_topicname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetMessageRequestC2B::clear_has_topicname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetMessageRequestC2B::clear_topicname() {
  topicname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topicname();
}
inline const ::std::string& GetMessageRequestC2B::topicname() const {
  // @@protoc_insertion_point(field_get:GetMessageRequestC2B.topicName)
  return topicname_.GetNoArena();
}
inline void GetMessageRequestC2B::set_topicname(const ::std::string& value) {
  set_has_topicname();
  topicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetMessageRequestC2B.topicName)
}
#if LANG_CXX11
inline void GetMessageRequestC2B::set_topicname(::std::string&& value) {
  set_has_topicname();
  topicname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetMessageRequestC2B.topicName)
}
#endif
inline void GetMessageRequestC2B::set_topicname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_topicname();
  topicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetMessageRequestC2B.topicName)
}
inline void GetMessageRequestC2B::set_topicname(const char* value, size_t size) {
  set_has_topicname();
  topicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetMessageRequestC2B.topicName)
}
inline ::std::string* GetMessageRequestC2B::mutable_topicname() {
  set_has_topicname();
  // @@protoc_insertion_point(field_mutable:GetMessageRequestC2B.topicName)
  return topicname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMessageRequestC2B::release_topicname() {
  // @@protoc_insertion_point(field_release:GetMessageRequestC2B.topicName)
  if (!has_topicname()) {
    return NULL;
  }
  clear_has_topicname();
  return topicname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMessageRequestC2B::set_allocated_topicname(::std::string* topicname) {
  if (topicname != NULL) {
    set_has_topicname();
  } else {
    clear_has_topicname();
  }
  topicname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topicname);
  // @@protoc_insertion_point(field_set_allocated:GetMessageRequestC2B.topicName)
}

// optional bool lastPackConsumed = 5;
inline bool GetMessageRequestC2B::has_lastpackconsumed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetMessageRequestC2B::set_has_lastpackconsumed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetMessageRequestC2B::clear_has_lastpackconsumed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetMessageRequestC2B::clear_lastpackconsumed() {
  lastpackconsumed_ = false;
  clear_has_lastpackconsumed();
}
inline bool GetMessageRequestC2B::lastpackconsumed() const {
  // @@protoc_insertion_point(field_get:GetMessageRequestC2B.lastPackConsumed)
  return lastpackconsumed_;
}
inline void GetMessageRequestC2B::set_lastpackconsumed(bool value) {
  set_has_lastpackconsumed();
  lastpackconsumed_ = value;
  // @@protoc_insertion_point(field_set:GetMessageRequestC2B.lastPackConsumed)
}

// optional bool manualCommitOffset = 6;
inline bool GetMessageRequestC2B::has_manualcommitoffset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetMessageRequestC2B::set_has_manualcommitoffset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetMessageRequestC2B::clear_has_manualcommitoffset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetMessageRequestC2B::clear_manualcommitoffset() {
  manualcommitoffset_ = false;
  clear_has_manualcommitoffset();
}
inline bool GetMessageRequestC2B::manualcommitoffset() const {
  // @@protoc_insertion_point(field_get:GetMessageRequestC2B.manualCommitOffset)
  return manualcommitoffset_;
}
inline void GetMessageRequestC2B::set_manualcommitoffset(bool value) {
  set_has_manualcommitoffset();
  manualcommitoffset_ = value;
  // @@protoc_insertion_point(field_set:GetMessageRequestC2B.manualCommitOffset)
}

// optional bool escFlowCtrl = 7;
inline bool GetMessageRequestC2B::has_escflowctrl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetMessageRequestC2B::set_has_escflowctrl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetMessageRequestC2B::clear_has_escflowctrl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetMessageRequestC2B::clear_escflowctrl() {
  escflowctrl_ = false;
  clear_has_escflowctrl();
}
inline bool GetMessageRequestC2B::escflowctrl() const {
  // @@protoc_insertion_point(field_get:GetMessageRequestC2B.escFlowCtrl)
  return escflowctrl_;
}
inline void GetMessageRequestC2B::set_escflowctrl(bool value) {
  set_has_escflowctrl();
  escflowctrl_ = value;
  // @@protoc_insertion_point(field_set:GetMessageRequestC2B.escFlowCtrl)
}

// -------------------------------------------------------------------

// GetMessageResponseB2C

// required bool success = 1;
inline bool GetMessageResponseB2C::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetMessageResponseB2C::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetMessageResponseB2C::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetMessageResponseB2C::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool GetMessageResponseB2C::success() const {
  // @@protoc_insertion_point(field_get:GetMessageResponseB2C.success)
  return success_;
}
inline void GetMessageResponseB2C::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:GetMessageResponseB2C.success)
}

// required int32 errCode = 2;
inline bool GetMessageResponseB2C::has_errcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetMessageResponseB2C::set_has_errcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetMessageResponseB2C::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetMessageResponseB2C::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 GetMessageResponseB2C::errcode() const {
  // @@protoc_insertion_point(field_get:GetMessageResponseB2C.errCode)
  return errcode_;
}
inline void GetMessageResponseB2C::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:GetMessageResponseB2C.errCode)
}

// optional string errMsg = 3;
inline bool GetMessageResponseB2C::has_errmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetMessageResponseB2C::set_has_errmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetMessageResponseB2C::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetMessageResponseB2C::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errmsg();
}
inline const ::std::string& GetMessageResponseB2C::errmsg() const {
  // @@protoc_insertion_point(field_get:GetMessageResponseB2C.errMsg)
  return errmsg_.GetNoArena();
}
inline void GetMessageResponseB2C::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetMessageResponseB2C.errMsg)
}
#if LANG_CXX11
inline void GetMessageResponseB2C::set_errmsg(::std::string&& value) {
  set_has_errmsg();
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetMessageResponseB2C.errMsg)
}
#endif
inline void GetMessageResponseB2C::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetMessageResponseB2C.errMsg)
}
inline void GetMessageResponseB2C::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetMessageResponseB2C.errMsg)
}
inline ::std::string* GetMessageResponseB2C::mutable_errmsg() {
  set_has_errmsg();
  // @@protoc_insertion_point(field_mutable:GetMessageResponseB2C.errMsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetMessageResponseB2C::release_errmsg() {
  // @@protoc_insertion_point(field_release:GetMessageResponseB2C.errMsg)
  if (!has_errmsg()) {
    return NULL;
  }
  clear_has_errmsg();
  return errmsg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetMessageResponseB2C::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    set_has_errmsg();
  } else {
    clear_has_errmsg();
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:GetMessageResponseB2C.errMsg)
}

// repeated .TransferedMessage messages = 4;
inline int GetMessageResponseB2C::messages_size() const {
  return messages_.size();
}
inline void GetMessageResponseB2C::clear_messages() {
  messages_.Clear();
}
inline ::TransferedMessage* GetMessageResponseB2C::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:GetMessageResponseB2C.messages)
  return messages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TransferedMessage >*
GetMessageResponseB2C::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:GetMessageResponseB2C.messages)
  return &messages_;
}
inline const ::TransferedMessage& GetMessageResponseB2C::messages(int index) const {
  // @@protoc_insertion_point(field_get:GetMessageResponseB2C.messages)
  return messages_.Get(index);
}
inline ::TransferedMessage* GetMessageResponseB2C::add_messages() {
  // @@protoc_insertion_point(field_add:GetMessageResponseB2C.messages)
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TransferedMessage >&
GetMessageResponseB2C::messages() const {
  // @@protoc_insertion_point(field_list:GetMessageResponseB2C.messages)
  return messages_;
}

// optional int64 currOffset = 5;
inline bool GetMessageResponseB2C::has_curroffset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetMessageResponseB2C::set_has_curroffset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetMessageResponseB2C::clear_has_curroffset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetMessageResponseB2C::clear_curroffset() {
  curroffset_ = GOOGLE_LONGLONG(0);
  clear_has_curroffset();
}
inline ::google::protobuf::int64 GetMessageResponseB2C::curroffset() const {
  // @@protoc_insertion_point(field_get:GetMessageResponseB2C.currOffset)
  return curroffset_;
}
inline void GetMessageResponseB2C::set_curroffset(::google::protobuf::int64 value) {
  set_has_curroffset();
  curroffset_ = value;
  // @@protoc_insertion_point(field_set:GetMessageResponseB2C.currOffset)
}

// optional int32 minLimitTime = 6;
inline bool GetMessageResponseB2C::has_minlimittime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetMessageResponseB2C::set_has_minlimittime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetMessageResponseB2C::clear_has_minlimittime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetMessageResponseB2C::clear_minlimittime() {
  minlimittime_ = 0;
  clear_has_minlimittime();
}
inline ::google::protobuf::int32 GetMessageResponseB2C::minlimittime() const {
  // @@protoc_insertion_point(field_get:GetMessageResponseB2C.minLimitTime)
  return minlimittime_;
}
inline void GetMessageResponseB2C::set_minlimittime(::google::protobuf::int32 value) {
  set_has_minlimittime();
  minlimittime_ = value;
  // @@protoc_insertion_point(field_set:GetMessageResponseB2C.minLimitTime)
}

// optional bool escFlowCtrl = 7;
inline bool GetMessageResponseB2C::has_escflowctrl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetMessageResponseB2C::set_has_escflowctrl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetMessageResponseB2C::clear_has_escflowctrl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetMessageResponseB2C::clear_escflowctrl() {
  escflowctrl_ = false;
  clear_has_escflowctrl();
}
inline bool GetMessageResponseB2C::escflowctrl() const {
  // @@protoc_insertion_point(field_get:GetMessageResponseB2C.escFlowCtrl)
  return escflowctrl_;
}
inline void GetMessageResponseB2C::set_escflowctrl(bool value) {
  set_has_escflowctrl();
  escflowctrl_ = value;
  // @@protoc_insertion_point(field_set:GetMessageResponseB2C.escFlowCtrl)
}

// optional int64 currDataDlt = 8;
inline bool GetMessageResponseB2C::has_currdatadlt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetMessageResponseB2C::set_has_currdatadlt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetMessageResponseB2C::clear_has_currdatadlt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetMessageResponseB2C::clear_currdatadlt() {
  currdatadlt_ = GOOGLE_LONGLONG(0);
  clear_has_currdatadlt();
}
inline ::google::protobuf::int64 GetMessageResponseB2C::currdatadlt() const {
  // @@protoc_insertion_point(field_get:GetMessageResponseB2C.currDataDlt)
  return currdatadlt_;
}
inline void GetMessageResponseB2C::set_currdatadlt(::google::protobuf::int64 value) {
  set_has_currdatadlt();
  currdatadlt_ = value;
  // @@protoc_insertion_point(field_set:GetMessageResponseB2C.currDataDlt)
}

// optional bool requireSlow = 9;
inline bool GetMessageResponseB2C::has_requireslow() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetMessageResponseB2C::set_has_requireslow() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetMessageResponseB2C::clear_has_requireslow() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetMessageResponseB2C::clear_requireslow() {
  requireslow_ = false;
  clear_has_requireslow();
}
inline bool GetMessageResponseB2C::requireslow() const {
  // @@protoc_insertion_point(field_get:GetMessageResponseB2C.requireSlow)
  return requireslow_;
}
inline void GetMessageResponseB2C::set_requireslow(bool value) {
  set_has_requireslow();
  requireslow_ = value;
  // @@protoc_insertion_point(field_set:GetMessageResponseB2C.requireSlow)
}

// -------------------------------------------------------------------

// CommitOffsetRequestC2B

// required string clientId = 1;
inline bool CommitOffsetRequestC2B::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommitOffsetRequestC2B::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommitOffsetRequestC2B::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommitOffsetRequestC2B::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
inline const ::std::string& CommitOffsetRequestC2B::clientid() const {
  // @@protoc_insertion_point(field_get:CommitOffsetRequestC2B.clientId)
  return clientid_.GetNoArena();
}
inline void CommitOffsetRequestC2B::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommitOffsetRequestC2B.clientId)
}
#if LANG_CXX11
inline void CommitOffsetRequestC2B::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommitOffsetRequestC2B.clientId)
}
#endif
inline void CommitOffsetRequestC2B::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommitOffsetRequestC2B.clientId)
}
inline void CommitOffsetRequestC2B::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommitOffsetRequestC2B.clientId)
}
inline ::std::string* CommitOffsetRequestC2B::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:CommitOffsetRequestC2B.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommitOffsetRequestC2B::release_clientid() {
  // @@protoc_insertion_point(field_release:CommitOffsetRequestC2B.clientId)
  if (!has_clientid()) {
    return NULL;
  }
  clear_has_clientid();
  return clientid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommitOffsetRequestC2B::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:CommitOffsetRequestC2B.clientId)
}

// required string topicName = 2;
inline bool CommitOffsetRequestC2B::has_topicname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommitOffsetRequestC2B::set_has_topicname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommitOffsetRequestC2B::clear_has_topicname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommitOffsetRequestC2B::clear_topicname() {
  topicname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topicname();
}
inline const ::std::string& CommitOffsetRequestC2B::topicname() const {
  // @@protoc_insertion_point(field_get:CommitOffsetRequestC2B.topicName)
  return topicname_.GetNoArena();
}
inline void CommitOffsetRequestC2B::set_topicname(const ::std::string& value) {
  set_has_topicname();
  topicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommitOffsetRequestC2B.topicName)
}
#if LANG_CXX11
inline void CommitOffsetRequestC2B::set_topicname(::std::string&& value) {
  set_has_topicname();
  topicname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommitOffsetRequestC2B.topicName)
}
#endif
inline void CommitOffsetRequestC2B::set_topicname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_topicname();
  topicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommitOffsetRequestC2B.topicName)
}
inline void CommitOffsetRequestC2B::set_topicname(const char* value, size_t size) {
  set_has_topicname();
  topicname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommitOffsetRequestC2B.topicName)
}
inline ::std::string* CommitOffsetRequestC2B::mutable_topicname() {
  set_has_topicname();
  // @@protoc_insertion_point(field_mutable:CommitOffsetRequestC2B.topicName)
  return topicname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommitOffsetRequestC2B::release_topicname() {
  // @@protoc_insertion_point(field_release:CommitOffsetRequestC2B.topicName)
  if (!has_topicname()) {
    return NULL;
  }
  clear_has_topicname();
  return topicname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommitOffsetRequestC2B::set_allocated_topicname(::std::string* topicname) {
  if (topicname != NULL) {
    set_has_topicname();
  } else {
    clear_has_topicname();
  }
  topicname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topicname);
  // @@protoc_insertion_point(field_set_allocated:CommitOffsetRequestC2B.topicName)
}

// required int32 partitionId = 3;
inline bool CommitOffsetRequestC2B::has_partitionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommitOffsetRequestC2B::set_has_partitionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommitOffsetRequestC2B::clear_has_partitionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommitOffsetRequestC2B::clear_partitionid() {
  partitionid_ = 0;
  clear_has_partitionid();
}
inline ::google::protobuf::int32 CommitOffsetRequestC2B::partitionid() const {
  // @@protoc_insertion_point(field_get:CommitOffsetRequestC2B.partitionId)
  return partitionid_;
}
inline void CommitOffsetRequestC2B::set_partitionid(::google::protobuf::int32 value) {
  set_has_partitionid();
  partitionid_ = value;
  // @@protoc_insertion_point(field_set:CommitOffsetRequestC2B.partitionId)
}

// required string groupName = 4;
inline bool CommitOffsetRequestC2B::has_groupname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommitOffsetRequestC2B::set_has_groupname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommitOffsetRequestC2B::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommitOffsetRequestC2B::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupname();
}
inline const ::std::string& CommitOffsetRequestC2B::groupname() const {
  // @@protoc_insertion_point(field_get:CommitOffsetRequestC2B.groupName)
  return groupname_.GetNoArena();
}
inline void CommitOffsetRequestC2B::set_groupname(const ::std::string& value) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommitOffsetRequestC2B.groupName)
}
#if LANG_CXX11
inline void CommitOffsetRequestC2B::set_groupname(::std::string&& value) {
  set_has_groupname();
  groupname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommitOffsetRequestC2B.groupName)
}
#endif
inline void CommitOffsetRequestC2B::set_groupname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommitOffsetRequestC2B.groupName)
}
inline void CommitOffsetRequestC2B::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommitOffsetRequestC2B.groupName)
}
inline ::std::string* CommitOffsetRequestC2B::mutable_groupname() {
  set_has_groupname();
  // @@protoc_insertion_point(field_mutable:CommitOffsetRequestC2B.groupName)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommitOffsetRequestC2B::release_groupname() {
  // @@protoc_insertion_point(field_release:CommitOffsetRequestC2B.groupName)
  if (!has_groupname()) {
    return NULL;
  }
  clear_has_groupname();
  return groupname_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommitOffsetRequestC2B::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    set_has_groupname();
  } else {
    clear_has_groupname();
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:CommitOffsetRequestC2B.groupName)
}

// optional bool lastPackConsumed = 5;
inline bool CommitOffsetRequestC2B::has_lastpackconsumed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommitOffsetRequestC2B::set_has_lastpackconsumed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommitOffsetRequestC2B::clear_has_lastpackconsumed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommitOffsetRequestC2B::clear_lastpackconsumed() {
  lastpackconsumed_ = false;
  clear_has_lastpackconsumed();
}
inline bool CommitOffsetRequestC2B::lastpackconsumed() const {
  // @@protoc_insertion_point(field_get:CommitOffsetRequestC2B.lastPackConsumed)
  return lastpackconsumed_;
}
inline void CommitOffsetRequestC2B::set_lastpackconsumed(bool value) {
  set_has_lastpackconsumed();
  lastpackconsumed_ = value;
  // @@protoc_insertion_point(field_set:CommitOffsetRequestC2B.lastPackConsumed)
}

// -------------------------------------------------------------------

// CommitOffsetResponseB2C

// required bool success = 1;
inline bool CommitOffsetResponseB2C::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommitOffsetResponseB2C::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommitOffsetResponseB2C::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommitOffsetResponseB2C::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool CommitOffsetResponseB2C::success() const {
  // @@protoc_insertion_point(field_get:CommitOffsetResponseB2C.success)
  return success_;
}
inline void CommitOffsetResponseB2C::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:CommitOffsetResponseB2C.success)
}

// required int32 errCode = 2;
inline bool CommitOffsetResponseB2C::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommitOffsetResponseB2C::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommitOffsetResponseB2C::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommitOffsetResponseB2C::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 CommitOffsetResponseB2C::errcode() const {
  // @@protoc_insertion_point(field_get:CommitOffsetResponseB2C.errCode)
  return errcode_;
}
inline void CommitOffsetResponseB2C::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:CommitOffsetResponseB2C.errCode)
}

// required string errMsg = 3;
inline bool CommitOffsetResponseB2C::has_errmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommitOffsetResponseB2C::set_has_errmsg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommitOffsetResponseB2C::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommitOffsetResponseB2C::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errmsg();
}
inline const ::std::string& CommitOffsetResponseB2C::errmsg() const {
  // @@protoc_insertion_point(field_get:CommitOffsetResponseB2C.errMsg)
  return errmsg_.GetNoArena();
}
inline void CommitOffsetResponseB2C::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CommitOffsetResponseB2C.errMsg)
}
#if LANG_CXX11
inline void CommitOffsetResponseB2C::set_errmsg(::std::string&& value) {
  set_has_errmsg();
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CommitOffsetResponseB2C.errMsg)
}
#endif
inline void CommitOffsetResponseB2C::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CommitOffsetResponseB2C.errMsg)
}
inline void CommitOffsetResponseB2C::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CommitOffsetResponseB2C.errMsg)
}
inline ::std::string* CommitOffsetResponseB2C::mutable_errmsg() {
  set_has_errmsg();
  // @@protoc_insertion_point(field_mutable:CommitOffsetResponseB2C.errMsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommitOffsetResponseB2C::release_errmsg() {
  // @@protoc_insertion_point(field_release:CommitOffsetResponseB2C.errMsg)
  if (!has_errmsg()) {
    return NULL;
  }
  clear_has_errmsg();
  return errmsg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommitOffsetResponseB2C::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    set_has_errmsg();
  } else {
    clear_has_errmsg();
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:CommitOffsetResponseB2C.errMsg)
}

// optional int64 currOffset = 4;
inline bool CommitOffsetResponseB2C::has_curroffset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommitOffsetResponseB2C::set_has_curroffset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommitOffsetResponseB2C::clear_has_curroffset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommitOffsetResponseB2C::clear_curroffset() {
  curroffset_ = GOOGLE_LONGLONG(0);
  clear_has_curroffset();
}
inline ::google::protobuf::int64 CommitOffsetResponseB2C::curroffset() const {
  // @@protoc_insertion_point(field_get:CommitOffsetResponseB2C.currOffset)
  return curroffset_;
}
inline void CommitOffsetResponseB2C::set_curroffset(::google::protobuf::int64 value) {
  set_has_curroffset();
  curroffset_ = value;
  // @@protoc_insertion_point(field_set:CommitOffsetResponseB2C.currOffset)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_BrokerService_2eproto
